/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,n={184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var o=typeof n;if("string"===o||"number"===o)e.push(n);else if(Array.isArray(n)){if(n.length){var a=i.apply(null,n);a&&e.push(a)}}else if("object"===o){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){e.push(n.toString());continue}for(var l in n)r.call(n,l)&&n[l]&&e.push(l)}}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(n=function(){return i}.apply(t,[]))||(e.exports=n)}()},528:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"body{font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;font-size:18px}.loader{margin:auto;width:650px;height:900px;display:flex;justify-content:center;align-items:center;background-color:#cdcdcd}.container{background-color:#afb0af;width:500px;margin:auto;padding:20px}.navContainer{background-color:#84867b;display:flex;flex-direction:row;margin:auto;max-width:950px;min-width:950px;justify-content:space-around}.navContainer .linker{color:#cdcdcd;text-decoration:none;font-weight:bold}.navContainer .linker:hover{font-weight:bold;color:#fdc714;text-shadow:2px 2px 7px black}.spectral{height:40px}.fizika{display:flex;flex-direction:column;margin:auto;background-color:#f4f2eb;width:950px}.fizika .head{padding-left:300px;text-align:center}.fizika .warp{padding:2px 15px;display:flex;flex-direction:column;font-size:22px}.fizika .warp div{padding:10px 0px}.fizika .warp p{font-size:18px}.fizika .atomDet{padding:3px 20px}.fizika .summary{width:890px}.fizika .nameAtom{padding-top:15px;font-size:26px;width:800px;padding-left:35px}.fizika .nameAtom:hover{cursor:pointer;color:#fc9700;text-shadow:1px 1px 2px black}.fizika .symbol{text-align:center;width:90px;height:auto;background-color:#fdfdfd;border:1px solid #100e42;border-radius:7px;font-size:52px;color:#070818;font-family:'Arial Narrow Bold', sans-serif}.fizika .symbolClick{display:flex;position:relative;justify-content:center;align-items:center;color:#070818;border:1px solid #070818;background-color:#ffffff;border-radius:7px;font-size:52px;width:100px;height:100px}.fizika .symbolClick:hover{cursor:pointer;text-shadow:1px 1px 2px #fe9b30}.fizika .symbolClick .number{color:#000000;font-size:18px;position:absolute;top:5px;right:5px}.fizika .symbolClick .name{color:#000000;font-size:14px;position:absolute;bottom:5px;left:5px}.fizika .spImg{height:100px}.fizika .imgHold{width:930px}.fizika .atomicMass{width:200px}.fizika model-viewer{margin:auto;cursor:grab;display:flex;height:700px;width:925px;border-color:#fd4a14;overflow:hidden;position:relative;user-select:none}.fizika .span{width:925px;height:2px;border-bottom:solid 2px #828c82}.view-button{background-color:transparent;border-color:transparent}.back-to-top{position:fixed;bottom:120px;right:300px;font-size:55px;color:#090e43;cursor:pointer;border-radius:4px}.back-to-top:hover{color:#777;transform:scale(1.2, 1.2);z-index:1}.periodic-table{margin-top:380px;display:grid;grid-template-columns:repeat(18, 64px);grid-template-rows:repeat(10, 64px);grid-gap:4px;position:absolute;left:50%;transform:translate(-50%, -50%)}.element{border:1px solid #aaa;display:flex;position:relative;align-items:center;justify-content:center;font-family:Tahoma, Geneva, Verdana, sans-serif;font-size:34px;cursor:pointer}.element .number{font-size:12px;position:absolute;top:3px;right:3px}.element .name{font-size:9px;position:absolute;bottom:3px;left:3px}.element:hover{transform:scale(1.4, 1.4);z-index:1}.category{font-size:20px;width:1200px;margin:auto;margin-top:750px;text-align:center}.category td{width:400px;height:20px;border-radius:6px}.category .space{height:500px}@media screen and (max-width: 1400px){.back-to-top{font-size:45px;bottom:20px;right:200px}}@media screen and (max-width: 1050px){.back-to-top{font-size:38px;bottom:20px;right:50px}}@media screen and (max-width: 900px){.navContainer{max-width:800px;min-width:800px;margin:auto}.periodic-table{margin-top:240px;display:grid;grid-template-columns:repeat(18, 36px);grid-template-rows:repeat(10, 47px);grid-gap:3px;position:absolute;left:50%;transform:translate(-50%, -50%)}.element{top:25px;font-size:22px}.element .number{font-size:10px;top:0px;right:1px}.element .name{color:transparent}.fizika{width:800px}.fizika .imgHold{width:790px}.fizika .summary{width:760px}.fizika model-viewer{height:500px;width:660px}.fizika .span{width:800px}.elements{margin-top:5px}.category{font-size:16px;width:660px;margin:auto;margin-top:530px;text-align:center}.category td{height:20px;width:220px;border-radius:6px}.category .space{height:900px}.back-to-top{font-size:35px;bottom:60px;right:30px}}@media screen and (max-width: 750px){.navContainer{max-width:750px;min-width:750px;margin:auto}.category{width:600px}.fizika{width:750px}.fizika .imgHold{width:730px}.fizika .summary{width:730px}.fizika model-viewer{height:500px;width:680px}}@media screen and (max-width: 670px){.periodic-table{margin-top:230px;display:grid;grid-template-columns:repeat(18, 32px);grid-template-rows:repeat(10, 34px)}.element{top:25px;font-size:18px}.element .number{font-size:8px;top:0px;right:1px}.element .name{color:transparent}.category{font-size:14px;width:600px;margin:auto;margin-top:520px;text-align:center}.category td{height:40px;width:200px;border-radius:6px}.category .space{height:900px}.navContainer{max-width:600px;min-width:600px}.fizika{width:600px}.fizika .head{padding-left:100px;font-size:26px}.fizika .warp{max-width:358px;padding:3px 10px;font-size:16px}.fizika .warp div{padding:5px 0px}.fizika .warp p{font-size:12px}.fizika .atomDet{padding:2px 12px}.fizika .summary{width:340px}.fizika .symbol{max-width:70px;min-width:70px;font-size:32px}.fizika .nameAtom{padding-left:15px;font-size:25px}.fizika .symbolClick{font-size:42px;width:80px;height:80px}.fizika .symbolClick:hover{cursor:pointer;text-shadow:1px 1px 3px #f3b85f}.fizika .symbolClick .number{color:#000000;font-size:16px;position:absolute;top:5px;right:5px}.fizika .symbolClick .name{color:#000000;font-size:11px;position:absolute;bottom:5px;left:5px}.fizika .spImg{height:60px}.fizika .imgHold{width:343px}.fizika model-viewer{height:300px;width:343px}.fizika .span{width:343px}}@media screen and (max-width: 430px){.fizika{width:400px}.periodic-table{margin-top:-200px;display:grid;grid-template-columns:repeat(18, 18px);grid-template-rows:repeat(10, 20px);grid-gap:1px;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.periodic-table .element{border:1px solid transparent;display:flex;position:relative;align-items:center;justify-content:center;font-family:Tahoma, Geneva, Verdana, sans-serif;font-size:12px}.periodic-table .element .number{font-size:3px;position:absolute;top:0px;left:9px}.periodic-table .element .name{color:transparent}.category{font-size:14px;width:345px;margin:auto;margin-top:280px;text-align:center}.category td{height:50px;width:115px;border-radius:6px}.category .space{height:900px}}@media screen and (max-width: 390px){body{font-size:16px;margin:0;padding:0}.fizika{width:358px}.loader{max-width:358px;min-width:358px;height:700px}.navContainer{max-width:358px;min-width:358px}.navContainer .linker:hover{text-shadow:1px 1px 4px black}.periodic-table{margin-top:-150px}.category{font-size:14px;width:345px;margin:auto;margin-top:300px}.back-to-top{font-size:32px;bottom:60px;right:20px}}\n","",{version:3,sources:["webpack://./src/scss/main.scss"],names:[],mappings:"AAIA,KACI,oGAAqG,CACrG,cAAe,CAGlB,QAGG,WAAY,CACZ,WAAY,CACZ,YAAa,CACb,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,wBAlBe,CAmBlB,WAGG,wBAAyB,CACzB,WAAY,CACZ,WAAY,CACZ,YAAa,CAChB,cAIG,wBAAyB,CACzB,YAAa,CACb,kBAAmB,CACnB,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,4BAA6B,CAPjC,sBAUQ,aAvCW,CAwCX,oBAAqB,CACrB,gBAAiB,CAZzB,4BAeY,gBAAiB,CACjB,aAAc,CACd,6BAA8B,CACjC,UAKL,WAAY,CACf,QAIG,YAAa,CACb,qBAAsB,CACtB,WAAY,CACb,wBAAyB,CACxB,WAAY,CALhB,cAQQ,kBAAmB,CACnB,iBAAkB,CAT1B,cAaQ,gBAAiB,CACjB,YAAa,CACb,qBAAsB,CACtB,cAAe,CAhBvB,kBAmBY,gBAAiB,CAnB7B,gBAuBY,cAAe,CAvB3B,iBA4BQ,gBAAiB,CA5BzB,iBAgCQ,WAAY,CAhCpB,kBAoCQ,gBAAiB,CAEjB,cAAe,CACf,WAAY,CACZ,iBAAkB,CAxC1B,wBA2CY,cAAe,CACf,aAAc,CACd,6BAA8B,CA7C1C,gBAkDQ,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,wBAAyB,CACzB,wBAAyB,CAEzB,iBAAkB,CAClB,cAAe,CACf,aAAc,CACd,2CAA4C,CA3DpD,qBA+DQ,YAAa,CACb,iBAAkB,CAClB,sBAAuB,CACvB,kBAAmB,CACnB,aAAc,CACd,wBAAyB,CACzB,wBAAyB,CACzB,iBAAkB,CAClB,cAAe,CACf,WAAY,CACZ,YAAa,CAzErB,2BA4EY,cAAe,CAGf,+BAA0C,CA/EtD,6BAoFY,aAAc,CACd,cAAe,CACf,iBAAkB,CAClB,OAAQ,CACR,SAAU,CAxFtB,2BA4FY,aAAc,CACd,cAAe,CACf,iBAAkB,CAClB,UAAW,CACX,QAAS,CAhGrB,eAsGQ,YAAa,CAtGrB,iBA4GQ,WAAY,CA5GpB,oBAmHQ,WAAY,CAnHpB,qBAyHQ,WAAY,CACZ,WAAY,CACZ,YAAa,CACb,YAAa,CACb,WAAY,CACZ,oBAAqB,CACrB,eAAgB,CAChB,iBAAkB,CAClB,gBAAiB,CAjIzB,cAqIQ,WAAY,CACZ,UAAW,CACX,+BAAgC,CACnC,aAID,4BAA6B,CAC7B,wBAAyB,CAE5B,aAKG,cAAe,CACf,YAAa,CACb,WAAY,CACZ,cAAe,CACf,aAAqB,CACrB,cAAe,CACf,iBAAkB,CAPtB,mBAWQ,UAAyB,CAGzB,yBAA0B,CAC1B,SAAU,CACb,gBAWD,gBAAiB,CACjB,YAAa,CACb,sCAAuC,CACvC,mCAAoC,CACpC,YAAa,CACb,iBAAkB,CAElB,QAAS,CACT,+BAAgC,CACnC,SAIG,qBAAsB,CACtB,YAAa,CACb,iBAAkB,CAClB,kBAAmB,CACnB,sBAAuB,CACvB,+CAAgD,CAChD,cAAe,CACf,cAAe,CATnB,iBAYQ,cAAe,CACf,iBAAkB,CAClB,OAAQ,CACR,SAAU,CAflB,eAmBQ,aAAc,CACd,iBAAkB,CAClB,UAAW,CACX,QAAS,CACZ,eAID,yBAA0B,CAC1B,SAAU,CACb,UAGG,cAAe,CACf,YAAa,CACb,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CALtB,aAQQ,WAAY,CACZ,WAAY,CACZ,iBAAkB,CAV1B,iBAcQ,YAAa,CAChB,sCAKD,aACI,cAAe,CACf,WAAY,CACZ,WAAY,CACf,CAIL,sCACI,aACI,cAAe,CACf,WAAY,CACZ,UAAW,CACd,CAIL,qCACI,cACI,eAAgB,CAChB,eAAgB,CAGhB,WAAY,CAEf,gBAGG,gBAAiB,CACjB,YAAa,CACb,sCAAuC,CACvC,mCAAoC,CACpC,YAAa,CACb,iBAAkB,CAElB,QAAS,CACT,+BAAgC,CACnC,SAGG,QAAS,CACT,cAAe,CAFnB,iBAKQ,cAAe,CACf,OAAQ,CACR,SAAU,CAPlB,eAYQ,iBAAkB,CAErB,QAKD,WAAY,CADhB,iBAIQ,WAAY,CAJpB,iBAQQ,WAAY,CARpB,qBAaQ,YAAa,CACb,WAAY,CAdpB,cAmBQ,WAAY,CACf,UAKD,cAAe,CAClB,UAGG,cAAe,CACf,WAAY,CACZ,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CALtB,aAQQ,WAAY,CACZ,WAAY,CACZ,iBAAkB,CAV1B,iBAcQ,YAAa,CAChB,aAID,cAAe,CACf,WAAY,CACZ,UAAW,CACd,CAEL,qCACI,cACI,eAAgB,CAChB,eAAgB,CAGhB,WAAY,CAEf,UAEG,WAAY,CACf,QAEG,WAAY,CADhB,iBAGQ,WAAY,CAHpB,iBAOQ,WAAY,CAPpB,qBAWQ,YAAa,CACb,WAAY,CAEf,CAKT,qCAII,gBAEI,gBAAiB,CACjB,YAAa,CACb,sCAAuC,CACvC,mCAAoC,CACvC,SAEG,QAAS,CACT,cAAe,CAFnB,iBAKQ,aAAc,CACd,OAAQ,CACR,SAAU,CAPlB,eAYQ,iBAAkB,CAErB,UAKD,cAAe,CACf,WAAY,CACZ,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CALtB,aAQQ,WAAY,CACZ,WAAY,CACZ,iBAAkB,CAV1B,iBAcQ,YAAa,CAChB,cAID,eAAgB,CAChB,eAAgB,CACnB,QAGG,WAAY,CADhB,cAKQ,kBAAmB,CACnB,cAAe,CANvB,cAUQ,eAAgB,CAChB,gBAAiB,CACjB,cAAe,CAZvB,kBAeY,eAAgB,CAf5B,gBAmBY,cAAe,CAnB3B,iBAwBQ,gBAAiB,CAxBzB,iBA4BQ,WAAY,CA5BpB,gBAgCQ,cAAe,CACf,cAAe,CACf,cAAe,CAlCvB,kBAsCQ,iBAAkB,CAClB,cAAe,CAvCvB,qBA8CQ,cAAe,CACf,UAAW,CACX,WAAY,CAhDpB,2BAmDY,cAAe,CAGf,+BAAgC,CAtD5C,6BA2DY,aAAc,CACd,cAAe,CACf,iBAAkB,CAClB,OAAQ,CACR,SAAU,CA/DtB,2BAmEY,aAAc,CACd,cAAe,CACf,iBAAkB,CAClB,UAAW,CACX,QAAS,CAvErB,eA8EQ,WAAY,CA9EpB,iBAkFQ,WAAY,CAlFpB,qBAuFQ,YAAa,CACb,WAAY,CAxFpB,cA6FQ,WAAY,CACf,CAKT,qCACI,QACI,WAAY,CACf,gBAGG,iBAAkB,CAClB,YAAa,CACb,sCAAuC,CACvC,mCAAoC,CACpC,YAAa,CACb,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACT,+BAAgC,CATpC,yBAaQ,4BAA6B,CAC7B,YAAa,CACb,iBAAkB,CAClB,kBAAmB,CACnB,sBAAuB,CACvB,+CAAgD,CAChD,cAAe,CAnBvB,iCAsBY,aAAc,CACd,iBAAkB,CAClB,OAAQ,CACR,QAAS,CAzBrB,+BA8BY,iBAAkB,CAErB,UAML,cAAe,CACf,WAAY,CACZ,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CALtB,aAQQ,WAAY,CACZ,WAAY,CACZ,iBAAkB,CAV1B,iBAcQ,YAAa,CAChB,CAIT,qCACI,KACI,cAAe,CACf,QAAS,CACT,SAAU,CAGb,QAGG,WAAY,CAEf,QAGG,eAAgB,CAChB,eAAgB,CAChB,YAAa,CAChB,cAGG,eAAgB,CAChB,eAAgB,CAFpB,4BAMQ,6BAA8B,CACjC,gBAMD,iBAAkB,CAErB,UAMG,cAAe,CACf,WAAY,CACZ,WAAY,CACZ,gBAAiB,CAEpB,aAGG,cAAe,CACf,WAAY,CACZ,UAAW,CACd",sourcesContent:["$color-one: #cdcdcd;\r\n$color-two: #a7abb0;\r\n$color-three: rgb(164, 168, 206);\r\n\r\nbody {\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n    font-size: 18px;\r\n\r\n\r\n}\r\n\r\n.loader {\r\n    margin: auto;\r\n    width: 650px;\r\n    height: 900px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: $color-one;\r\n}\r\n\r\n.container {\r\n    background-color: #afb0af;\r\n    width: 500px;\r\n    margin: auto;\r\n    padding: 20px;\r\n}\r\n\r\n\r\n.navContainer {\r\n    background-color: #84867b;\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: auto;\r\n    max-width: 950px;\r\n    min-width: 950px;\r\n    justify-content: space-around;\r\n\r\n    .linker {\r\n        color: $color-one;\r\n        text-decoration: none;\r\n        font-weight: bold;\r\n\r\n        &:hover {\r\n            font-weight: bold;\r\n            color: #fdc714;\r\n            text-shadow: 2px 2px 7px black;\r\n        }\r\n    }\r\n}\r\n\r\n.spectral {\r\n    height: 40px;\r\n}\r\n\r\n\r\n.fizika {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: auto;\r\n   background-color: #f4f2eb;\r\n    width: 950px;\r\n\r\n    .head {\r\n        padding-left: 300px;\r\n        text-align: center;\r\n    }\r\n\r\n    .warp {\r\n        padding: 2px 15px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        font-size: 22px;\r\n\r\n        div {\r\n            padding: 10px 0px;\r\n        }\r\n\r\n        p {\r\n            font-size: 18px;\r\n        }\r\n    }\r\n\r\n    .atomDet {\r\n        padding: 3px 20px;\r\n    }\r\n\r\n    .summary {\r\n        width: 890px;\r\n    }\r\n\r\n    .nameAtom {\r\n        padding-top: 15px;\r\n   \r\n        font-size: 26px;\r\n        width: 800px;\r\n        padding-left: 35px;\r\n\r\n        &:hover {\r\n            cursor: pointer;\r\n            color: #fc9700;\r\n            text-shadow: 1px 1px 2px black;\r\n        }\r\n    }\r\n\r\n    .symbol {\r\n        text-align: center;\r\n        width: 90px;\r\n        height: auto;\r\n        background-color: #fdfdfd;\r\n        border: 1px solid #100e42;\r\n\r\n        border-radius: 7px;\r\n        font-size: 52px;\r\n        color: #070818;\r\n        font-family: 'Arial Narrow Bold', sans-serif;\r\n    }\r\n\r\n    .symbolClick {\r\n        display: flex;\r\n        position: relative;\r\n        justify-content: center;\r\n        align-items: center;\r\n        color: #070818;\r\n        border: 1px solid #070818;\r\n        background-color: #ffffff;\r\n        border-radius: 7px;\r\n        font-size: 52px;\r\n        width: 100px;\r\n        height: 100px;\r\n\r\n        &:hover {\r\n            cursor: pointer;\r\n\r\n\r\n            text-shadow: 1px 1px 2px rgb(254, 155, 48);\r\n\r\n        }\r\n\r\n        .number {\r\n            color: #000000;\r\n            font-size: 18px;\r\n            position: absolute;\r\n            top: 5px;\r\n            right: 5px;\r\n        }\r\n\r\n        .name {\r\n            color: #000000;\r\n            font-size: 14px;\r\n            position: absolute;\r\n            bottom: 5px;\r\n            left: 5px;\r\n        }\r\n    }\r\n\r\n\r\n    .spImg {\r\n        height: 100px;\r\n    }\r\n\r\n\r\n\r\n    .imgHold {\r\n        width: 930px;\r\n\r\n\r\n\r\n    }\r\n\r\n    .atomicMass {\r\n        width: 200px;\r\n    }\r\n\r\n\r\n\r\n    model-viewer {\r\n        margin: auto;\r\n        cursor: grab;\r\n        display: flex;\r\n        height: 700px;\r\n        width: 925px;\r\n        border-color: #fd4a14;\r\n        overflow: hidden;\r\n        position: relative;\r\n        user-select: none;\r\n    }\r\n\r\n    .span {\r\n        width: 925px;\r\n        height: 2px;\r\n        border-bottom: solid 2px #828c82;\r\n    }\r\n}\r\n\r\n.view-button {\r\n    background-color: transparent;\r\n    border-color: transparent;\r\n\r\n}\r\n\r\n\r\n\r\n.back-to-top {\r\n    position: fixed;\r\n    bottom: 120px;\r\n    right: 300px;\r\n    font-size: 55px;\r\n    color: rgb(9, 14, 67);\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n    &:hover {\r\n\r\n        color: rgb(119, 119, 119);\r\n\r\n\r\n        transform: scale(1.2, 1.2);\r\n        z-index: 1;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n.periodic-table {\r\n    margin-top: 380px;\r\n    display: grid;\r\n    grid-template-columns: repeat(18, 64px);\r\n    grid-template-rows: repeat(10, 64px);\r\n    grid-gap: 4px;\r\n    position: absolute;\r\n\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.element {\r\n\r\n    border: 1px solid #aaa;\r\n    display: flex;\r\n    position: relative;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-family: Tahoma, Geneva, Verdana, sans-serif;\r\n    font-size: 34px;\r\n    cursor: pointer;\r\n\r\n    .number {\r\n        font-size: 12px;\r\n        position: absolute;\r\n        top: 3px;\r\n        right: 3px;\r\n    }\r\n\r\n    .name {\r\n        font-size: 9px;\r\n        position: absolute;\r\n        bottom: 3px;\r\n        left: 3px;\r\n    }\r\n}\r\n\r\n.element:hover {\r\n    transform: scale(1.4, 1.4);\r\n    z-index: 1;\r\n}\r\n\r\n.category {\r\n    font-size: 20px;\r\n    width: 1200px;\r\n    margin: auto;\r\n    margin-top: 750px;\r\n    text-align: center;\r\n\r\n    td {\r\n        width: 400px;\r\n        height: 20px;\r\n        border-radius: 6px;\r\n    }\r\n\r\n    .space {\r\n        height: 500px;\r\n    }\r\n}\r\n\r\n\r\n@media screen and (max-width: 1400px) {\r\n    .back-to-top {\r\n        font-size: 45px;\r\n        bottom: 20px;\r\n        right: 200px;\r\n    }\r\n\r\n}\r\n\r\n@media screen and (max-width: 1050px) {\r\n    .back-to-top {\r\n        font-size: 38px;\r\n        bottom: 20px;\r\n        right: 50px;\r\n    }\r\n\r\n}\r\n\r\n@media screen and (max-width: 900px) {\r\n    .navContainer {\r\n        max-width: 800px;\r\n        min-width: 800px;\r\n\r\n\r\n        margin: auto;\r\n\r\n    }\r\n\r\n    .periodic-table {\r\n        margin-top: 240px;\r\n        display: grid;\r\n        grid-template-columns: repeat(18, 36px);\r\n        grid-template-rows: repeat(10, 47px);\r\n        grid-gap: 3px;\r\n        position: absolute;\r\n\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n    }\r\n\r\n    .element {\r\n        top: 25px;\r\n        font-size: 22px;\r\n\r\n        .number {\r\n            font-size: 10px;\r\n            top: 0px;\r\n            right: 1px;\r\n        }\r\n\r\n        .name {\r\n\r\n            color: transparent;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    .fizika {\r\n        width: 800px;\r\n\r\n        .imgHold {\r\n            width: 790px;\r\n        }\r\n\r\n        .summary {\r\n            width: 760px;\r\n        }\r\n\r\n        model-viewer {\r\n\r\n            height: 500px;\r\n            width: 660px;\r\n\r\n        }\r\n\r\n        .span {\r\n            width: 800px;\r\n        }\r\n\r\n    }\r\n\r\n    .elements {\r\n        margin-top: 5px;\r\n    }\r\n\r\n    .category {\r\n        font-size: 16px;\r\n        width: 660px;\r\n        margin: auto;\r\n        margin-top: 530px;\r\n        text-align: center;\r\n\r\n        td {\r\n            height: 20px;\r\n            width: 220px;\r\n            border-radius: 6px;\r\n        }\r\n\r\n        .space {\r\n            height: 900px;\r\n        }\r\n    }\r\n\r\n    .back-to-top {\r\n        font-size: 35px;\r\n        bottom: 60px;\r\n        right: 30px;\r\n    }\r\n}\r\n@media screen and (max-width: 750px) {\r\n    .navContainer {\r\n        max-width: 750px;\r\n        min-width: 750px;\r\n\r\n\r\n        margin: auto;\r\n\r\n    }\r\n    .category {\r\n        width: 600px;\r\n    }\r\n    .fizika {\r\n        width: 750px;\r\n        .imgHold {\r\n            width: 730px;\r\n        }\r\n\r\n        .summary {\r\n            width: 730px;\r\n        }\r\n        model-viewer {\r\n\r\n            height: 500px;\r\n            width: 680px;\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 670px) {\r\n\r\n \r\n\r\n    .periodic-table {\r\n\r\n        margin-top: 230px;\r\n        display: grid;\r\n        grid-template-columns: repeat(18, 32px);\r\n        grid-template-rows: repeat(10, 34px);\r\n    }\r\n    .element {\r\n        top: 25px;\r\n        font-size: 18px;\r\n\r\n        .number {\r\n            font-size: 8px;\r\n            top: 0px;\r\n            right: 1px;\r\n        }\r\n\r\n        .name {\r\n\r\n            color: transparent;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    .category {\r\n        font-size: 14px;\r\n        width: 600px;\r\n        margin: auto;\r\n        margin-top: 520px;\r\n        text-align: center;\r\n\r\n        td {\r\n            height: 40px;\r\n            width: 200px;\r\n            border-radius: 6px;\r\n        }\r\n\r\n        .space {\r\n            height: 900px;\r\n        }\r\n    }\r\n\r\n    .navContainer {\r\n        max-width: 600px;\r\n        min-width: 600px;\r\n    }\r\n\r\n    .fizika {\r\n        width: 600px;\r\n\r\n        // padding-left: 10px;\r\n        .head {\r\n            padding-left: 100px;\r\n            font-size: 26px;\r\n        }\r\n\r\n        .warp {\r\n            max-width: 358px;\r\n            padding: 3px 10px;\r\n            font-size: 16px;\r\n\r\n            div {\r\n                padding: 5px 0px;\r\n            }\r\n\r\n            p {\r\n                font-size: 12px;\r\n            }\r\n        }\r\n\r\n        .atomDet {\r\n            padding: 2px 12px;\r\n        }\r\n\r\n        .summary {\r\n            width: 340px;\r\n        }\r\n\r\n        .symbol {\r\n            max-width: 70px;\r\n            min-width: 70px;\r\n            font-size: 32px;\r\n        }\r\n\r\n        .nameAtom {\r\n            padding-left: 15px;\r\n            font-size: 25px;\r\n        }\r\n\r\n        .symbolClick {\r\n\r\n\r\n\r\n            font-size: 42px;\r\n            width: 80px;\r\n            height: 80px;\r\n\r\n            &:hover {\r\n                cursor: pointer;\r\n\r\n\r\n                text-shadow: 1px 1px 3px #f3b85f;\r\n\r\n            }\r\n\r\n            .number {\r\n                color: #000000;\r\n                font-size: 16px;\r\n                position: absolute;\r\n                top: 5px;\r\n                right: 5px;\r\n            }\r\n\r\n            .name {\r\n                color: #000000;\r\n                font-size: 11px;\r\n                position: absolute;\r\n                bottom: 5px;\r\n                left: 5px;\r\n            }\r\n        }\r\n\r\n\r\n        .spImg {\r\n            // width: 70px;\r\n            height: 60px;\r\n        }\r\n\r\n        .imgHold {\r\n            width: 343px;\r\n        }\r\n\r\n        model-viewer {\r\n\r\n            height: 300px;\r\n            width: 343px;\r\n\r\n        }\r\n\r\n        .span {\r\n            width: 343px;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@media screen and (max-width: 430px) {\r\n    .fizika {\r\n        width: 400px;\r\n    }\r\n\r\n    .periodic-table {\r\n        margin-top: -200px;\r\n        display: grid;\r\n        grid-template-columns: repeat(18, 18px);\r\n        grid-template-rows: repeat(10, 20px);\r\n        grid-gap: 1px;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n\r\n        .element {\r\n\r\n            border: 1px solid transparent;\r\n            display: flex;\r\n            position: relative;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-family: Tahoma, Geneva, Verdana, sans-serif;\r\n            font-size: 12px;\r\n\r\n            .number {\r\n                font-size: 3px;\r\n                position: absolute;\r\n                top: 0px;\r\n                left: 9px;\r\n            }\r\n\r\n            .name {\r\n\r\n                color: transparent;\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    .category {\r\n        font-size: 14px;\r\n        width: 345px;\r\n        margin: auto;\r\n        margin-top: 280px;\r\n        text-align: center;\r\n\r\n        td {\r\n            height: 50px;\r\n            width: 115px;\r\n            border-radius: 6px;\r\n        }\r\n\r\n        .space {\r\n            height: 900px;\r\n        }\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 390px) {\r\n    body {\r\n        font-size: 16px;\r\n        margin: 0;\r\n        padding: 0;\r\n\r\n\r\n    }\r\n\r\n    .fizika {\r\n        width: 358px;\r\n\r\n    }\r\n\r\n    .loader {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n        height: 700px;\r\n    }\r\n\r\n    .navContainer {\r\n        max-width: 358px;\r\n        min-width: 358px;\r\n\r\n\r\n        .linker:hover {\r\n            text-shadow: 1px 1px 4px black;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    .periodic-table {\r\n        margin-top: -150px;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    .category {\r\n        font-size: 14px;\r\n        width: 345px;\r\n        margin: auto;\r\n        margin-top: 300px;\r\n\r\n    }\r\n\r\n    .back-to-top {\r\n        font-size: 32px;\r\n        bottom: 60px;\r\n        right: 20px;\r\n    }\r\n}"],sourceRoot:""}]);const l=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},679:(e,t,n)=>{"use strict";var r=n(296),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?a:l[e.$$typeof]||i}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var c=Object.defineProperty,u=Object.getOwnPropertyNames,m=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=d(n);i&&i!==h&&e(t,i,r)}var a=u(n);m&&(a=a.concat(m(n)));for(var l=s(t),f=s(n),g=0;g<a.length;++g){var b=a[g];if(!(o[b]||r&&r[b]||f&&f[b]||l&&l[b])){var y=p(n,b);try{c(t,b,y)}catch(e){}}}}return t}},103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,m=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,f=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,b=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,_=n?Symbol.for("react.responder"):60118,v=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case m:case o:case l:case a:case d:return e;default:switch(e=e&&e.$$typeof){case c:case p:case g:case f:case s:return e;default:return t}}case i:return t}}}function k(e){return w(e)===m}t.AsyncMode=u,t.ConcurrentMode=m,t.ContextConsumer=c,t.ContextProvider=s,t.Element=r,t.ForwardRef=p,t.Fragment=o,t.Lazy=g,t.Memo=f,t.Portal=i,t.Profiler=l,t.StrictMode=a,t.Suspense=d,t.isAsyncMode=function(e){return k(e)||w(e)===u},t.isConcurrentMode=k,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===o},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===f},t.isPortal=function(e){return w(e)===i},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===a},t.isSuspense=function(e){return w(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===m||e===l||e===a||e===d||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===f||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p||e.$$typeof===y||e.$$typeof===_||e.$$typeof===v||e.$$typeof===b)},t.typeOf=w},296:(e,t,n)=>{"use strict";e.exports=n(103)},448:(e,t,n)=>{"use strict";var r=n(294),i=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,l={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)a.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),m=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d={},h={};function f(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new f(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new f(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new f(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new f(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new f(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new f(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new f(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new f(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new f(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function _(e,t,n,r){var i=g.hasOwnProperty(t)?g[t]:null;(null!==i?0!==i.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!m.call(h,e)||!m.call(d,e)&&(p.test(e)?h[e]=!0:(d[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,y);g[t]=new f(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,y);g[t]=new f(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,y);g[t]=new f(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new f(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new f("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new f(e,1,!1,e.toLowerCase(),null,!0,!0)}));var v=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),k=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),A=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),E=Symbol.for("react.context"),B=Symbol.for("react.forward_ref"),z=Symbol.for("react.suspense"),O=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),R=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var P=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var j,L=Object.assign;function M(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var F=!1;function D(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,l=o.length-1;1<=a&&0<=l&&i[a]!==o[l];)l--;for(;1<=a&&0<=l;a--,l--)if(i[a]!==o[l]){if(1!==a||1!==l)do{if(a--,0>--l||i[a]!==o[l]){var s="\n"+i[a].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=a&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function W(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return D(e.type,!1);case 11:return D(e.type.render,!1);case 1:return D(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case k:return"Portal";case A:return"Profiler";case C:return"StrictMode";case z:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case E:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case B:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case R:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function V(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return L({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function J(e,t){X(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return L({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function oe(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,me=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var de={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function fe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||de.hasOwnProperty(e)&&de[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=fe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(de).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),de[t]=de[e]}))}));var be=L({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(be[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ve=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,xe=null,Ce=null;function Ae(e){if(e=_i(e)){if("function"!=typeof ke)throw Error(o(280));var t=e.stateNode;t&&(t=wi(t),ke(e.stateNode,e.type,t))}}function Se(e){xe?Ce?Ce.push(e):Ce=[e]:xe=e}function Ee(){if(xe){var e=xe,t=Ce;if(Ce=xe=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}function Be(e,t){return e(t)}function ze(){}var Oe=!1;function Te(e,t,n){if(Oe)return e(t,n);Oe=!0;try{return Be(e,t,n)}finally{Oe=!1,(null!==xe||null!==Ce)&&(ze(),Ee())}}function Re(e,t){var n=e.stateNode;if(null===n)return null;var r=wi(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Pe=!1;if(u)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){Pe=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(ue){Pe=!1}function Ie(e,t,n,r,i,o,a,l,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var je=!1,Le=null,Me=!1,Fe=null,De={onError:function(e){je=!0,Le=e}};function We(e,t,n,r,i,o,a,l,s){je=!1,Le=null,Ie.apply(De,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(Ue(e)!==e)throw Error(o(188))}function Ye(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return $e(i),e;if(a===r)return $e(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var l=!1,s=i.child;s;){if(s===n){l=!0,n=i,r=a;break}if(s===r){l=!0,r=i,n=a;break}s=s.sibling}if(!l){for(s=a.child;s;){if(s===n){l=!0,n=a,r=i;break}if(s===r){l=!0,r=a,n=i;break}s=s.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var Ve=i.unstable_scheduleCallback,Qe=i.unstable_cancelCallback,qe=i.unstable_shouldYield,Ke=i.unstable_requestPaint,Xe=i.unstable_now,Je=i.unstable_getCurrentPriorityLevel,Ze=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,nt=i.unstable_LowPriority,rt=i.unstable_IdlePriority,it=null,ot=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/st|0)|0},lt=Math.log,st=Math.LN2,ct=64,ut=4194304;function mt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,a=268435455&n;if(0!==a){var l=a&~i;0!==l?r=mt(l):0!=(o&=a)&&(r=mt(o))}else 0!=(a=n&~i)?r=mt(a):0!==o&&(r=mt(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&i)&&((i=r&-r)>=(o=t&-t)||16===i&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-at(t)),r|=e[n],t&=~i;return r}function dt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ft(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function bt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var _t=0;function vt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,kt,xt,Ct,At,St=!1,Et=[],Bt=null,zt=null,Ot=null,Tt=new Map,Rt=new Map,Pt=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function It(e,t){switch(e){case"focusin":case"focusout":Bt=null;break;case"dragenter":case"dragleave":zt=null;break;case"mouseover":case"mouseout":Ot=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function jt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},null!==t&&null!==(t=_i(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Lt(e){var t=yi(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void At(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=_i(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);ve=r,n.target.dispatchEvent(r),ve=null,t.shift()}return!0}function Ft(e,t,n){Mt(e)&&n.delete(t)}function Dt(){St=!1,null!==Bt&&Mt(Bt)&&(Bt=null),null!==zt&&Mt(zt)&&(zt=null),null!==Ot&&Mt(Ot)&&(Ot=null),Tt.forEach(Ft),Rt.forEach(Ft)}function Wt(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Dt)))}function Ut(e){function t(t){return Wt(t,e)}if(0<Et.length){Wt(Et[0],e);for(var n=1;n<Et.length;n++){var r=Et[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Bt&&Wt(Bt,e),null!==zt&&Wt(zt,e),null!==Ot&&Wt(Ot,e),Tt.forEach(t),Rt.forEach(t),n=0;n<Pt.length;n++)(r=Pt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Pt.length&&null===(n=Pt[0]).blockedOn;)Lt(n),null===n.blockedOn&&Pt.shift()}var Ht=v.ReactCurrentBatchConfig,$t=!0;function Yt(e,t,n,r){var i=_t,o=Ht.transition;Ht.transition=null;try{_t=1,Vt(e,t,n,r)}finally{_t=i,Ht.transition=o}}function Gt(e,t,n,r){var i=_t,o=Ht.transition;Ht.transition=null;try{_t=4,Vt(e,t,n,r)}finally{_t=i,Ht.transition=o}}function Vt(e,t,n,r){if($t){var i=qt(e,t,n,r);if(null===i)$r(e,t,r,Qt,n),It(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return Bt=jt(Bt,e,t,n,r,i),!0;case"dragenter":return zt=jt(zt,e,t,n,r,i),!0;case"mouseover":return Ot=jt(Ot,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Tt.set(o,jt(Tt.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,Rt.set(o,jt(Rt.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(It(e,r),4&t&&-1<Nt.indexOf(e)){for(;null!==i;){var o=_i(i);if(null!==o&&wt(o),null===(o=qt(e,t,n,r))&&$r(e,t,r,Qt,n),o===i)break;i=o}null!==i&&r.stopPropagation()}else $r(e,t,r,null,n)}}var Qt=null;function qt(e,t,n,r){if(Qt=null,null!==(e=yi(e=we(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,i="value"in Xt?Xt.value:Xt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Zt=i.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return L(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,sn,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=on(cn),mn=L({},cn,{view:0,detail:0}),pn=on(mn),dn=L({},mn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:An,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(an=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=an=0,sn=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(dn),fn=on(L({},dn,{dataTransfer:0})),gn=on(L({},mn,{relatedTarget:0})),bn=on(L({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=L({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),_n=on(yn),vn=on(L({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function An(){return Cn}var Sn=L({},mn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:An,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),En=on(Sn),Bn=on(L({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),zn=on(L({},mn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:An})),On=on(L({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=L({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=on(Tn),Pn=[9,13,27,32],Nn=u&&"CompositionEvent"in window,In=null;u&&"documentMode"in document&&(In=document.documentMode);var jn=u&&"TextEvent"in window&&!In,Ln=u&&(!Nn||In&&8<In&&11>=In),Mn=String.fromCharCode(32),Fn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==Pn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Wn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Yn(e,t,n,r){Se(r),0<(t=Gr(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Gn=null,Vn=null;function Qn(e){Mr(e,0)}function qn(e){if(V(vi(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(u){var Jn;if(u){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Gn&&(Gn.detachEvent("onpropertychange",nr),Vn=Gn=null)}function nr(e){if("value"===e.propertyName&&qn(Vn)){var t=[];Yn(t,Vn,e,we(e)),Te(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Vn=n,(Gn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Vn)}function or(e,t){if("click"===e)return qn(t)}function ar(e,t){if("input"===e||"change"===e)return qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!m.call(t,i)||!lr(e[i],t[i]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function mr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?mr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&mr(n.ownerDocument.documentElement,n)){if(null!==r&&dr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=void 0===r.end?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=ur(n,o);var a=ur(n,r);i&&a&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var fr=u&&"documentMode"in document&&11>=document.documentMode,gr=null,br=null,yr=null,_r=!1;function vr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;_r||null==gr||gr!==Q(r)||(r="selectionStart"in(r=gr)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&sr(yr,r)||(yr=r,0<(r=Gr(br,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},xr={},Cr={};function Ar(e){if(xr[e])return xr[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return xr[e]=n[t];return e}u&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Sr=Ar("animationend"),Er=Ar("animationiteration"),Br=Ar("animationstart"),zr=Ar("transitionend"),Or=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Rr(e,t){Or.set(e,t),s(t,[e])}for(var Pr=0;Pr<Tr.length;Pr++){var Nr=Tr[Pr];Rr(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Rr(Sr,"onAnimationEnd"),Rr(Er,"onAnimationIteration"),Rr(Br,"onAnimationStart"),Rr("dblclick","onDoubleClick"),Rr("focusin","onFocus"),Rr("focusout","onBlur"),Rr(zr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),jr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Lr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,a,l,s,c){if(We.apply(this,arguments),je){if(!je)throw Error(o(198));var u=Le;je=!1,Le=null,Me||(Me=!0,Fe=u)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],s=l.instance,c=l.currentTarget;if(l=l.listener,s!==o&&i.isPropagationStopped())break e;Lr(i,l,c),o=s}else for(a=0;a<r.length;a++){if(s=(l=r[a]).instance,c=l.currentTarget,l=l.listener,s!==o&&i.isPropagationStopped())break e;Lr(i,l,c),o=s}}}if(Me)throw e=Fe,Me=!1,Fe=null,e}function Fr(e,t){var n=t[fi];void 0===n&&(n=t[fi]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Dr(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var Wr="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[Wr]){e[Wr]=!0,a.forEach((function(t){"selectionchange"!==t&&(jr.has(t)||Dr(t,!1,e),Dr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Wr]||(t[Wr]=!0,Dr("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Kt(t)){case 1:var i=Yt;break;case 4:i=Gt;break;default:i=Vt}n=i.bind(null,t,n,e),i=void 0,!Pe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,i){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===i||8===l.nodeType&&l.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var s=a.tag;if((3===s||4===s)&&((s=a.stateNode.containerInfo)===i||8===s.nodeType&&s.parentNode===i))return;a=a.return}for(;null!==l;){if(null===(a=yi(l)))return;if(5===(s=a.tag)||6===s){r=o=a;continue e}l=l.parentNode}}r=r.return}Te((function(){var r=o,i=we(n),a=[];e:{var l=Or.get(e);if(void 0!==l){var s=un,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=En;break;case"focusin":c="focus",s=gn;break;case"focusout":c="blur",s=gn;break;case"beforeblur":case"afterblur":s=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=fn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=zn;break;case Sr:case Er:case Br:s=bn;break;case zr:s=On;break;case"scroll":s=pn;break;case"wheel":s=Rn;break;case"copy":case"cut":case"paste":s=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Bn}var u=0!=(4&t),m=!u&&"scroll"===e,p=u?null!==l?l+"Capture":null:l;u=[];for(var d,h=r;null!==h;){var f=(d=h).stateNode;if(5===d.tag&&null!==f&&(d=f,null!==p&&null!=(f=Re(h,p))&&u.push(Yr(h,f,d))),m)break;h=h.return}0<u.length&&(l=new s(l,c,null,n,i),a.push({event:l,listeners:u}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===ve||!(c=n.relatedTarget||n.fromElement)||!yi(c)&&!c[hi])&&(s||l)&&(l=i.window===i?i:(l=i.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?yi(c):null)&&(c!==(m=Ue(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(s=null,c=r),s!==c)){if(u=hn,f="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(u=Bn,f="onPointerLeave",p="onPointerEnter",h="pointer"),m=null==s?l:vi(s),d=null==c?l:vi(c),(l=new u(f,h+"leave",s,n,i)).target=m,l.relatedTarget=d,f=null,yi(i)===r&&((u=new u(p,h+"enter",c,n,i)).target=d,u.relatedTarget=m,f=u),m=f,s&&c)e:{for(p=c,h=0,d=u=s;d;d=Vr(d))h++;for(d=0,f=p;f;f=Vr(f))d++;for(;0<h-d;)u=Vr(u),h--;for(;0<d-h;)p=Vr(p),d--;for(;h--;){if(u===p||null!==p&&u===p.alternate)break e;u=Vr(u),p=Vr(p)}u=null}else u=null;null!==s&&Qr(a,l,s,u,!1),null!==c&&null!==m&&Qr(a,m,c,u,!0)}if("select"===(s=(l=r?vi(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=Kn;else if($n(l))if(Xn)g=ar;else{g=ir;var b=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Yn(a,g,n,i):(b&&b(e,l,r),"focusout"===e&&(b=l._wrapperState)&&b.controlled&&"number"===l.type&&ee(l,"number",l.value)),b=r?vi(r):window,e){case"focusin":($n(b)||"true"===b.contentEditable)&&(gr=b,br=r,yr=null);break;case"focusout":yr=br=gr=null;break;case"mousedown":_r=!0;break;case"contextmenu":case"mouseup":case"dragend":_r=!1,vr(a,n,i);break;case"selectionchange":if(fr)break;case"keydown":case"keyup":vr(a,n,i)}var y;if(Nn)e:{switch(e){case"compositionstart":var _="onCompositionStart";break e;case"compositionend":_="onCompositionEnd";break e;case"compositionupdate":_="onCompositionUpdate";break e}_=void 0}else Un?Dn(e,n)&&(_="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(_="onCompositionStart");_&&(Ln&&"ko"!==n.locale&&(Un||"onCompositionStart"!==_?"onCompositionEnd"===_&&Un&&(y=en()):(Jt="value"in(Xt=i)?Xt.value:Xt.textContent,Un=!0)),0<(b=Gr(r,_)).length&&(_=new vn(_,e,null,n,i),a.push({event:_,listeners:b}),(y||null!==(y=Wn(n)))&&(_.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return Wn(t);case"keypress":return 32!==t.which?null:(Fn=!0,Mn);case"textInput":return(e=t.data)===Mn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Nn&&Dn(e,t)?(e=en(),Zt=Jt=Xt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Gr(r,"onBeforeInput")).length&&(i=new vn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=y)}Mr(a,t)}))}function Yr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Gr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Re(e,n))&&r.unshift(Yr(e,o,i)),null!=(o=Re(e,t))&&r.push(Yr(e,o,i))),e=e.return}return r}function Vr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var l=n,s=l.alternate,c=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==c&&(l=c,i?null!=(s=Re(n,o))&&a.unshift(Yr(n,s,l)):i||null!=(s=Re(n,o))&&a.push(Yr(n,s,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var qr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Kr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Zr(){}var ei=null,ti=null;function ni(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,oi="function"==typeof Promise?Promise:void 0,ai="function"==typeof queueMicrotask?queueMicrotask:void 0!==oi?function(e){return oi.resolve(null).then(e).catch(li)}:ri;function li(e){setTimeout((function(){throw e}))}function si(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);Ut(t)}function ci(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ui(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var mi=Math.random().toString(36).slice(2),pi="__reactFiber$"+mi,di="__reactProps$"+mi,hi="__reactContainer$"+mi,fi="__reactEvents$"+mi,gi="__reactListeners$"+mi,bi="__reactHandles$"+mi;function yi(e){var t=e[pi];if(t)return t;for(var n=e.parentNode;n;){if(t=n[hi]||n[pi]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ui(e);null!==e;){if(n=e[pi])return n;e=ui(e)}return t}n=(e=n).parentNode}return null}function _i(e){return!(e=e[pi]||e[hi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function vi(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function wi(e){return e[di]||null}var ki=[],xi=-1;function Ci(e){return{current:e}}function Ai(e){0>xi||(e.current=ki[xi],ki[xi]=null,xi--)}function Si(e,t){xi++,ki[xi]=e.current,e.current=t}var Ei={},Bi=Ci(Ei),zi=Ci(!1),Oi=Ei;function Ti(e,t){var n=e.type.contextTypes;if(!n)return Ei;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ri(e){return null!=e.childContextTypes}function Pi(){Ai(zi),Ai(Bi)}function Ni(e,t,n){if(Bi.current!==Ei)throw Error(o(168));Si(Bi,t),Si(zi,n)}function Ii(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in t))throw Error(o(108,H(e)||"Unknown",i));return L({},n,r)}function ji(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ei,Oi=Bi.current,Si(Bi,e),Si(zi,zi.current),!0}function Li(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Ii(e,t,Oi),r.__reactInternalMemoizedMergedChildContext=e,Ai(zi),Ai(Bi),Si(Bi,e)):Ai(zi),Si(zi,n)}var Mi=null,Fi=!1,Di=!1;function Wi(e){null===Mi?Mi=[e]:Mi.push(e)}function Ui(){if(!Di&&null!==Mi){Di=!0;var e=0,t=_t;try{var n=Mi;for(_t=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Mi=null,Fi=!1}catch(t){throw null!==Mi&&(Mi=Mi.slice(e+1)),Ve(Ze,Ui),t}finally{_t=t,Di=!1}}return null}var Hi=[],$i=0,Yi=null,Gi=0,Vi=[],Qi=0,qi=null,Ki=1,Xi="";function Ji(e,t){Hi[$i++]=Gi,Hi[$i++]=Yi,Yi=e,Gi=t}function Zi(e,t,n){Vi[Qi++]=Ki,Vi[Qi++]=Xi,Vi[Qi++]=qi,qi=e;var r=Ki;e=Xi;var i=32-at(r)-1;r&=~(1<<i),n+=1;var o=32-at(t)+i;if(30<o){var a=i-i%5;o=(r&(1<<a)-1).toString(32),r>>=a,i-=a,Ki=1<<32-at(t)+i|n<<i|r,Xi=o+e}else Ki=1<<o|n<<i|r,Xi=e}function eo(e){null!==e.return&&(Ji(e,1),Zi(e,1,0))}function to(e){for(;e===Yi;)Yi=Hi[--$i],Hi[$i]=null,Gi=Hi[--$i],Hi[$i]=null;for(;e===qi;)qi=Vi[--Qi],Vi[Qi]=null,Xi=Vi[--Qi],Vi[Qi]=null,Ki=Vi[--Qi],Vi[Qi]=null}var no=null,ro=null,io=!1,oo=null;function ao(e,t){var n=Rc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ci(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==qi?{id:Ki,overflow:Xi}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Rc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function so(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function co(e){if(io){var t=ro;if(t){var n=t;if(!lo(e,t)){if(so(e))throw Error(o(418));t=ci(n.nextSibling);var r=no;t&&lo(e,t)?ao(r,n):(e.flags=-4097&e.flags|2,io=!1,no=e)}}else{if(so(e))throw Error(o(418));e.flags=-4097&e.flags|2,io=!1,no=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function mo(e){if(e!==no)return!1;if(!io)return uo(e),io=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ni(e.type,e.memoizedProps)),t&&(t=ro)){if(so(e))throw po(),Error(o(418));for(;t;)ao(e,t),t=ci(t.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ci(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ci(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=ci(e.nextSibling)}function ho(){ro=no=null,io=!1}function fo(e){null===oo?oo=[e]:oo.push(e)}var go=v.ReactCurrentBatchConfig;function bo(e,t){if(e&&e.defaultProps){for(var n in t=L({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var yo=Ci(null),_o=null,vo=null,wo=null;function ko(){wo=vo=_o=null}function xo(e){var t=yo.current;Ai(yo),e._currentValue=t}function Co(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ao(e,t){_o=e,wo=vo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(vl=!0),e.firstContext=null)}function So(e){var t=e._currentValue;if(wo!==e)if(e={context:e,memoizedValue:t,next:null},null===vo){if(null===_o)throw Error(o(308));vo=e,_o.dependencies={lanes:0,firstContext:e}}else vo=vo.next=e;return t}var Eo=null;function Bo(e){null===Eo?Eo=[e]:Eo.push(e)}function zo(e,t,n,r){var i=t.interleaved;return null===i?(n.next=n,Bo(t)):(n.next=i.next,i.next=n),t.interleaved=n,Oo(e,r)}function Oo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var To=!1;function Ro(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Po(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function No(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Io(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&zs)){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Oo(e,n)}return null===(i=r.interleaved)?(t.next=t,Bo(r)):(t.next=i.next,i.next=t),r.interleaved=t,Oo(e,n)}function jo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Lo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Mo(e,t,n,r){var i=e.updateQueue;To=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var s=l,c=s.next;s.next=null,null===a?o=c:a.next=c,a=s;var u=e.alternate;null!==u&&(l=(u=u.updateQueue).lastBaseUpdate)!==a&&(null===l?u.firstBaseUpdate=c:l.next=c,u.lastBaseUpdate=s)}if(null!==o){var m=i.baseState;for(a=0,u=c=s=null,l=o;;){var p=l.lane,d=l.eventTime;if((r&p)===p){null!==u&&(u=u.next={eventTime:d,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,f=l;switch(p=t,d=n,f.tag){case 1:if("function"==typeof(h=f.payload)){m=h.call(d,m,p);break e}m=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=f.payload)?h.call(d,m,p):h))break e;m=L({},m,p);break e;case 2:To=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(p=i.effects)?i.effects=[l]:p.push(l))}else d={eventTime:d,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===u?(c=u=d,s=m):u=u.next=d,a|=p;if(null===(l=l.next)){if(null===(l=i.shared.pending))break;l=(p=l).next,p.next=null,i.lastBaseUpdate=p,i.shared.pending=null}}if(null===u&&(s=m),i.baseState=s,i.firstBaseUpdate=c,i.lastBaseUpdate=u,null!==(t=i.shared.interleaved)){i=t;do{a|=i.lane,i=i.next}while(i!==t)}else null===o&&(i.shared.lanes=0);Ls|=a,e.lanes=a,e.memoizedState=m}}function Fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(o(191,i));i.call(r)}}}var Do=(new r.Component).refs;function Wo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:L({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Uo={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tc(),i=nc(e),o=No(r,i);o.payload=t,null!=n&&(o.callback=n),null!==(t=Io(e,o,i))&&(rc(t,e,i,r),jo(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tc(),i=nc(e),o=No(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Io(e,o,i))&&(rc(t,e,i,r),jo(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tc(),r=nc(e),i=No(n,r);i.tag=2,null!=t&&(i.callback=t),null!==(t=Io(e,i,r))&&(rc(t,e,r,n),jo(t,e,r))}};function Ho(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(i,o))}function $o(e,t,n){var r=!1,i=Ei,o=t.contextType;return"object"==typeof o&&null!==o?o=So(o):(i=Ri(t)?Oi:Bi.current,o=(r=null!=(r=t.contextTypes))?Ti(e,i):Ei),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Uo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function Yo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Uo.enqueueReplaceState(t,t.state,null)}function Go(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Do,Ro(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=So(o):(o=Ri(t)?Oi:Bi.current,i.context=Ti(e,o)),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Wo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Uo.enqueueReplaceState(i,i.state,null),Mo(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Vo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=i.refs;t===Do&&(t=i.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Qo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function qo(e){return(0,e._init)(e._payload)}function Ko(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Nc(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Mc(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){var o=n.type;return o===x?m(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===R&&qo(o)===t.type)?((r=i(t,n.props)).ref=Vo(e,t,n),r.return=e,r):((r=Ic(n.type,n.key,n.props,null,e.mode,r)).ref=Vo(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fc(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function m(e,t,n,r,o){return null===t||7!==t.tag?((t=jc(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Mc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Ic(t.type,t.key,t.props,null,e.mode,n)).ref=Vo(e,null,t),n.return=e,n;case k:return(t=Fc(t,e.mode,n)).return=e,t;case R:return p(e,(0,t._init)(t._payload),n)}if(te(t)||I(t))return(t=jc(t,e.mode,n,null)).return=e,t;Qo(e,t)}return null}function d(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===i?c(e,t,n,r):null;case k:return n.key===i?u(e,t,n,r):null;case R:return d(e,t,(i=n._init)(n._payload),r)}if(te(n)||I(n))return null!==i?null:m(e,t,n,r,null);Qo(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case k:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case R:return h(e,t,n,(0,r._init)(r._payload),i)}if(te(r)||I(r))return m(t,e=e.get(n)||null,r,i,null);Qo(t,r)}return null}function f(i,o,l,s){for(var c=null,u=null,m=o,f=o=0,g=null;null!==m&&f<l.length;f++){m.index>f?(g=m,m=null):g=m.sibling;var b=d(i,m,l[f],s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(i,m),o=a(b,o,f),null===u?c=b:u.sibling=b,u=b,m=g}if(f===l.length)return n(i,m),io&&Ji(i,f),c;if(null===m){for(;f<l.length;f++)null!==(m=p(i,l[f],s))&&(o=a(m,o,f),null===u?c=m:u.sibling=m,u=m);return io&&Ji(i,f),c}for(m=r(i,m);f<l.length;f++)null!==(g=h(m,i,f,l[f],s))&&(e&&null!==g.alternate&&m.delete(null===g.key?f:g.key),o=a(g,o,f),null===u?c=g:u.sibling=g,u=g);return e&&m.forEach((function(e){return t(i,e)})),io&&Ji(i,f),c}function g(i,l,s,c){var u=I(s);if("function"!=typeof u)throw Error(o(150));if(null==(s=u.call(s)))throw Error(o(151));for(var m=u=null,f=l,g=l=0,b=null,y=s.next();null!==f&&!y.done;g++,y=s.next()){f.index>g?(b=f,f=null):b=f.sibling;var _=d(i,f,y.value,c);if(null===_){null===f&&(f=b);break}e&&f&&null===_.alternate&&t(i,f),l=a(_,l,g),null===m?u=_:m.sibling=_,m=_,f=b}if(y.done)return n(i,f),io&&Ji(i,g),u;if(null===f){for(;!y.done;g++,y=s.next())null!==(y=p(i,y.value,c))&&(l=a(y,l,g),null===m?u=y:m.sibling=y,m=y);return io&&Ji(i,g),u}for(f=r(i,f);!y.done;g++,y=s.next())null!==(y=h(f,i,g,y.value,c))&&(e&&null!==y.alternate&&f.delete(null===y.key?g:y.key),l=a(y,l,g),null===m?u=y:m.sibling=y,m=y);return e&&f.forEach((function(e){return t(i,e)})),io&&Ji(i,g),u}return function e(r,o,a,s){if("object"==typeof a&&null!==a&&a.type===x&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case w:e:{for(var c=a.key,u=o;null!==u;){if(u.key===c){if((c=a.type)===x){if(7===u.tag){n(r,u.sibling),(o=i(u,a.props.children)).return=r,r=o;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===R&&qo(c)===u.type){n(r,u.sibling),(o=i(u,a.props)).ref=Vo(r,u,a),o.return=r,r=o;break e}n(r,u);break}t(r,u),u=u.sibling}a.type===x?((o=jc(a.props.children,r.mode,s,a.key)).return=r,r=o):((s=Ic(a.type,a.key,a.props,null,r.mode,s)).ref=Vo(r,o,a),s.return=r,r=s)}return l(r);case k:e:{for(u=a.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(r,o.sibling),(o=i(o,a.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Fc(a,r.mode,s)).return=r,r=o}return l(r);case R:return e(r,o,(u=a._init)(a._payload),s)}if(te(a))return f(r,o,a,s);if(I(a))return g(r,o,a,s);Qo(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==o&&6===o.tag?(n(r,o.sibling),(o=i(o,a)).return=r,r=o):(n(r,o),(o=Mc(a,r.mode,s)).return=r,r=o),l(r)):n(r,o)}}var Xo=Ko(!0),Jo=Ko(!1),Zo={},ea=Ci(Zo),ta=Ci(Zo),na=Ci(Zo);function ra(e){if(e===Zo)throw Error(o(174));return e}function ia(e,t){switch(Si(na,t),Si(ta,e),Si(ea,Zo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ai(ea),Si(ea,t)}function oa(){Ai(ea),Ai(ta),Ai(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=se(t,e.type);t!==n&&(Si(ta,e),Si(ea,n))}function la(e){ta.current===e&&(Ai(ea),Ai(ta))}var sa=Ci(0);function ca(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ua=[];function ma(){for(var e=0;e<ua.length;e++)ua[e]._workInProgressVersionPrimary=null;ua.length=0}var pa=v.ReactCurrentDispatcher,da=v.ReactCurrentBatchConfig,ha=0,fa=null,ga=null,ba=null,ya=!1,_a=!1,va=0,wa=0;function ka(){throw Error(o(321))}function xa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Ca(e,t,n,r,i,a){if(ha=a,fa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,pa.current=null===e||null===e.memoizedState?ll:sl,e=n(r,i),_a){a=0;do{if(_a=!1,va=0,25<=a)throw Error(o(301));a+=1,ba=ga=null,t.updateQueue=null,pa.current=cl,e=n(r,i)}while(_a)}if(pa.current=al,t=null!==ga&&null!==ga.next,ha=0,ba=ga=fa=null,ya=!1,t)throw Error(o(300));return e}function Aa(){var e=0!==va;return va=0,e}function Sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ba?fa.memoizedState=ba=e:ba=ba.next=e,ba}function Ea(){if(null===ga){var e=fa.alternate;e=null!==e?e.memoizedState:null}else e=ga.next;var t=null===ba?fa.memoizedState:ba.next;if(null!==t)ba=t,ga=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ga=e).memoizedState,baseState:ga.baseState,baseQueue:ga.baseQueue,queue:ga.queue,next:null},null===ba?fa.memoizedState=ba=e:ba=ba.next=e}return ba}function Ba(e,t){return"function"==typeof t?t(e):t}function za(e){var t=Ea(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=ga,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var l=i.next;i.next=a.next,a.next=l}r.baseQueue=i=a,n.pending=null}if(null!==i){a=i.next,r=r.baseState;var s=l=null,c=null,u=a;do{var m=u.lane;if((ha&m)===m)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var p={lane:m,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(s=c=p,l=r):c=c.next=p,fa.lanes|=m,Ls|=m}u=u.next}while(null!==u&&u!==a);null===c?l=r:c.next=s,lr(r,t.memoizedState)||(vl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){i=e;do{a=i.lane,fa.lanes|=a,Ls|=a,i=i.next}while(i!==e)}else null===i&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Oa(e){var t=Ea(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var l=i=i.next;do{a=e(a,l.action),l=l.next}while(l!==i);lr(a,t.memoizedState)||(vl=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Ta(){}function Ra(e,t){var n=fa,r=Ea(),i=t(),a=!lr(r.memoizedState,i);if(a&&(r.memoizedState=i,vl=!0),r=r.queue,$a(Ia.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ba&&1&ba.memoizedState.tag){if(n.flags|=2048,Fa(9,Na.bind(null,n,r,i,t),void 0,null),null===Os)throw Error(o(349));0!=(30&ha)||Pa(n,t,i)}return i}function Pa(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=fa.updateQueue)?(t={lastEffect:null,stores:null},fa.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Na(e,t,n,r){t.value=n,t.getSnapshot=r,ja(t)&&La(e)}function Ia(e,t,n){return n((function(){ja(t)&&La(e)}))}function ja(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function La(e){var t=Oo(e,1);null!==t&&rc(t,e,1,-1)}function Ma(e){var t=Sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ba,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,fa,e),[t.memoizedState,e]}function Fa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=fa.updateQueue)?(t={lastEffect:null,stores:null},fa.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Da(){return Ea().memoizedState}function Wa(e,t,n,r){var i=Sa();fa.flags|=e,i.memoizedState=Fa(1|t,n,void 0,void 0===r?null:r)}function Ua(e,t,n,r){var i=Ea();r=void 0===r?null:r;var o=void 0;if(null!==ga){var a=ga.memoizedState;if(o=a.destroy,null!==r&&xa(r,a.deps))return void(i.memoizedState=Fa(t,n,o,r))}fa.flags|=e,i.memoizedState=Fa(1|t,n,o,r)}function Ha(e,t){return Wa(8390656,8,e,t)}function $a(e,t){return Ua(2048,8,e,t)}function Ya(e,t){return Ua(4,2,e,t)}function Ga(e,t){return Ua(4,4,e,t)}function Va(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Qa(e,t,n){return n=null!=n?n.concat([e]):null,Ua(4,4,Va.bind(null,t,e),n)}function qa(){}function Ka(e,t){var n=Ea();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xa(e,t){var n=Ea();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ja(e,t,n){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,vl=!0),e.memoizedState=n):(lr(n,t)||(n=ft(),fa.lanes|=n,Ls|=n,e.baseState=!0),t)}function Za(e,t){var n=_t;_t=0!==n&&4>n?n:4,e(!0);var r=da.transition;da.transition={};try{e(!1),t()}finally{_t=n,da.transition=r}}function el(){return Ea().memoizedState}function tl(e,t,n){var r=nc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?il(t,n):null!==(n=zo(e,t,n,r))&&(rc(n,e,r,tc()),ol(n,t,r))}function nl(e,t,n){var r=nc(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))il(t,i);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=o(a,n);if(i.hasEagerState=!0,i.eagerState=l,lr(l,a)){var s=t.interleaved;return null===s?(i.next=i,Bo(t)):(i.next=s.next,s.next=i),void(t.interleaved=i)}}catch(e){}null!==(n=zo(e,t,i,r))&&(rc(n,e,r,i=tc()),ol(n,t,r))}}function rl(e){var t=e.alternate;return e===fa||null!==t&&t===fa}function il(e,t){_a=ya=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ol(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var al={readContext:So,useCallback:ka,useContext:ka,useEffect:ka,useImperativeHandle:ka,useInsertionEffect:ka,useLayoutEffect:ka,useMemo:ka,useReducer:ka,useRef:ka,useState:ka,useDebugValue:ka,useDeferredValue:ka,useTransition:ka,useMutableSource:ka,useSyncExternalStore:ka,useId:ka,unstable_isNewReconciler:!1},ll={readContext:So,useCallback:function(e,t){return Sa().memoizedState=[e,void 0===t?null:t],e},useContext:So,useEffect:Ha,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Wa(4194308,4,Va.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Wa(4194308,4,e,t)},useInsertionEffect:function(e,t){return Wa(4,2,e,t)},useMemo:function(e,t){var n=Sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Sa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,fa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Sa().memoizedState=e},useState:Ma,useDebugValue:qa,useDeferredValue:function(e){return Sa().memoizedState=e},useTransition:function(){var e=Ma(!1),t=e[0];return e=Za.bind(null,e[1]),Sa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=fa,i=Sa();if(io){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Os)throw Error(o(349));0!=(30&ha)||Pa(r,t,n)}i.memoizedState=n;var a={value:n,getSnapshot:t};return i.queue=a,Ha(Ia.bind(null,r,a,e),[e]),r.flags|=2048,Fa(9,Na.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Sa(),t=Os.identifierPrefix;if(io){var n=Xi;t=":"+t+"R"+(n=(Ki&~(1<<32-at(Ki)-1)).toString(32)+n),0<(n=va++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},sl={readContext:So,useCallback:Ka,useContext:So,useEffect:$a,useImperativeHandle:Qa,useInsertionEffect:Ya,useLayoutEffect:Ga,useMemo:Xa,useReducer:za,useRef:Da,useState:function(){return za(Ba)},useDebugValue:qa,useDeferredValue:function(e){return Ja(Ea(),ga.memoizedState,e)},useTransition:function(){return[za(Ba)[0],Ea().memoizedState]},useMutableSource:Ta,useSyncExternalStore:Ra,useId:el,unstable_isNewReconciler:!1},cl={readContext:So,useCallback:Ka,useContext:So,useEffect:$a,useImperativeHandle:Qa,useInsertionEffect:Ya,useLayoutEffect:Ga,useMemo:Xa,useReducer:Oa,useRef:Da,useState:function(){return Oa(Ba)},useDebugValue:qa,useDeferredValue:function(e){var t=Ea();return null===ga?t.memoizedState=e:Ja(t,ga.memoizedState,e)},useTransition:function(){return[Oa(Ba)[0],Ea().memoizedState]},useMutableSource:Ta,useSyncExternalStore:Ra,useId:el,unstable_isNewReconciler:!1};function ul(e,t){try{var n="",r=t;do{n+=W(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function ml(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function pl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var dl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=No(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ys||(Ys=!0,Gs=r),pl(0,t)},n}function fl(e,t,n){(n=No(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){pl(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){pl(0,t),"function"!=typeof r&&(null===Vs?Vs=new Set([this]):Vs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new dl;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=Sc.bind(null,e,t,n),t.then(e,e))}function bl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,i){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=No(-1,1)).tag=2,Io(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var _l=v.ReactCurrentOwner,vl=!1;function wl(e,t,n,r){t.child=null===e?Jo(t,null,n,r):Xo(t,e.child,n,r)}function kl(e,t,n,r,i){n=n.render;var o=t.ref;return Ao(t,i),r=Ca(e,t,n,r,o,i),n=Aa(),null===e||vl?(io&&n&&eo(t),t.flags|=1,wl(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Yl(e,t,i))}function xl(e,t,n,r,i){if(null===e){var o=n.type;return"function"!=typeof o||Pc(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ic(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Cl(e,t,o,r,i))}if(o=e.child,0==(e.lanes&i)){var a=o.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(a,r)&&e.ref===t.ref)return Yl(e,t,i)}return t.flags|=1,(e=Nc(o,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,i){if(null!==e){var o=e.memoizedProps;if(sr(o,r)&&e.ref===t.ref){if(vl=!1,t.pendingProps=r=o,0==(e.lanes&i))return t.lanes=e.lanes,Yl(e,t,i);0!=(131072&e.flags)&&(vl=!0)}}return El(e,t,n,r,i)}function Al(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Si(Ns,Ps),Ps|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Si(Ns,Ps),Ps|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Si(Ns,Ps),Ps|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Si(Ns,Ps),Ps|=r;return wl(e,t,i,n),t.child}function Sl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function El(e,t,n,r,i){var o=Ri(n)?Oi:Bi.current;return o=Ti(t,o),Ao(t,i),n=Ca(e,t,n,r,o,i),r=Aa(),null===e||vl?(io&&r&&eo(t),t.flags|=1,wl(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Yl(e,t,i))}function Bl(e,t,n,r,i){if(Ri(n)){var o=!0;ji(t)}else o=!1;if(Ao(t,i),null===t.stateNode)$l(e,t),$o(t,n,r),Go(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,c=n.contextType;c="object"==typeof c&&null!==c?So(c):Ti(t,c=Ri(n)?Oi:Bi.current);var u=n.getDerivedStateFromProps,m="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;m||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==c)&&Yo(t,a,r,c),To=!1;var p=t.memoizedState;a.state=p,Mo(t,r,a,i),s=t.memoizedState,l!==r||p!==s||zi.current||To?("function"==typeof u&&(Wo(t,n,u,r),s=t.memoizedState),(l=To||Ho(t,n,l,r,p,s,c))?(m||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=c,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Po(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:bo(t.type,l),a.props=c,m=t.pendingProps,p=a.context,s="object"==typeof(s=n.contextType)&&null!==s?So(s):Ti(t,s=Ri(n)?Oi:Bi.current);var d=n.getDerivedStateFromProps;(u="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==m||p!==s)&&Yo(t,a,r,s),To=!1,p=t.memoizedState,a.state=p,Mo(t,r,a,i);var h=t.memoizedState;l!==m||p!==h||zi.current||To?("function"==typeof d&&(Wo(t,n,d,r),h=t.memoizedState),(c=To||Ho(t,n,c,r,p,h,s)||!1)?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return zl(e,t,n,r,o,i)}function zl(e,t,n,r,i,o){Sl(e,t);var a=0!=(128&t.flags);if(!r&&!a)return i&&Li(t,n,!1),Yl(e,t,o);r=t.stateNode,_l.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Xo(t,e.child,null,o),t.child=Xo(t,null,l,o)):wl(e,t,l,o),t.memoizedState=r.state,i&&Li(t,n,!0),t.child}function Ol(e){var t=e.stateNode;t.pendingContext?Ni(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ni(0,t.context,!1),ia(e,t.containerInfo)}function Tl(e,t,n,r,i){return ho(),fo(i),t.flags|=256,wl(e,t,n,r),t.child}var Rl,Pl,Nl,Il,jl={dehydrated:null,treeContext:null,retryLane:0};function Ll(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ml(e,t,n){var r,i=t.pendingProps,a=sa.current,l=!1,s=0!=(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Si(sa,1&a),null===e)return co(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(s=i.children,e=i.fallback,l?(i=t.mode,l=t.child,s={mode:"hidden",children:s},0==(1&i)&&null!==l?(l.childLanes=0,l.pendingProps=s):l=Lc(s,i,0,null),e=jc(e,i,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ll(n),t.memoizedState=jl,e):Fl(t,s));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,i,a,l){if(n)return 256&t.flags?(t.flags&=-257,Dl(e,t,l,r=ml(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,i=t.mode,r=Lc({mode:"visible",children:r.children},i,0,null),(a=jc(a,i,l,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Xo(t,e.child,null,l),t.child.memoizedState=Ll(l),t.memoizedState=jl,a);if(0==(1&t.mode))return Dl(e,t,l,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var s=r.dgst;return r=s,Dl(e,t,l,r=ml(a=Error(o(419)),r,void 0))}if(s=0!=(l&e.childLanes),vl||s){if(null!==(r=Os)){switch(l&-l){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(r.suspendedLanes|l))?0:i)&&i!==a.retryLane&&(a.retryLane=i,Oo(e,i),rc(r,e,i,-1))}return gc(),Dl(e,t,l,r=ml(Error(o(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=Bc.bind(null,e),i._reactRetry=t,null):(e=a.treeContext,ro=ci(i.nextSibling),no=t,io=!0,oo=null,null!==e&&(Vi[Qi++]=Ki,Vi[Qi++]=Xi,Vi[Qi++]=qi,Ki=e.id,Xi=e.overflow,qi=t),(t=Fl(t,r.children)).flags|=4096,t)}(e,t,s,i,r,a,n);if(l){l=i.fallback,s=t.mode,r=(a=e.child).sibling;var c={mode:"hidden",children:i.children};return 0==(1&s)&&t.child!==a?((i=t.child).childLanes=0,i.pendingProps=c,t.deletions=null):(i=Nc(a,c)).subtreeFlags=14680064&a.subtreeFlags,null!==r?l=Nc(r,l):(l=jc(l,s,n,null)).flags|=2,l.return=t,i.return=t,i.sibling=l,t.child=i,i=l,l=t.child,s=null===(s=e.child.memoizedState)?Ll(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},l.memoizedState=s,l.childLanes=e.childLanes&~n,t.memoizedState=jl,i}return e=(l=e.child).sibling,i=Nc(l,{mode:"visible",children:i.children}),0==(1&t.mode)&&(i.lanes=n),i.return=t,i.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=i,t.memoizedState=null,i}function Fl(e,t){return(t=Lc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Dl(e,t,n,r){return null!==r&&fo(r),Xo(t,e.child,null,n),(e=Fl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Wl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Co(e.return,t,n)}function Ul(e,t,n,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function Hl(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(wl(e,t,r.children,n),0!=(2&(r=sa.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wl(e,n,t);else if(19===e.tag)Wl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Si(sa,r),0==(1&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===ca(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ul(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===ca(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Ul(t,!0,n,null,o);break;case"together":Ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function $l(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Yl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ls|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Nc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Nc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Gl(e,t){if(!io)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Vl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ql(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Vl(t),null;case 1:case 17:return Ri(t.type)&&Pi(),Vl(t),null;case 3:return r=t.stateNode,oa(),Ai(zi),Ai(Bi),ma(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(mo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(lc(oo),oo=null))),Pl(e,t),Vl(t),null;case 5:la(t);var i=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Nl(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Vl(t),null}if(e=ra(ea.current),mo(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[pi]=t,r[di]=a,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(i=0;i<Ir.length;i++)Fr(Ir[i],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":K(r,a),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Fr("invalid",r);break;case"textarea":ie(r,a),Fr("invalid",r)}for(var s in ye(n,a),i=null,a)if(a.hasOwnProperty(s)){var c=a[s];"children"===s?"string"==typeof c?r.textContent!==c&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,c,e),i=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,c,e),i=["children",""+c]):l.hasOwnProperty(s)&&null!=c&&"onScroll"===s&&Fr("scroll",r)}switch(n){case"input":G(r),Z(r,a,!0);break;case"textarea":G(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Zr)}r=i,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[pi]=t,e[di]=r,Rl(e,t,!1,!1),t.stateNode=e;e:{switch(s=_e(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),i=r;break;case"iframe":case"object":case"embed":Fr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Ir.length;i++)Fr(Ir[i],e);i=r;break;case"source":Fr("error",e),i=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),i=r;break;case"details":Fr("toggle",e),i=r;break;case"input":K(e,r),i=q(e,r),Fr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=L({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),Fr("invalid",e)}for(a in ye(n,i),c=i)if(c.hasOwnProperty(a)){var u=c[a];"style"===a?ge(e,u):"dangerouslySetInnerHTML"===a?null!=(u=u?u.__html:void 0)&&me(e,u):"children"===a?"string"==typeof u?("textarea"!==n||""!==u)&&pe(e,u):"number"==typeof u&&pe(e,""+u):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(l.hasOwnProperty(a)?null!=u&&"onScroll"===a&&Fr("scroll",e):null!=u&&_(e,a,u,s))}switch(n){case"input":G(e),Z(e,r,!1);break;case"textarea":G(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Vl(t),null;case 6:if(e&&null!=t.stateNode)Il(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=ra(na.current),ra(ea.current),mo(t)){if(r=t.stateNode,n=t.memoizedProps,r[pi]=t,(a=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[pi]=t,t.stateNode=r}return Vl(t),null;case 13:if(Ai(sa),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(io&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))po(),ho(),t.flags|=98560,a=!1;else if(a=mo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[pi]=t}else ho(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Vl(t),a=!1}else null!==oo&&(lc(oo),oo=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&sa.current)?0===Is&&(Is=3):gc())),null!==t.updateQueue&&(t.flags|=4),Vl(t),null);case 4:return oa(),Pl(e,t),null===e&&Ur(t.stateNode.containerInfo),Vl(t),null;case 10:return xo(t.type._context),Vl(t),null;case 19:if(Ai(sa),null===(a=t.memoizedState))return Vl(t),null;if(r=0!=(128&t.flags),null===(s=a.rendering))if(r)Gl(a,!1);else{if(0!==Is||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=ca(e))){for(t.flags|=128,Gl(a,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(s=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=s.childLanes,a.lanes=s.lanes,a.child=s.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=s.memoizedProps,a.memoizedState=s.memoizedState,a.updateQueue=s.updateQueue,a.type=s.type,e=s.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Si(sa,1&sa.current|2),t.child}e=e.sibling}null!==a.tail&&Xe()>Hs&&(t.flags|=128,r=!0,Gl(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ca(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Gl(a,!0),null===a.tail&&"hidden"===a.tailMode&&!s.alternate&&!io)return Vl(t),null}else 2*Xe()-a.renderingStartTime>Hs&&1073741824!==n&&(t.flags|=128,r=!0,Gl(a,!1),t.lanes=4194304);a.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=a.last)?n.sibling=s:t.child=s,a.last=s)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Xe(),t.sibling=null,n=sa.current,Si(sa,r?1&n|2:1&n),t):(Vl(t),null);case 22:case 23:return pc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ps)&&(Vl(t),6&t.subtreeFlags&&(t.flags|=8192)):Vl(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function ql(e,t){switch(to(t),t.tag){case 1:return Ri(t.type)&&Pi(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oa(),Ai(zi),Ai(Bi),ma(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return la(t),null;case 13:if(Ai(sa),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ai(sa),null;case 4:return oa(),null;case 10:return xo(t.type._context),null;case 22:case 23:return pc(),null;default:return null}}Rl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Pl=function(){},Nl=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,ra(ea.current);var o,a=null;switch(n){case"input":i=q(e,i),r=q(e,r),a=[];break;case"select":i=L({},i,{value:void 0}),r=L({},r,{value:void 0}),a=[];break;case"textarea":i=re(e,i),r=re(e,r),a=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(u in ye(n,r),n=null,i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&null!=i[u])if("style"===u){var s=i[u];for(o in s)s.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?a||(a=[]):(a=a||[]).push(u,null));for(u in r){var c=r[u];if(s=null!=i?i[u]:void 0,r.hasOwnProperty(u)&&c!==s&&(null!=c||null!=s))if("style"===u)if(s){for(o in s)!s.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in c)c.hasOwnProperty(o)&&s[o]!==c[o]&&(n||(n={}),n[o]=c[o])}else n||(a||(a=[]),a.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(a=a||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(l.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Fr("scroll",e),a||s===c||(a=[])):(a=a||[]).push(u,c))}n&&(a=a||[]).push("style",n);var u=a;(t.updateQueue=u)&&(t.flags|=4)}},Il=function(e,t,n,r){n!==r&&(t.flags|=4)};var Kl=!1,Xl=!1,Jl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function es(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ac(e,t,n)}else n.current=null}function ts(e,t,n){try{n()}catch(n){Ac(e,t,n)}}var ns=!1;function rs(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,void 0!==o&&ts(t,n,o)}i=i.next}while(i!==r)}}function is(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function os(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function as(e){var t=e.alternate;null!==t&&(e.alternate=null,as(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[pi],delete t[di],delete t[fi],delete t[gi],delete t[bi]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ls(e){return 5===e.tag||3===e.tag||4===e.tag}function ss(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ls(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(cs(e,t,n),e=e.sibling;null!==e;)cs(e,t,n),e=e.sibling}function us(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(us(e,t,n),e=e.sibling;null!==e;)us(e,t,n),e=e.sibling}var ms=null,ps=!1;function ds(e,t,n){for(n=n.child;null!==n;)hs(e,t,n),n=n.sibling}function hs(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Xl||es(n,t);case 6:var r=ms,i=ps;ms=null,ds(e,t,n),ps=i,null!==(ms=r)&&(ps?(e=ms,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ms.removeChild(n.stateNode));break;case 18:null!==ms&&(ps?(e=ms,n=n.stateNode,8===e.nodeType?si(e.parentNode,n):1===e.nodeType&&si(e,n),Ut(e)):si(ms,n.stateNode));break;case 4:r=ms,i=ps,ms=n.stateNode.containerInfo,ps=!0,ds(e,t,n),ms=r,ps=i;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var o=i,a=o.destroy;o=o.tag,void 0!==a&&(0!=(2&o)||0!=(4&o))&&ts(n,t,a),i=i.next}while(i!==r)}ds(e,t,n);break;case 1:if(!Xl&&(es(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Ac(n,t,e)}ds(e,t,n);break;case 21:ds(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,ds(e,t,n),Xl=r):ds(e,t,n);break;default:ds(e,t,n)}}function fs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jl),t.forEach((function(t){var r=zc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var a=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 5:ms=s.stateNode,ps=!1;break e;case 3:case 4:ms=s.stateNode.containerInfo,ps=!0;break e}s=s.return}if(null===ms)throw Error(o(160));hs(a,l,i),ms=null,ps=!1;var c=i.alternate;null!==c&&(c.return=null),i.return=null}catch(e){Ac(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)bs(t,e),t=t.sibling}function bs(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gs(t,e),ys(e),4&r){try{rs(3,e,e.return),is(3,e)}catch(t){Ac(e,e.return,t)}try{rs(5,e,e.return)}catch(t){Ac(e,e.return,t)}}break;case 1:gs(t,e),ys(e),512&r&&null!==n&&es(n,n.return);break;case 5:if(gs(t,e),ys(e),512&r&&null!==n&&es(n,n.return),32&e.flags){var i=e.stateNode;try{pe(i,"")}catch(t){Ac(e,e.return,t)}}if(4&r&&null!=(i=e.stateNode)){var a=e.memoizedProps,l=null!==n?n.memoizedProps:a,s=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===s&&"radio"===a.type&&null!=a.name&&X(i,a),_e(s,l);var u=_e(s,a);for(l=0;l<c.length;l+=2){var m=c[l],p=c[l+1];"style"===m?ge(i,p):"dangerouslySetInnerHTML"===m?me(i,p):"children"===m?pe(i,p):_(i,m,p,u)}switch(s){case"input":J(i,a);break;case"textarea":oe(i,a);break;case"select":var d=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(i,!!a.multiple,h,!1):d!==!!a.multiple&&(null!=a.defaultValue?ne(i,!!a.multiple,a.defaultValue,!0):ne(i,!!a.multiple,a.multiple?[]:"",!1))}i[di]=a}catch(t){Ac(e,e.return,t)}}break;case 6:if(gs(t,e),ys(e),4&r){if(null===e.stateNode)throw Error(o(162));i=e.stateNode,a=e.memoizedProps;try{i.nodeValue=a}catch(t){Ac(e,e.return,t)}}break;case 3:if(gs(t,e),ys(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){Ac(e,e.return,t)}break;case 4:default:gs(t,e),ys(e);break;case 13:gs(t,e),ys(e),8192&(i=e.child).flags&&(a=null!==i.memoizedState,i.stateNode.isHidden=a,!a||null!==i.alternate&&null!==i.alternate.memoizedState||(Us=Xe())),4&r&&fs(e);break;case 22:if(m=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(u=Xl)||m,gs(t,e),Xl=u):gs(t,e),ys(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!m&&0!=(1&e.mode))for(Zl=e,m=e.child;null!==m;){for(p=Zl=m;null!==Zl;){switch(h=(d=Zl).child,d.tag){case 0:case 11:case 14:case 15:rs(4,d,d.return);break;case 1:es(d,d.return);var f=d.stateNode;if("function"==typeof f.componentWillUnmount){r=d,n=d.return;try{t=r,f.props=t.memoizedProps,f.state=t.memoizedState,f.componentWillUnmount()}catch(e){Ac(r,n,e)}}break;case 5:es(d,d.return);break;case 22:if(null!==d.memoizedState){ks(p);continue}}null!==h?(h.return=d,Zl=h):ks(p)}m=m.sibling}e:for(m=null,p=e;;){if(5===p.tag){if(null===m){m=p;try{i=p.stateNode,u?"function"==typeof(a=i.style).setProperty?a.setProperty("display","none","important"):a.display="none":(s=p.stateNode,l=null!=(c=p.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,s.style.display=fe("display",l))}catch(t){Ac(e,e.return,t)}}}else if(6===p.tag){if(null===m)try{p.stateNode.nodeValue=u?"":p.memoizedProps}catch(t){Ac(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;m===p&&(m=null),p=p.return}m===p&&(m=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:gs(t,e),ys(e),4&r&&fs(e);case 21:}}function ys(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ls(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(pe(i,""),r.flags&=-33),us(e,ss(e),i);break;case 3:case 4:var a=r.stateNode.containerInfo;cs(e,ss(e),a);break;default:throw Error(o(161))}}catch(t){Ac(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function _s(e,t,n){Zl=e,vs(e,t,n)}function vs(e,t,n){for(var r=0!=(1&e.mode);null!==Zl;){var i=Zl,o=i.child;if(22===i.tag&&r){var a=null!==i.memoizedState||Kl;if(!a){var l=i.alternate,s=null!==l&&null!==l.memoizedState||Xl;l=Kl;var c=Xl;if(Kl=a,(Xl=s)&&!c)for(Zl=i;null!==Zl;)s=(a=Zl).child,22===a.tag&&null!==a.memoizedState?xs(i):null!==s?(s.return=a,Zl=s):xs(i);for(;null!==o;)Zl=o,vs(o,t,n),o=o.sibling;Zl=i,Kl=l,Xl=c}ws(e)}else 0!=(8772&i.subtreeFlags)&&null!==o?(o.return=i,Zl=o):ws(e)}}function ws(e){for(;null!==Zl;){var t=Zl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||is(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:bo(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Fo(t,a,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fo(t,l,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var m=u.memoizedState;if(null!==m){var p=m.dehydrated;null!==p&&Ut(p)}}}break;default:throw Error(o(163))}Xl||512&t.flags&&os(t)}catch(e){Ac(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zl=n;break}Zl=t.return}}function ks(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zl=n;break}Zl=t.return}}function xs(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{is(4,t)}catch(e){Ac(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var i=t.return;try{r.componentDidMount()}catch(e){Ac(t,i,e)}}var o=t.return;try{os(t)}catch(e){Ac(t,o,e)}break;case 5:var a=t.return;try{os(t)}catch(e){Ac(t,a,e)}}}catch(e){Ac(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var Cs,As=Math.ceil,Ss=v.ReactCurrentDispatcher,Es=v.ReactCurrentOwner,Bs=v.ReactCurrentBatchConfig,zs=0,Os=null,Ts=null,Rs=0,Ps=0,Ns=Ci(0),Is=0,js=null,Ls=0,Ms=0,Fs=0,Ds=null,Ws=null,Us=0,Hs=1/0,$s=null,Ys=!1,Gs=null,Vs=null,Qs=!1,qs=null,Ks=0,Xs=0,Js=null,Zs=-1,ec=0;function tc(){return 0!=(6&zs)?Xe():-1!==Zs?Zs:Zs=Xe()}function nc(e){return 0==(1&e.mode)?1:0!=(2&zs)&&0!==Rs?Rs&-Rs:null!==go.transition?(0===ec&&(ec=ft()),ec):0!==(e=_t)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function rc(e,t,n,r){if(50<Xs)throw Xs=0,Js=null,Error(o(185));bt(e,n,r),0!=(2&zs)&&e===Os||(e===Os&&(0==(2&zs)&&(Ms|=n),4===Is&&sc(e,Rs)),ic(e,r),1===n&&0===zs&&0==(1&t.mode)&&(Hs=Xe()+500,Fi&&Ui()))}function ic(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-at(o),l=1<<a,s=i[a];-1===s?0!=(l&n)&&0==(l&r)||(i[a]=dt(l,t)):s<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=pt(e,e===Os?Rs:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Fi=!0,Wi(e)}(cc.bind(null,e)):Wi(cc.bind(null,e)),ai((function(){0==(6&zs)&&Ui()})),n=null;else{switch(vt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Oc(n,oc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function oc(e,t){if(Zs=-1,ec=0,0!=(6&zs))throw Error(o(327));var n=e.callbackNode;if(xc()&&e.callbackNode!==n)return null;var r=pt(e,e===Os?Rs:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=bc(e,r);else{t=r;var i=zs;zs|=2;var a=fc();for(Os===e&&Rs===t||($s=null,Hs=Xe()+500,dc(e,t));;)try{_c();break}catch(t){hc(e,t)}ko(),Ss.current=a,zs=i,null!==Ts?t=0:(Os=null,Rs=0,t=Is)}if(0!==t){if(2===t&&0!==(i=ht(e))&&(r=i,t=ac(e,i)),1===t)throw n=js,dc(e,0),sc(e,r),ic(e,Xe()),n;if(6===t)sc(e,r);else{if(i=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!lr(o(),i))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)&&(2===(t=bc(e,r))&&0!==(a=ht(e))&&(r=a,t=ac(e,a)),1===t))throw n=js,dc(e,0),sc(e,r),ic(e,Xe()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:kc(e,Ws,$s);break;case 3:if(sc(e,r),(130023424&r)===r&&10<(t=Us+500-Xe())){if(0!==pt(e,0))break;if(((i=e.suspendedLanes)&r)!==r){tc(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(kc.bind(null,e,Ws,$s),t);break}kc(e,Ws,$s);break;case 4:if(sc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,i=-1;0<r;){var l=31-at(r);a=1<<l,(l=t[l])>i&&(i=l),r&=~a}if(r=i,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*As(r/1960))-r)){e.timeoutHandle=ri(kc.bind(null,e,Ws,$s),r);break}kc(e,Ws,$s);break;default:throw Error(o(329))}}}return ic(e,Xe()),e.callbackNode===n?oc.bind(null,e):null}function ac(e,t){var n=Ds;return e.current.memoizedState.isDehydrated&&(dc(e,t).flags|=256),2!==(e=bc(e,t))&&(t=Ws,Ws=n,null!==t&&lc(t)),e}function lc(e){null===Ws?Ws=e:Ws.push.apply(Ws,e)}function sc(e,t){for(t&=~Fs,t&=~Ms,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function cc(e){if(0!=(6&zs))throw Error(o(327));xc();var t=pt(e,0);if(0==(1&t))return ic(e,Xe()),null;var n=bc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ac(e,r))}if(1===n)throw n=js,dc(e,0),sc(e,t),ic(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,kc(e,Ws,$s),ic(e,Xe()),null}function uc(e,t){var n=zs;zs|=1;try{return e(t)}finally{0===(zs=n)&&(Hs=Xe()+500,Fi&&Ui())}}function mc(e){null!==qs&&0===qs.tag&&0==(6&zs)&&xc();var t=zs;zs|=1;var n=Bs.transition,r=_t;try{if(Bs.transition=null,_t=1,e)return e()}finally{_t=r,Bs.transition=n,0==(6&(zs=t))&&Ui()}}function pc(){Ps=Ns.current,Ai(Ns)}function dc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ii(n)),null!==Ts)for(n=Ts.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Pi();break;case 3:oa(),Ai(zi),Ai(Bi),ma();break;case 5:la(r);break;case 4:oa();break;case 13:case 19:Ai(sa);break;case 10:xo(r.type._context);break;case 22:case 23:pc()}n=n.return}if(Os=e,Ts=e=Nc(e.current,null),Rs=Ps=t,Is=0,js=null,Fs=Ms=Ls=0,Ws=Ds=null,null!==Eo){for(t=0;t<Eo.length;t++)if(null!==(r=(n=Eo[t]).interleaved)){n.interleaved=null;var i=r.next,o=n.pending;if(null!==o){var a=o.next;o.next=i,r.next=a}n.pending=r}Eo=null}return e}function hc(e,t){for(;;){var n=Ts;try{if(ko(),pa.current=al,ya){for(var r=fa.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}ya=!1}if(ha=0,ba=ga=fa=null,_a=!1,va=0,Es.current=null,null===n||null===n.return){Is=1,js=t,Ts=null;break}e:{var a=e,l=n.return,s=n,c=t;if(t=Rs,s.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,m=s,p=m.tag;if(0==(1&m.mode)&&(0===p||11===p||15===p)){var d=m.alternate;d?(m.updateQueue=d.updateQueue,m.memoizedState=d.memoizedState,m.lanes=d.lanes):(m.updateQueue=null,m.memoizedState=null)}var h=bl(l);if(null!==h){h.flags&=-257,yl(h,l,s,0,t),1&h.mode&&gl(a,u,t),c=u;var f=(t=h).updateQueue;if(null===f){var g=new Set;g.add(c),t.updateQueue=g}else f.add(c);break e}if(0==(1&t)){gl(a,u,t),gc();break e}c=Error(o(426))}else if(io&&1&s.mode){var b=bl(l);if(null!==b){0==(65536&b.flags)&&(b.flags|=256),yl(b,l,s,0,t),fo(ul(c,s));break e}}a=c=ul(c,s),4!==Is&&(Is=2),null===Ds?Ds=[a]:Ds.push(a),a=l;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Lo(a,hl(0,c,t));break e;case 1:s=c;var y=a.type,_=a.stateNode;if(0==(128&a.flags)&&("function"==typeof y.getDerivedStateFromError||null!==_&&"function"==typeof _.componentDidCatch&&(null===Vs||!Vs.has(_)))){a.flags|=65536,t&=-t,a.lanes|=t,Lo(a,fl(a,s,t));break e}}a=a.return}while(null!==a)}wc(n)}catch(e){t=e,Ts===n&&null!==n&&(Ts=n=n.return);continue}break}}function fc(){var e=Ss.current;return Ss.current=al,null===e?al:e}function gc(){0!==Is&&3!==Is&&2!==Is||(Is=4),null===Os||0==(268435455&Ls)&&0==(268435455&Ms)||sc(Os,Rs)}function bc(e,t){var n=zs;zs|=2;var r=fc();for(Os===e&&Rs===t||($s=null,dc(e,t));;)try{yc();break}catch(t){hc(e,t)}if(ko(),zs=n,Ss.current=r,null!==Ts)throw Error(o(261));return Os=null,Rs=0,Is}function yc(){for(;null!==Ts;)vc(Ts)}function _c(){for(;null!==Ts&&!qe();)vc(Ts)}function vc(e){var t=Cs(e.alternate,e,Ps);e.memoizedProps=e.pendingProps,null===t?wc(e):Ts=t,Es.current=null}function wc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ql(n,t,Ps)))return void(Ts=n)}else{if(null!==(n=ql(n,t)))return n.flags&=32767,void(Ts=n);if(null===e)return Is=6,void(Ts=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ts=t);Ts=t=e}while(null!==t);0===Is&&(Is=5)}function kc(e,t,n){var r=_t,i=Bs.transition;try{Bs.transition=null,_t=1,function(e,t,n,r){do{xc()}while(null!==qs);if(0!=(6&zs))throw Error(o(327));n=e.finishedWork;var i=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-at(n),o=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~o}}(e,a),e===Os&&(Ts=Os=null,Rs=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Qs||(Qs=!0,Oc(tt,(function(){return xc(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Bs.transition,Bs.transition=null;var l=_t;_t=1;var s=zs;zs|=4,Es.current=null,function(e,t){if(ei=$t,dr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,s=-1,c=-1,u=0,m=0,p=e,d=null;t:for(;;){for(var h;p!==n||0!==i&&3!==p.nodeType||(s=l+i),p!==a||0!==r&&3!==p.nodeType||(c=l+r),3===p.nodeType&&(l+=p.nodeValue.length),null!==(h=p.firstChild);)d=p,p=h;for(;;){if(p===e)break t;if(d===n&&++u===i&&(s=l),d===a&&++m===r&&(c=l),null!==(h=p.nextSibling))break;d=(p=d).parentNode}p=h}n=-1===s||-1===c?null:{start:s,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(ti={focusedElem:e,selectionRange:n},$t=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var f=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==f){var g=f.memoizedProps,b=f.memoizedState,y=t.stateNode,_=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:bo(t.type,g),b);y.__reactInternalSnapshotBeforeUpdate=_}break;case 3:var v=t.stateNode.containerInfo;1===v.nodeType?v.textContent="":9===v.nodeType&&v.documentElement&&v.removeChild(v.documentElement);break;default:throw Error(o(163))}}catch(e){Ac(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}f=ns,ns=!1}(e,n),bs(n,e),hr(ti),$t=!!ei,ti=ei=null,e.current=n,_s(n,e,i),Ke(),zs=s,_t=l,Bs.transition=a}else e.current=n;if(Qs&&(Qs=!1,qs=e,Ks=i),0===(a=e.pendingLanes)&&(Vs=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ic(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((i=t[n]).value,{componentStack:i.stack,digest:i.digest});if(Ys)throw Ys=!1,e=Gs,Gs=null,e;0!=(1&Ks)&&0!==e.tag&&xc(),0!=(1&(a=e.pendingLanes))?e===Js?Xs++:(Xs=0,Js=e):Xs=0,Ui()}(e,t,n,r)}finally{Bs.transition=i,_t=r}return null}function xc(){if(null!==qs){var e=vt(Ks),t=Bs.transition,n=_t;try{if(Bs.transition=null,_t=16>e?16:e,null===qs)var r=!1;else{if(e=qs,qs=null,Ks=0,0!=(6&zs))throw Error(o(331));var i=zs;for(zs|=4,Zl=e.current;null!==Zl;){var a=Zl,l=a.child;if(0!=(16&Zl.flags)){var s=a.deletions;if(null!==s){for(var c=0;c<s.length;c++){var u=s[c];for(Zl=u;null!==Zl;){var m=Zl;switch(m.tag){case 0:case 11:case 15:rs(8,m,a)}var p=m.child;if(null!==p)p.return=m,Zl=p;else for(;null!==Zl;){var d=(m=Zl).sibling,h=m.return;if(as(m),m===u){Zl=null;break}if(null!==d){d.return=h,Zl=d;break}Zl=h}}}var f=a.alternate;if(null!==f){var g=f.child;if(null!==g){f.child=null;do{var b=g.sibling;g.sibling=null,g=b}while(null!==g)}}Zl=a}}if(0!=(2064&a.subtreeFlags)&&null!==l)l.return=a,Zl=l;else e:for(;null!==Zl;){if(0!=(2048&(a=Zl).flags))switch(a.tag){case 0:case 11:case 15:rs(9,a,a.return)}var y=a.sibling;if(null!==y){y.return=a.return,Zl=y;break e}Zl=a.return}}var _=e.current;for(Zl=_;null!==Zl;){var v=(l=Zl).child;if(0!=(2064&l.subtreeFlags)&&null!==v)v.return=l,Zl=v;else e:for(l=_;null!==Zl;){if(0!=(2048&(s=Zl).flags))try{switch(s.tag){case 0:case 11:case 15:is(9,s)}}catch(e){Ac(s,s.return,e)}if(s===l){Zl=null;break e}var w=s.sibling;if(null!==w){w.return=s.return,Zl=w;break e}Zl=s.return}}if(zs=i,Ui(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{_t=n,Bs.transition=t}}return!1}function Cc(e,t,n){e=Io(e,t=hl(0,t=ul(n,t),1),1),t=tc(),null!==e&&(bt(e,1,t),ic(e,t))}function Ac(e,t,n){if(3===e.tag)Cc(e,e,n);else for(;null!==t;){if(3===t.tag){Cc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Vs||!Vs.has(r))){t=Io(t,e=fl(t,e=ul(n,e),1),1),e=tc(),null!==t&&(bt(t,1,e),ic(t,e));break}}t=t.return}}function Sc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&n,Os===e&&(Rs&n)===n&&(4===Is||3===Is&&(130023424&Rs)===Rs&&500>Xe()-Us?dc(e,0):Fs|=n),ic(e,t)}function Ec(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=tc();null!==(e=Oo(e,t))&&(bt(e,t,n),ic(e,n))}function Bc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ec(e,n)}function zc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Ec(e,n)}function Oc(e,t){return Ve(e,t)}function Tc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Rc(e,t,n,r){return new Tc(e,t,n,r)}function Pc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Nc(e,t){var n=e.alternate;return null===n?((n=Rc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ic(e,t,n,r,i,a){var l=2;if(r=e,"function"==typeof e)Pc(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return jc(n.children,i,a,t);case C:l=8,i|=8;break;case A:return(e=Rc(12,n,t,2|i)).elementType=A,e.lanes=a,e;case z:return(e=Rc(13,n,t,i)).elementType=z,e.lanes=a,e;case O:return(e=Rc(19,n,t,i)).elementType=O,e.lanes=a,e;case P:return Lc(n,i,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case E:l=9;break e;case B:l=11;break e;case T:l=14;break e;case R:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Rc(l,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function jc(e,t,n,r){return(e=Rc(7,e,r,t)).lanes=n,e}function Lc(e,t,n,r){return(e=Rc(22,e,r,t)).elementType=P,e.lanes=n,e.stateNode={isHidden:!1},e}function Mc(e,t,n){return(e=Rc(6,e,null,t)).lanes=n,e}function Fc(e,t,n){return(t=Rc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Dc(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Wc(e,t,n,r,i,o,a,l,s){return e=new Dc(e,t,n,l,s),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Rc(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ro(o),e}function Uc(e){if(!e)return Ei;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ri(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ri(n))return Ii(e,n,t)}return t}function Hc(e,t,n,r,i,o,a,l,s){return(e=Wc(n,r,!0,e,0,o,0,l,s)).context=Uc(null),n=e.current,(o=No(r=tc(),i=nc(n))).callback=null!=t?t:null,Io(n,o,i),e.current.lanes=i,bt(e,i,r),ic(e,r),e}function $c(e,t,n,r){var i=t.current,o=tc(),a=nc(i);return n=Uc(n),null===t.context?t.context=n:t.pendingContext=n,(t=No(o,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Io(i,t,a))&&(rc(e,i,a,o),jo(e,i,a)),a}function Yc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Vc(e,t){Gc(e,t),(e=e.alternate)&&Gc(e,t)}Cs=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||zi.current)vl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return vl=!1,function(e,t,n){switch(t.tag){case 3:Ol(t),ho();break;case 5:aa(t);break;case 1:Ri(t.type)&&ji(t);break;case 4:ia(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;Si(yo,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Si(sa,1&sa.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ml(e,t,n):(Si(sa,1&sa.current),null!==(e=Yl(e,t,n))?e.sibling:null);Si(sa,1&sa.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Hl(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Si(sa,sa.current),r)break;return null;case 22:case 23:return t.lanes=0,Al(e,t,n)}return Yl(e,t,n)}(e,t,n);vl=0!=(131072&e.flags)}else vl=!1,io&&0!=(1048576&t.flags)&&Zi(t,Gi,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;$l(e,t),e=t.pendingProps;var i=Ti(t,Bi.current);Ao(t,n),i=Ca(null,t,r,e,i,n);var a=Aa();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ri(r)?(a=!0,ji(t)):a=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Ro(t),i.updater=Uo,t.stateNode=i,i._reactInternals=t,Go(t,r,e,n),t=zl(null,t,r,!0,a,n)):(t.tag=0,io&&a&&eo(t),wl(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch($l(e,t),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return Pc(e)?1:0;if(null!=e){if((e=e.$$typeof)===B)return 11;if(e===T)return 14}return 2}(r),e=bo(r,e),i){case 0:t=El(null,t,r,e,n);break e;case 1:t=Bl(null,t,r,e,n);break e;case 11:t=kl(null,t,r,e,n);break e;case 14:t=xl(null,t,r,bo(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,El(e,t,r,i=t.elementType===r?i:bo(r,i),n);case 1:return r=t.type,i=t.pendingProps,Bl(e,t,r,i=t.elementType===r?i:bo(r,i),n);case 3:e:{if(Ol(t),null===e)throw Error(o(387));r=t.pendingProps,i=(a=t.memoizedState).element,Po(e,t),Mo(t,r,null,n);var l=t.memoizedState;if(r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Tl(e,t,r,n,i=ul(Error(o(423)),t));break e}if(r!==i){t=Tl(e,t,r,n,i=ul(Error(o(424)),t));break e}for(ro=ci(t.stateNode.containerInfo.firstChild),no=t,io=!0,oo=null,n=Jo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===i){t=Yl(e,t,n);break e}wl(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&co(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,l=i.children,ni(r,i)?l=null:null!==a&&ni(r,a)&&(t.flags|=32),Sl(e,t),wl(e,t,l,n),t.child;case 6:return null===e&&co(t),null;case 13:return Ml(e,t,n);case 4:return ia(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xo(t,null,r,n):wl(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,kl(e,t,r,i=t.elementType===r?i:bo(r,i),n);case 7:return wl(e,t,t.pendingProps,n),t.child;case 8:case 12:return wl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,a=t.memoizedProps,l=i.value,Si(yo,r._currentValue),r._currentValue=l,null!==a)if(lr(a.value,l)){if(a.children===i.children&&!zi.current){t=Yl(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var s=a.dependencies;if(null!==s){l=a.child;for(var c=s.firstContext;null!==c;){if(c.context===r){if(1===a.tag){(c=No(-1,n&-n)).tag=2;var u=a.updateQueue;if(null!==u){var m=(u=u.shared).pending;null===m?c.next=c:(c.next=m.next,m.next=c),u.pending=c}}a.lanes|=n,null!==(c=a.alternate)&&(c.lanes|=n),Co(a.return,n,t),s.lanes|=n;break}c=c.next}}else if(10===a.tag)l=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(l=a.return))throw Error(o(341));l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),Co(l,n,t),l=a.sibling}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===t){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}wl(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,Ao(t,n),r=r(i=So(i)),t.flags|=1,wl(e,t,r,n),t.child;case 14:return i=bo(r=t.type,t.pendingProps),xl(e,t,r,i=bo(r.type,i),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:bo(r,i),$l(e,t),t.tag=1,Ri(r)?(e=!0,ji(t)):e=!1,Ao(t,n),$o(t,r,i),Go(t,r,i,n),zl(null,t,r,!0,e,n);case 19:return Hl(e,t,n);case 22:return Al(e,t,n)}throw Error(o(156,t.tag))};var Qc="function"==typeof reportError?reportError:function(e){console.error(e)};function qc(e){this._internalRoot=e}function Kc(e){this._internalRoot=e}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zc(){}function eu(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o;if("function"==typeof i){var l=i;i=function(){var e=Yc(a);l.call(e)}}$c(t,a,e,i)}else a=function(e,t,n,r,i){if(i){if("function"==typeof r){var o=r;r=function(){var e=Yc(a);o.call(e)}}var a=Hc(t,r,e,0,null,!1,0,"",Zc);return e._reactRootContainer=a,e[hi]=a.current,Ur(8===e.nodeType?e.parentNode:e),mc(),a}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var l=r;r=function(){var e=Yc(s);l.call(e)}}var s=Wc(e,0,!1,null,0,!1,0,"",Zc);return e._reactRootContainer=s,e[hi]=s.current,Ur(8===e.nodeType?e.parentNode:e),mc((function(){$c(t,s,n,r)})),s}(n,t,e,i,r);return Yc(a)}Kc.prototype.render=qc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));$c(e,t,null,null)},Kc.prototype.unmount=qc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;mc((function(){$c(null,e,null,null)})),t[hi]=null}},Kc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Pt.length&&0!==t&&t<Pt[n].priority;n++);Pt.splice(n,0,e),0===n&&Lt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=mt(t.pendingLanes);0!==n&&(yt(t,1|n),ic(t,Xe()),0==(6&zs)&&(Hs=Xe()+500,Ui()))}break;case 13:mc((function(){var t=Oo(e,1);if(null!==t){var n=tc();rc(t,e,1,n)}})),Vc(e,1)}},kt=function(e){if(13===e.tag){var t=Oo(e,134217728);null!==t&&rc(t,e,134217728,tc()),Vc(e,134217728)}},xt=function(e){if(13===e.tag){var t=nc(e),n=Oo(e,t);null!==n&&rc(n,e,t,tc()),Vc(e,t)}},Ct=function(){return _t},At=function(e,t){var n=_t;try{return _t=e,t()}finally{_t=n}},ke=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=wi(r);if(!i)throw Error(o(90));V(r),J(r,i)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Be=uc,ze=mc;var tu={usingClientEntryPoint:!1,Events:[_i,vi,wi,Se,Ee,uc]},nu={findFiberByHostInstance:yi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ru={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:v.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ye(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var iu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!iu.isDisabled&&iu.supportsFiber)try{it=iu.inject(ru),ot=iu}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xc(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xc(e))throw Error(o(299));var n=!1,r="",i=Qc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=Wc(e,1,!1,null,0,n,0,r,i),e[hi]=t.current,Ur(8===e.nodeType?e.parentNode:e),new qc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ye(t))?null:e.stateNode},t.flushSync=function(e){return mc(e)},t.hydrate=function(e,t,n){if(!Jc(t))throw Error(o(200));return eu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xc(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,i=!1,a="",l=Qc;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Hc(t,null,e,1,null!=n?n:null,i,0,a,l),e[hi]=t.current,Ur(e),r)for(e=0;e<r.length;e++)i=(i=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Kc(t)},t.render=function(e,t,n){if(!Jc(t))throw Error(o(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jc(e))throw Error(o(40));return!!e._reactRootContainer&&(mc((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[hi]=null}))})),!0)},t.unstable_batchedUpdates=uc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jc(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return eu(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.server_context"),u=Symbol.for("react.forward_ref"),m=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),d=Symbol.for("react.memo"),h=Symbol.for("react.lazy");Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.isFragment=function(e){return function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case i:case a:case o:case m:case p:return e;default:switch(e=e&&e.$$typeof){case c:case s:case u:case h:case d:case l:return e;default:return t}}case r:return t}}}(e)===i}},864:(e,t,n)=>{"use strict";e.exports=n(921)},251:(e,t,n)=>{"use strict";var r=n(294),i=Symbol.for("react.element"),o=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,s={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)o.call(t,r)&&!l.hasOwnProperty(r)&&(s[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===s[r]&&(s[r]=t[r]);return{$$typeof:i,type:e,key:c,ref:u,props:s,_owner:a.current}}t.jsx=s,t.jsxs=s},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),m=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),d=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},f=Object.assign,g={};function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function _(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=b.prototype;var v=_.prototype=new y;v.constructor=_,f(v,b.prototype),v.isPureReactComponent=!0;var w=Array.isArray,k=Object.prototype.hasOwnProperty,x={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function A(e,t,r){var i,o={},a=null,l=null;if(null!=t)for(i in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,i)&&!C.hasOwnProperty(i)&&(o[i]=t[i]);var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(i in s=e.defaultProps)void 0===o[i]&&(o[i]=s[i]);return{$$typeof:n,type:e,key:a,ref:l,props:o,_owner:x.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var E=/\/+/g;function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function z(e,t,i,o,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return a=a(s=e),e=""===o?"."+B(s,0):o,w(a)?(i="",null!=e&&(i=e.replace(E,"$&/")+"/"),z(a,t,i,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,i+(!a.key||s&&s.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+e)),t.push(a)),1;if(s=0,o=""===o?".":o+":",w(e))for(var c=0;c<e.length;c++){var u=o+B(l=e[c],c);s+=z(l,t,i,u,a)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(l=e.next()).done;)s+=z(l=l.value,t,i,u=o+B(l,c++),a);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function O(e,t,n){if(null==e)return e;var r=[],i=0;return z(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R={current:null},P={transition:null},N={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:P,ReactCurrentOwner:x};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=b,t.Fragment=i,t.Profiler=a,t.PureComponent=_,t.StrictMode=o,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=f({},e.props),o=e.key,a=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,l=x.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)k.call(t,c)&&!C.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=r;else if(1<c){s=Array(c);for(var u=0;u<c;u++)s[u]=arguments[u+2];i.children=s}return{$$typeof:n,type:e.type,key:o,ref:a,props:i,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=A,t.createFactory=function(e){var t=A.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=P.transition;P.transition={};try{e()}finally{P.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return R.current.useCallback(e,t)},t.useContext=function(e){return R.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return R.current.useDeferredValue(e)},t.useEffect=function(e,t){return R.current.useEffect(e,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(e,t,n){return R.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return R.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return R.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return R.current.useMemo(e,t)},t.useReducer=function(e,t,n){return R.current.useReducer(e,t,n)},t.useRef=function(e){return R.current.useRef(e)},t.useState=function(e){return R.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return R.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return R.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<o(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,a=i>>>1;r<a;){var l=2*(r+1)-1,s=e[l],c=l+1,u=e[c];if(0>o(s,n))c<i&&0>o(u,s)?(e[r]=u,e[c]=n,r=c):(e[r]=s,e[l]=n,r=l);else{if(!(c<i&&0>o(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var c=[],u=[],m=1,p=null,d=3,h=!1,f=!1,g=!1,b="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,_="undefined"!=typeof setImmediate?setImmediate:null;function v(e){for(var t=r(u);null!==t;){if(null===t.callback)i(u);else{if(!(t.startTime<=e))break;i(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function w(e){if(g=!1,v(e),!f)if(null!==r(c))f=!0,P(k);else{var t=r(u);null!==t&&N(w,t.startTime-e)}}function k(e,n){f=!1,g&&(g=!1,y(S),S=-1),h=!0;var o=d;try{for(v(n),p=r(c);null!==p&&(!(p.expirationTime>n)||e&&!z());){var a=p.callback;if("function"==typeof a){p.callback=null,d=p.priorityLevel;var l=a(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?p.callback=l:p===r(c)&&i(c),v(n)}else i(c);p=r(c)}if(null!==p)var s=!0;else{var m=r(u);null!==m&&N(w,m.startTime-n),s=!1}return s}finally{p=null,d=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,C=!1,A=null,S=-1,E=5,B=-1;function z(){return!(t.unstable_now()-B<E)}function O(){if(null!==A){var e=t.unstable_now();B=e;var n=!0;try{n=A(!0,e)}finally{n?x():(C=!1,A=null)}}else C=!1}if("function"==typeof _)x=function(){_(O)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,R=T.port2;T.port1.onmessage=O,x=function(){R.postMessage(null)}}else x=function(){b(O,0)};function P(e){A=e,C||(C=!0,x())}function N(e,n){S=b((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){f||h||(f=!0,P(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):E=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return d},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(d){case 1:case 2:case 3:var t=3;break;default:t=d}var n=d;d=t;try{return e()}finally{d=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=d;d=e;try{return t()}finally{d=n}},t.unstable_scheduleCallback=function(e,i,o){var a=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?a+o:a,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:m++,callback:i,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>a?(e.sortIndex=o,n(u,e),null===r(c)&&e===r(u)&&(g?(y(S),S=-1):g=!0,N(w,o-a))):(e.sortIndex=l,n(c,e),f||h||(f=!0,P(k))),e},t.unstable_shouldYield=z,t.unstable_wrapCallback=function(e){var t=d;return function(){var n=d;d=t;try{return e.apply(this,arguments)}finally{d=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],l=0;l<e.length;l++){var s=e[l],c=r.base?s[0]+r.base:s[0],u=o[c]||0,m="".concat(c," ").concat(u);o[c]=u+1;var p=n(m),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var h=i(d,r);r.byIndex=l,t.splice(l,0,{identifier:m,updater:h,references:1})}a.push(m)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var l=n(o[a]);t[l].references--}for(var s=r(e,i),c=0;c<o.length;c++){var u=n(o[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=s}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,i),o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.nc=void 0,(()=>{"use strict";var e,t=i(294),n=i.t(t,2),r=i(745),o=i(379),a=i.n(o),l=i(795),s=i.n(l),c=i(569),u=i.n(c),m=i(565),p=i.n(m),d=i(216),h=i.n(d),f=i(589),g=i.n(f),b=i(528),y={};function _(){return _=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_.apply(this,arguments)}y.styleTagTransform=g(),y.setAttributes=p(),y.insert=u().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=h(),a()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals,function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const v="popstate";function w(e,t){if(!1===e||null==e)throw new Error(t)}function k(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function x(e,t){return{usr:e.state,key:e.key,idx:t}}function C(e,t,n,r){return void 0===n&&(n=null),_({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?S(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function A(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function S(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var E;function B(e,t,n){void 0===n&&(n="/");let r=U(("string"==typeof t?S(t):t).pathname||"/",n);if(null==r)return null;let i=z(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(i);let o=null;for(let e=0;null==o&&e<i.length;++e)o=F(i[e],W(r));return o}function z(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let i=(e,i,o)=>{let a={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:i,route:e};a.relativePath.startsWith("/")&&(w(a.relativePath.startsWith(r),'Absolute route path "'+a.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),a.relativePath=a.relativePath.slice(r.length));let l=G([r,a.relativePath]),s=n.concat(a);e.children&&e.children.length>0&&(w(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),z(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:M(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of O(e.path))i(e,t,n);else i(e,t)})),t}function O(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,i=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return i?[o,""]:[o];let a=O(r.join("/")),l=[];return l.push(...a.map((e=>""===e?o:[o,e].join("/")))),i&&l.push(...a),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(E||(E={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const T=/^:\w+$/,R=3,P=2,N=1,I=10,j=-2,L=e=>"*"===e;function M(e,t){let n=e.split("/"),r=n.length;return n.some(L)&&(r+=j),t&&(r+=P),n.filter((e=>!L(e))).reduce(((e,t)=>e+(T.test(t)?R:""===t?N:I)),r)}function F(e,t){let{routesMeta:n}=e,r={},i="/",o=[];for(let e=0;e<n.length;++e){let a=n[e],l=e===n.length-1,s="/"===i?t:t.slice(i.length)||"/",c=D({path:a.relativePath,caseSensitive:a.caseSensitive,end:l},s);if(!c)return null;Object.assign(r,c.params);let u=a.route;o.push({params:r,pathname:G([i,c.pathname]),pathnameBase:V(G([i,c.pathnameBase])),route:u}),"/"!==c.pathnameBase&&(i=G([i,c.pathnameBase]))}return o}function D(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),k("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],i="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),i+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?i+="\\/*$":""!==e&&"/"!==e&&(i+="(?:(?=\\/|$))"),[new RegExp(i,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),i=t.match(n);if(!i)return null;let o=i[0],a=o.replace(/(.)\/+$/,"$1"),l=i.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";a=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return k(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:o,pathnameBase:a,pattern:e}}function W(e){try{return decodeURI(e)}catch(t){return k(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function U(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function H(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function $(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function Y(e,t,n,r){let i;void 0===r&&(r=!1),"string"==typeof e?i=S(e):(i=_({},e),w(!i.pathname||!i.pathname.includes("?"),H("?","pathname","search",i)),w(!i.pathname||!i.pathname.includes("#"),H("#","pathname","hash",i)),w(!i.search||!i.search.includes("#"),H("#","search","hash",i)));let o,a=""===e||""===i.pathname,l=a?"/":i.pathname;if(r||null==l)o=n;else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;i.pathname=t.join("/")}o=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:i=""}="string"==typeof e?S(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:Q(r),hash:q(i)}}(i,o),c=l&&"/"!==l&&l.endsWith("/"),u=(a||"."===l)&&n.endsWith("/");return s.pathname.endsWith("/")||!c&&!u||(s.pathname+="/"),s}const G=e=>e.join("/").replace(/\/\/+/g,"/"),V=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),Q=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",q=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const K=["post","put","patch","delete"],X=(new Set(K),["get",...K]);function J(){return J=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},J.apply(this,arguments)}new Set(X),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const Z=t.createContext(null),ee=t.createContext(null),te=t.createContext(null),ne=t.createContext(null),re=t.createContext({outlet:null,matches:[],isDataRoute:!1}),ie=t.createContext(null);function oe(){return null!=t.useContext(ne)}function ae(){return oe()||w(!1),t.useContext(ne).location}function le(e){t.useContext(te).static||t.useLayoutEffect(e)}function se(){let{isDataRoute:e}=t.useContext(re);return e?function(){let{router:e}=function(e){let n=t.useContext(Z);return n||w(!1),n}(fe.UseNavigateStable),n=be(ge.UseNavigateStable),r=t.useRef(!1);le((()=>{r.current=!0}));let i=t.useCallback((function(t,i){void 0===i&&(i={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,J({fromRouteId:n},i)))}),[e,n]);return i}():function(){oe()||w(!1);let e=t.useContext(Z),{basename:n,navigator:r}=t.useContext(te),{matches:i}=t.useContext(re),{pathname:o}=ae(),a=JSON.stringify($(i).map((e=>e.pathnameBase))),l=t.useRef(!1);le((()=>{l.current=!0}));let s=t.useCallback((function(t,i){if(void 0===i&&(i={}),!l.current)return;if("number"==typeof t)return void r.go(t);let s=Y(t,JSON.parse(a),o,"path"===i.relative);null==e&&"/"!==n&&(s.pathname="/"===s.pathname?n:G([n,s.pathname])),(i.replace?r.replace:r.push)(s,i.state,i)}),[n,r,a,o,e]);return s}()}function ce(e,n){let{relative:r}=void 0===n?{}:n,{matches:i}=t.useContext(re),{pathname:o}=ae(),a=JSON.stringify($(i).map((e=>e.pathnameBase)));return t.useMemo((()=>Y(e,JSON.parse(a),o,"path"===r)),[e,a,o,r])}function ue(n,r,i){oe()||w(!1);let{navigator:o}=t.useContext(te),{matches:a}=t.useContext(re),l=a[a.length-1],s=l?l.params:{},c=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let u,m=ae();if(r){var p;let e="string"==typeof r?S(r):r;"/"===c||(null==(p=e.pathname)?void 0:p.startsWith(c))||w(!1),u=e}else u=m;let d=u.pathname||"/",h=B(n,{pathname:"/"===c?d:d.slice(c.length)||"/"}),f=function(e,n,r){var i;if(void 0===n&&(n=[]),void 0===r&&(r=null),null==e){var o;if(null==(o=r)||!o.errors)return null;e=r.matches}let a=e,l=null==(i=r)?void 0:i.errors;if(null!=l){let e=a.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||w(!1),a=a.slice(0,Math.min(a.length,e+1))}return a.reduceRight(((e,i,o)=>{let s=i.route.id?null==l?void 0:l[i.route.id]:null,c=null;r&&(c=i.route.errorElement||pe);let u=n.concat(a.slice(0,o+1)),m=()=>{let n;return n=s?c:i.route.Component?t.createElement(i.route.Component,null):i.route.element?i.route.element:e,t.createElement(he,{match:i,routeContext:{outlet:e,matches:u,isDataRoute:null!=r},children:n})};return r&&(i.route.ErrorBoundary||i.route.errorElement||0===o)?t.createElement(de,{location:r.location,revalidation:r.revalidation,component:c,error:s,children:m(),routeContext:{outlet:null,matches:u,isDataRoute:!0}}):m()}),null)}(h&&h.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:G([c,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:G([c,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),a,i);return r&&f?t.createElement(ne.Provider,{value:{location:J({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:e.Pop}},f):f}function me(){let e=function(){var e;let n=t.useContext(ie),r=function(e){let n=t.useContext(ee);return n||w(!1),n}(ge.UseRouteError),i=be(ge.UseRouteError);return n||(null==(e=r.errors)?void 0:e[i])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,i={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:i},r):null,null)}const pe=t.createElement(me,null);class de extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(re.Provider,{value:this.props.routeContext},t.createElement(ie.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function he(e){let{routeContext:n,match:r,children:i}=e,o=t.useContext(Z);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(re.Provider,{value:n},i)}var fe=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(fe||{}),ge=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(ge||{});function be(e){let n=function(e){let n=t.useContext(re);return n||w(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||w(!1),r.route.id}function ye(e){w(!1)}function _e(n){let{basename:r="/",children:i=null,location:o,navigationType:a=e.Pop,navigator:l,static:s=!1}=n;oe()&&w(!1);let c=r.replace(/^\/*/,"/"),u=t.useMemo((()=>({basename:c,navigator:l,static:s})),[c,l,s]);"string"==typeof o&&(o=S(o));let{pathname:m="/",search:p="",hash:d="",state:h=null,key:f="default"}=o,g=t.useMemo((()=>{let e=U(m,c);return null==e?null:{location:{pathname:e,search:p,hash:d,state:h,key:f},navigationType:a}}),[c,m,p,d,h,f,a]);return null==g?null:t.createElement(te.Provider,{value:u},t.createElement(ne.Provider,{children:i,value:g}))}function ve(e){let{children:t,location:n}=e;return ue(we(t),n)}function we(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,i)=>{if(!t.isValidElement(e))return;let o=[...n,i];if(e.type===t.Fragment)return void r.push.apply(r,we(e.props.children,o));e.type!==ye&&w(!1),e.props.index&&e.props.children&&w(!1);let a={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(a.children=we(e.props.children,o)),r.push(a)})),r}function ke(){return ke=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ke.apply(this,arguments)}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const xe=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],Ce=n.startTransition;function Ae(n){let{basename:r,children:i,future:o,window:a}=n,l=t.useRef();null==l.current&&(l.current=function(t){return void 0===t&&(t={}),function(t,n,r,i){void 0===i&&(i={});let{window:o=document.defaultView,v5Compat:a=!1}=i,l=o.history,s=e.Pop,c=null,u=m();function m(){return(l.state||{idx:null}).idx}function p(){s=e.Pop;let t=m(),n=null==t?null:t-u;u=t,c&&c({action:s,location:h.location,delta:n})}function d(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:A(e);return w(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==u&&(u=0,l.replaceState(_({},l.state,{idx:u}),""));let h={get action(){return s},get location(){return t(o,l)},listen(e){if(c)throw new Error("A history only accepts one active listener");return o.addEventListener(v,p),c=e,()=>{o.removeEventListener(v,p),c=null}},createHref:e=>n(o,e),createURL:d,encodeLocation(e){let t=d(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){s=e.Push;let i=C(h.location,t,n);r&&r(i,t),u=m()+1;let p=x(i,u),d=h.createHref(i);try{l.pushState(p,"",d)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(d)}a&&c&&c({action:s,location:h.location,delta:1})},replace:function(t,n){s=e.Replace;let i=C(h.location,t,n);r&&r(i,t),u=m();let o=x(i,u),p=h.createHref(i);l.replaceState(o,"",p),a&&c&&c({action:s,location:h.location,delta:0})},go:e=>l.go(e)};return h}((function(e,t){let{pathname:n="/",search:r="",hash:i=""}=S(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),C("",{pathname:n,search:r,hash:i},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:A(t))}),(function(e,t){k("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),t)}({window:a,v5Compat:!0}));let s=l.current,[c,u]=t.useState({action:s.action,location:s.location}),{v7_startTransition:m}=o||{},p=t.useCallback((e=>{m&&Ce?Ce((()=>u(e))):u(e)}),[u,m]);return t.useLayoutEffect((()=>s.listen(p)),[s,p]),t.createElement(_e,{basename:r,children:i,location:c.location,navigationType:c.action,navigator:s})}const Se="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,Ee=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Be=t.forwardRef((function(e,n){let r,{onClick:i,relative:o,reloadDocument:a,replace:l,state:s,target:c,to:u,preventScrollReset:m,unstable_viewTransition:p}=e,d=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,xe),{basename:h}=t.useContext(te),f=!1;if("string"==typeof u&&Ee.test(u)&&(r=u,Se))try{let e=new URL(window.location.href),t=u.startsWith("//")?new URL(e.protocol+u):new URL(u),n=U(t.pathname,h);t.origin===e.origin&&null!=n?u=n+t.search+t.hash:f=!0}catch(e){}let g=function(e,n){let{relative:r}=void 0===n?{}:n;oe()||w(!1);let{basename:i,navigator:o}=t.useContext(te),{hash:a,pathname:l,search:s}=ce(e,{relative:r}),c=l;return"/"!==i&&(c="/"===l?i:G([i,l])),o.createHref({pathname:c,search:s,hash:a})}(u,{relative:o}),b=function(e,n){let{target:r,replace:i,state:o,preventScrollReset:a,relative:l,unstable_viewTransition:s}=void 0===n?{}:n,c=se(),u=ae(),m=ce(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==i?i:A(u)===A(m);c(e,{replace:n,state:o,preventScrollReset:a,relative:l,unstable_viewTransition:s})}}),[u,c,m,i,o,r,e,a,l,s])}(u,{replace:l,state:s,target:c,preventScrollReset:m,relative:o,unstable_viewTransition:p});return t.createElement("a",ke({},d,{href:r||g,onClick:f||a?i:function(e){i&&i(e),e.defaultPrevented||b(e)},ref:n,target:c}))}));var ze,Oe;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(ze||(ze={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Oe||(Oe={}));const Te=JSON.parse('{"R":[{"name":"Hydrogen","appearance":"colorless gas","atomic_mass":1.008,"boil":20.271,"category":"diatomic nonmetal","density":0.08988,"discovered_by":"Henry Cavendish","melt":13.99,"molar_heat":28.836,"named_by":"Antoine Lavoisier","number":1,"period":1,"group":1,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Hydrogen","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_001_hydrogen/element_001_hydrogen_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_001_hydrogen/element_001_hydrogen.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Hydrogen_Spectra.jpg","summary":"Hydrogen is a chemical element with chemical symbol H and atomic number 1. With an atomic weight of 1.00794 u, hydrogen is the lightest element on the periodic table. Its monatomic form (H) is the most abundant chemical substance in the Universe, constituting roughly 75% of all baryonic mass.","symbol":"H","xpos":1,"ypos":1,"wxpos":1,"wypos":1,"shells":[1],"electron_configuration":"1s1","electron_configuration_semantic":"1s1","electron_affinity":72.769,"electronegativity_pauling":2.2,"ionization_energies":[1312],"cpk-hex":"ffffff","image":{"title":"Vial of glowing ultrapure hydrogen, H2. Original size in cm: 1 x 5","url":"https://upload.wikimedia.org/wikipedia/commons/d/d9/Hydrogenglow.jpg","attribution":"User:Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/hydrogen.php"},"block":"s"},{"name":"Helium","appearance":"colorless gas, exhibiting a red-orange glow when placed in a high-voltage electric field","atomic_mass":4.0026022,"boil":4.222,"category":"noble gas","density":0.1786,"discovered_by":"Pierre Janssen","melt":0.95,"molar_heat":null,"named_by":null,"number":2,"period":1,"group":18,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Helium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_002_helium/element_002_helium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_002_helium/element_002_helium.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Helium_spectrum.jpg","summary":"Helium is a chemical element with symbol He and atomic number 2. It is a colorless, odorless, tasteless, non-toxic, inert, monatomic gas that heads the noble gas group in the periodic table. Its boiling and melting points are the lowest among all the elements.","symbol":"He","xpos":18,"ypos":1,"wxpos":32,"wypos":1,"shells":[2],"electron_configuration":"1s2","electron_configuration_semantic":"1s2","electron_affinity":-48,"electronegativity_pauling":null,"ionization_energies":[2372.3,5250.5],"cpk-hex":"d9ffff","image":{"title":"Vial of glowing ultrapure helium. Original size in cm: 1 x 5","url":"https://upload.wikimedia.org/wikipedia/commons/0/00/Helium-glow.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/helium.php"},"block":"s"},{"name":"Lithium","appearance":"silvery-white","atomic_mass":6.94,"boil":1603,"category":"alkali metal","density":0.534,"discovered_by":"Johan August Arfwedson","melt":453.65,"molar_heat":24.86,"named_by":null,"number":3,"period":2,"group":1,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Lithium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_003_lithium/element_003_lithium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_003_lithium/element_003_lithium.glb","spectral_img":null,"summary":"Lithium (from Greek:λίθος lithos, \\"stone\\") is a chemical element with the symbol Li and atomic number 3. It is a soft, silver-white metal belonging to the alkali metal group of chemical elements. Under standard conditions it is the lightest metal and the least dense solid element.","symbol":"Li","xpos":1,"ypos":2,"wxpos":1,"wypos":2,"shells":[2,1],"electron_configuration":"1s2 2s1","electron_configuration_semantic":"[He] 2s1","electron_affinity":59.6326,"electronegativity_pauling":0.98,"ionization_energies":[520.2,7298.1,11815],"cpk-hex":"cc80ff","image":{"title":"0.5 Grams Lithium under Argon. Original size of the largest piece in cm: 0.3 x 4","url":"https://upload.wikimedia.org/wikipedia/commons/e/e2/0.5_grams_lithium_under_argon.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/lithium.php"},"block":"s"},{"name":"Beryllium","appearance":"white-gray metallic","atomic_mass":9.01218315,"boil":2742,"category":"alkaline earth metal","density":1.85,"discovered_by":"Louis Nicolas Vauquelin","melt":1560,"molar_heat":16.443,"named_by":null,"number":4,"period":2,"group":2,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Beryllium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_004_beryllium/element_004_beryllium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_004_beryllium/element_004_beryllium.glb","spectral_img":null,"summary":"Beryllium is a chemical element with symbol Be and atomic number 4. It is created through stellar nucleosynthesis and is a relatively rare element in the universe. It is a divalent element which occurs naturally only in combination with other elements in minerals.","symbol":"Be","xpos":2,"ypos":2,"wxpos":2,"wypos":2,"shells":[2,2],"electron_configuration":"1s2 2s2","electron_configuration_semantic":"[He] 2s2","electron_affinity":-48,"electronegativity_pauling":1.57,"ionization_energies":[899.5,1757.1,14848.7,21006.6],"cpk-hex":"c2ff00","image":{"title":"Pure Beryllium bead, 2.5 grams. Original size in cm: 1 x 1.5","url":"https://upload.wikimedia.org/wikipedia/commons/e/e2/Beryllium_%28Be%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/beryllium.php"},"block":"s"},{"name":"Boron","appearance":"black-brown","atomic_mass":10.81,"boil":4200,"category":"metalloid","density":2.08,"discovered_by":"Joseph Louis Gay-Lussac","melt":2349,"molar_heat":11.087,"named_by":null,"number":5,"period":2,"group":13,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Boron","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_005_boron/element_005_boron_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_005_boron/element_005_boron.glb","spectral_img":null,"summary":"Boron is a metalloid chemical element with symbol B and atomic number 5. Produced entirely by cosmic ray spallation and supernovae and not by stellar nucleosynthesis, it is a low-abundance element in both the Solar system and the Earth\'s crust. Boron is concentrated on Earth by the water-solubility of its more common naturally occurring compounds, the borate minerals.","symbol":"B","xpos":13,"ypos":2,"wxpos":27,"wypos":2,"shells":[2,3],"electron_configuration":"1s2 2s2 2p1","electron_configuration_semantic":"[He] 2s2 2p1","electron_affinity":26.989,"electronegativity_pauling":2.04,"ionization_energies":[800.6,2427.1,3659.7,25025.8,32826.7],"cpk-hex":"ffb5b5","image":{"title":"Pure Crystalline Boron, front and back side. Original size in cm: 2 x 3","url":"https://upload.wikimedia.org/wikipedia/commons/a/a2/Boron.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/boron.php"},"block":"p"},{"name":"Carbon","appearance":null,"atomic_mass":12.011,"boil":null,"category":"polyatomic nonmetal","density":1.821,"discovered_by":"Ancient Egypt","melt":null,"molar_heat":8.517,"named_by":null,"number":6,"period":2,"group":14,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Carbon","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_006_carbon/element_006_carbon_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_006_carbon/element_006_carbon.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Carbon_Spectra.jpg","summary":"Carbon (from Latin:carbo \\"coal\\") is a chemical element with symbol C and atomic number 6. On the periodic table, it is the first (row 2) of six elements in column (group) 14, which have in common the composition of their outer electron shell. It is nonmetallic and tetravalent—making four electrons available to form covalent chemical bonds.","symbol":"C","xpos":14,"ypos":2,"wxpos":28,"wypos":2,"shells":[2,4],"electron_configuration":"1s2 2s2 2p2","electron_configuration_semantic":"[He] 2s2 2p2","electron_affinity":121.7763,"electronegativity_pauling":2.55,"ionization_energies":[1086.5,2352.6,4620.5,6222.7,37831,47277],"cpk-hex":"909090","image":{"title":"Element 6 - Carbon","url":"https://upload.wikimedia.org/wikipedia/commons/6/68/Pure_Carbon.png","attribution":"Texas Lane, CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0>, via Wikimedia Commons"},"block":"p"},{"name":"Nitrogen","appearance":"colorless gas, liquid or solid","atomic_mass":14.007,"boil":77.355,"category":"diatomic nonmetal","density":1.251,"discovered_by":"Daniel Rutherford","melt":63.15,"molar_heat":null,"named_by":"Jean-Antoine Chaptal","number":7,"period":2,"group":15,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Nitrogen","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_007_nitrogen/element_007_nitrogen_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_007_nitrogen/element_007_nitrogen.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Nitrogen_Spectra.jpg","summary":"Nitrogen is a chemical element with symbol N and atomic number 7. It is the lightest pnictogen and at room temperature, it is a transparent, odorless diatomic gas. Nitrogen is a common element in the universe, estimated at about seventh in total abundance in the Milky Way and the Solar System.","symbol":"N","xpos":15,"ypos":2,"wxpos":29,"wypos":2,"shells":[2,5],"electron_configuration":"1s2 2s2 2p3","electron_configuration_semantic":"[He] 2s2 2p3","electron_affinity":-6.8,"electronegativity_pauling":3.04,"ionization_energies":[1402.3,2856,4578.1,7475,9444.9,53266.6,64360],"cpk-hex":"3050f8","image":{"title":"Vial of Glowing Ultrapure Nitrogen, N2. Original size in cm: 1 x 5","url":"https://upload.wikimedia.org/wikipedia/commons/2/2d/Nitrogen-glow.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/nitrogen.php"},"block":"p"},{"name":"Oxygen","appearance":null,"atomic_mass":15.999,"boil":90.188,"category":"diatomic nonmetal","density":1.429,"discovered_by":"Carl Wilhelm Scheele","melt":54.36,"molar_heat":null,"named_by":"Antoine Lavoisier","number":8,"period":2,"group":16,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Oxygen","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_008_oxygen/element_008_oxygen_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_008_oxygen/element_008_oxygen.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Oxygen_spectre.jpg","summary":"Oxygen is a chemical element with symbol O and atomic number 8. It is a member of the chalcogen group on the periodic table and is a highly reactive nonmetal and oxidizing agent that readily forms compounds (notably oxides) with most elements. By mass, oxygen is the third-most abundant element in the universe, after hydrogen and helium.","symbol":"O","xpos":16,"ypos":2,"wxpos":30,"wypos":2,"shells":[2,6],"electron_configuration":"1s2 2s2 2p4","electron_configuration_semantic":"[He] 2s2 2p4","electron_affinity":140.976,"electronegativity_pauling":3.44,"ionization_energies":[1313.9,3388.3,5300.5,7469.2,10989.5,13326.5,71330,84078],"cpk-hex":"ff0d0d","image":{"title":"Liquid Oxygen in a Beaker","url":"https://upload.wikimedia.org/wikipedia/commons/a/a0/Liquid_oxygen_in_a_beaker_%28cropped_and_retouched%29.jpg","attribution":"Staff Sgt. Nika Glover, U.S. Air Force, Public domain, via Wikimedia Commons"},"block":"p"},{"name":"Fluorine","appearance":null,"atomic_mass":18.9984031636,"boil":85.03,"category":"diatomic nonmetal","density":1.696,"discovered_by":"André-Marie Ampère","melt":53.48,"molar_heat":null,"named_by":"Humphry Davy","number":9,"period":2,"group":17,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Fluorine","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_009_fluorine/element_009_fluorine_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_009_fluorine/element_009_fluorine.glb","spectral_img":null,"summary":"Fluorine is a chemical element with symbol F and atomic number 9. It is the lightest halogen and exists as a highly toxic pale yellow diatomic gas at standard conditions. As the most electronegative element, it is extremely reactive:almost all other elements, including some noble gases, form compounds with fluorine.","symbol":"F","xpos":17,"ypos":2,"wxpos":31,"wypos":2,"shells":[2,7],"electron_configuration":"1s2 2s2 2p5","electron_configuration_semantic":"[He] 2s2 2p5","electron_affinity":328.1649,"electronegativity_pauling":3.98,"ionization_energies":[1681,3374.2,6050.4,8407.7,11022.7,15164.1,17868,92038.1,106434.3],"cpk-hex":"90e050","image":{"title":"Liquid Fluorine at -196°C","url":"https://upload.wikimedia.org/wikipedia/commons/2/2c/Fluoro_liquido_a_-196%C2%B0C_1.jpg","attribution":"Fulvio314, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons"},"block":"p"},{"name":"Neon","appearance":"colorless gas exhibiting an orange-red glow when placed in a high voltage electric field","atomic_mass":20.17976,"boil":27.104,"category":"noble gas","density":0.9002,"discovered_by":"Morris Travers","melt":24.56,"molar_heat":null,"named_by":null,"number":10,"period":2,"group":18,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Neon","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_010_neon/element_010_neon_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_010_neon/element_010_neon.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Neon_spectra.jpg","summary":"Neon is a chemical element with symbol Ne and atomic number 10. It is in group 18 (noble gases) of the periodic table. Neon is a colorless, odorless, inert monatomic gas under standard conditions, with about two-thirds the density of air.","symbol":"Ne","xpos":18,"ypos":2,"wxpos":32,"wypos":2,"shells":[2,8],"electron_configuration":"1s2 2s2 2p6","electron_configuration_semantic":"[He] 2s2 2p6","electron_affinity":-116,"electronegativity_pauling":null,"ionization_energies":[2080.7,3952.3,6122,9371,12177,15238,19999,23069.5,115379.5,131432],"cpk-hex":"b3e3f5","image":{"title":"Vial of Glowing Ultrapure neon. Original size in cm: 1 x 5","url":"https://upload.wikimedia.org/wikipedia/commons/f/f8/Neon-glow.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/neon.php"},"block":"p"},{"name":"Sodium","appearance":"silvery white metallic","atomic_mass":22.989769282,"boil":1156.09,"category":"alkali metal","density":0.968,"discovered_by":"Humphry Davy","melt":370.944,"molar_heat":28.23,"named_by":null,"number":11,"period":3,"group":1,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Sodium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_011_sodium/element_011_sodium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_011_sodium/element_011_sodium.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Sodium_Spectra.jpg","summary":"Sodium /ˈsoʊdiəm/ is a chemical element with symbol Na (from Ancient Greek Νάτριο) and atomic number 11. It is a soft, silver-white, highly reactive metal. In the Periodic table it is in column 1 (alkali metals), and shares with the other six elements in that column that it has a single electron in its outer shell, which it readily donates, creating a positively charged atom - a cation.","symbol":"Na","xpos":1,"ypos":3,"wxpos":1,"wypos":3,"shells":[2,8,1],"electron_configuration":"1s2 2s2 2p6 3s1","electron_configuration_semantic":"[Ne] 3s1","electron_affinity":52.867,"electronegativity_pauling":0.93,"ionization_energies":[495.8,4562,6910.3,9543,13354,16613,20117,25496,28932,141362,159076],"cpk-hex":"ab5cf2","image":{"title":"Na (Sodium) Metal","url":"https://upload.wikimedia.org/wikipedia/commons/2/27/Na_%28Sodium%29.jpg","attribution":"The original uploader was Dnn87 at English Wikipedia., CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons"},"block":"s"},{"name":"Magnesium","appearance":"shiny grey solid","atomic_mass":24.305,"boil":1363,"category":"alkaline earth metal","density":1.738,"discovered_by":"Joseph Black","melt":923,"molar_heat":24.869,"named_by":null,"number":12,"period":3,"group":2,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Magnesium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_012_magnesium/element_012_magnesium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_012_magnesium/element_012_magnesium.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Magnesium_Spectra.jpg","summary":"Magnesium is a chemical element with symbol Mg and atomic number 12. It is a shiny gray solid which bears a close physical resemblance to the other five elements in the second column (Group 2, or alkaline earth metals) of the periodic table:they each have the same electron configuration in their outer electron shell producing a similar crystal structure. Magnesium is the ninth most abundant element in the universe.","symbol":"Mg","xpos":2,"ypos":3,"wxpos":2,"wypos":3,"shells":[2,8,2],"electron_configuration":"1s2 2s2 2p6 3s2","electron_configuration_semantic":"[Ne] 3s2","electron_affinity":-40,"electronegativity_pauling":1.31,"ionization_energies":[737.7,1450.7,7732.7,10542.5,13630,18020,21711,25661,31653,35458,169988,189368],"cpk-hex":"8aff00","image":{"title":"Magnesium crystals","url":"https://upload.wikimedia.org/wikipedia/commons/3/3f/Magnesium_crystals.jpg","attribution":"Warut Roonguthai, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons"},"block":"s"},{"name":"Aluminium","appearance":"silvery gray metallic","atomic_mass":26.98153857,"boil":2743,"category":"post-transition metal","density":2.7,"discovered_by":null,"melt":933.47,"molar_heat":24.2,"named_by":"Humphry Davy","number":13,"period":3,"group":13,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Aluminium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_013_aluminum/element_013_aluminum_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_013_aluminum/element_013_aluminum.glb","spectral_img":null,"summary":"Aluminium (or aluminum; see different endings) is a chemical element in the boron group with symbol Al and atomic number 13. It is a silvery-white, soft, nonmagnetic, ductile metal. Aluminium is the third most abundant element (after oxygen and silicon), and the most abundant metal, in the Earth\'s crust.","symbol":"Al","xpos":13,"ypos":3,"wxpos":27,"wypos":3,"shells":[2,8,3],"electron_configuration":"1s2 2s2 2p6 3s2 3p1","electron_configuration_semantic":"[Ne] 3s2 3p1","electron_affinity":41.762,"electronegativity_pauling":1.61,"ionization_energies":[577.5,1816.7,2744.8,11577,14842,18379,23326,27465,31853,38473,42647,201266,222316],"cpk-hex":"bfa6a6","image":{"title":"Pure aluminium foil. Original size in cm: 5 x 5","url":"https://upload.wikimedia.org/wikipedia/commons/3/3e/Aluminium.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/aluminium.php "},"block":"p"},{"name":"Silicon","appearance":"crystalline, reflective with bluish-tinged faces","atomic_mass":28.085,"boil":3538,"category":"metalloid","density":2.329,"discovered_by":"Jöns Jacob Berzelius","melt":1687,"molar_heat":19.789,"named_by":"Thomas Thomson (chemist)","number":14,"period":3,"group":14,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Silicon","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_014_silicon/element_014_silicon_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_014_silicon/element_014_silicon.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Silicon_Spectra.jpg","summary":"Silicon is a chemical element with symbol Si and atomic number 14. It is a tetravalent metalloid, more reactive than germanium, the metalloid directly below it in the table. Controversy about silicon\'s character dates to its discovery.","symbol":"Si","xpos":14,"ypos":3,"wxpos":28,"wypos":3,"shells":[2,8,4],"electron_configuration":"1s2 2s2 2p6 3s2 3p2","electron_configuration_semantic":"[Ne] 3s2 3p2","electron_affinity":134.0684,"electronegativity_pauling":1.9,"ionization_energies":[786.5,1577.1,3231.6,4355.5,16091,19805,23780,29287,33878,38726,45962,50502,235196,257923],"cpk-hex":"f0c8a0","image":{"title":"Chunk of Ultrapure Silicon, 2 x 2 cm","url":"https://upload.wikimedia.org/wikipedia/commons/2/2c/Silicon.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/silicon.php"},"block":"p"},{"name":"Phosphorus","appearance":"colourless, waxy white, yellow, scarlet, red, violet, black","atomic_mass":30.9737619985,"boil":null,"category":"polyatomic nonmetal","density":1.823,"discovered_by":"Hennig Brand","melt":null,"molar_heat":23.824,"named_by":null,"number":15,"period":3,"group":15,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Phosphorus","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_015_phosphorus/element_015_phosphorus_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_015_phosphorus/element_015_phosphorus.glb","spectral_img":null,"summary":"Phosphorus is a chemical element with symbol P and atomic number 15. As an element, phosphorus exists in two major forms—white phosphorus and red phosphorus—but due to its high reactivity, phosphorus is never found as a free element on Earth. Instead phosphorus-containing minerals are almost always present in their maximally oxidised state, as inorganic phosphate rocks.","symbol":"P","xpos":15,"ypos":3,"wxpos":29,"wypos":3,"shells":[2,8,5],"electron_configuration":"1s2 2s2 2p6 3s2 3p3","electron_configuration_semantic":"[Ne] 3s2 3p3","electron_affinity":72.037,"electronegativity_pauling":2.19,"ionization_energies":[1011.8,1907,2914.1,4963.6,6273.9,21267,25431,29872,35905,40950,46261,54110,59024,271791,296195],"cpk-hex":"ff8000","image":{"title":"Purple Phosphorus","url":"https://upload.wikimedia.org/wikipedia/commons/6/6d/Phosphorus-purple.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/phosphorus.php"},"block":"p"},{"name":"Sulfur","appearance":"lemon yellow sintered microcrystals","atomic_mass":32.06,"boil":717.8,"category":"polyatomic nonmetal","density":2.07,"discovered_by":"Ancient china","melt":388.36,"molar_heat":22.75,"named_by":null,"number":16,"period":3,"group":16,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Sulfur","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_016_sulfur/element_016_sulfur_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_016_sulfur/element_016_sulfur.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Sulfur_Spectrum.jpg","summary":"Sulfur or sulphur (see spelling differences) is a chemical element with symbol S and atomic number 16. It is an abundant, multivalent non-metal. Under normal conditions, sulfur atoms form cyclic octatomic molecules with chemical formula S8.","symbol":"S","xpos":16,"ypos":3,"wxpos":30,"wypos":3,"shells":[2,8,6],"electron_configuration":"1s2 2s2 2p6 3s2 3p4","electron_configuration_semantic":"[Ne] 3s2 3p4","electron_affinity":200.4101,"electronegativity_pauling":2.58,"ionization_energies":[999.6,2252,3357,4556,7004.3,8495.8,27107,31719,36621,43177,48710,54460,62930,68216,311048,337138],"cpk-hex":"ffff30","image":{"title":"Native Sulfur From Russia","url":"https://upload.wikimedia.org/wikipedia/commons/2/23/Native_sulfur_%28Vodinskoe_Deposit%3B_quarry_near_Samara%2C_Russia%29_9.jpg","attribution":"James St. John, CC BY 2.0 <https://creativecommons.org/licenses/by/2.0>, via Wikimedia Commons"},"block":"p"},{"name":"Chlorine","appearance":"pale yellow-green gas","atomic_mass":35.45,"boil":239.11,"category":"diatomic nonmetal","density":3.2,"discovered_by":"Carl Wilhelm Scheele","melt":171.6,"molar_heat":null,"named_by":null,"number":17,"period":3,"group":17,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Chlorine","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_017_chlorine/element_017_chlorine_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_017_chlorine/element_017_chlorine.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Chlorine_spectrum_visible.png","summary":"Chlorine is a chemical element with symbol Cl and atomic number 17. It also has a relative atomic mass of 35.5. Chlorine is in the halogen group (17) and is the second lightest halogen following fluorine.","symbol":"Cl","xpos":17,"ypos":3,"wxpos":31,"wypos":3,"shells":[2,8,7],"electron_configuration":"1s2 2s2 2p6 3s2 3p5","electron_configuration_semantic":"[Ne] 3s2 3p5","electron_affinity":348.575,"electronegativity_pauling":3.16,"ionization_energies":[1251.2,2298,3822,5158.6,6542,9362,11018,33604,38600,43961,51068,57119,63363,72341,78095,352994,380760],"cpk-hex":"1ff01f","image":{"title":"A Sample of Chlorine","url":"https://upload.wikimedia.org/wikipedia/commons/9/9a/Chlorine-sample-flip.jpg","attribution":"Benjah-bmm27, Public domain, via Wikimedia Commons"},"block":"p"},{"name":"Argon","appearance":"colorless gas exhibiting a lilac/violet glow when placed in a high voltage electric field","atomic_mass":39.9481,"boil":87.302,"category":"noble gas","density":1.784,"discovered_by":"Lord Rayleigh","melt":83.81,"molar_heat":null,"named_by":null,"number":18,"period":3,"group":18,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Argon","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_018_argon/element_018_argon_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_018_argon/element_018_argon.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Argon_Spectrum.png","summary":"Argon is a chemical element with symbol Ar and atomic number 18. It is in group 18 of the periodic table and is a noble gas. Argon is the third most common gas in the Earth\'s atmosphere, at 0.934% (9,340 ppmv), making it over twice as abundant as the next most common atmospheric gas, water vapor (which averages about 4000 ppmv, but varies greatly), and 23 times as abundant as the next most common non-condensing atmospheric gas, carbon dioxide (400 ppmv), and more than 500 times as abundant as the next most common noble gas, neon (18 ppmv).","symbol":"Ar","xpos":18,"ypos":3,"wxpos":32,"wypos":3,"shells":[2,8,8],"electron_configuration":"1s2 2s2 2p6 3s2 3p6","electron_configuration_semantic":"[Ne] 3s2 3p6","electron_affinity":-96,"electronegativity_pauling":null,"ionization_energies":[1520.6,2665.8,3931,5771,7238,8781,11995,13842,40760,46186,52002,59653,66199,72918,82473,88576,397605,427066],"cpk-hex":"80d1e3","image":{"title":"Vial of glowing ultrapure argon. Original size in cm: 1 x 5","url":"https://upload.wikimedia.org/wikipedia/commons/5/53/Argon-glow.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/argon.php"},"block":"p"},{"name":"Potassium","appearance":"silvery gray","atomic_mass":39.09831,"boil":1032,"category":"alkali metal","density":0.862,"discovered_by":"Humphry Davy","melt":336.7,"molar_heat":29.6,"named_by":null,"number":19,"period":4,"group":1,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Potassium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_019_potassium/element_019_potassium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_019_potassium/element_019_potassium.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Potassium_Spectrum.jpg","summary":"Potassium is a chemical element with symbol K (derived from Neo-Latin, kalium) and atomic number 19. It was first isolated from potash, the ashes of plants, from which its name is derived. In the Periodic table, potassium is one of seven elements in column (group) 1 (alkali metals):they all have a single valence electron in their outer electron shell, which they readily give up to create an atom with a positive charge - a cation, and combine with anions to form salts.","symbol":"K","xpos":1,"ypos":4,"wxpos":1,"wypos":4,"shells":[2,8,8,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s1","electron_configuration_semantic":"[Ar] 4s1","electron_affinity":48.383,"electronegativity_pauling":0.82,"ionization_energies":[418.8,3052,4420,5877,7975,9590,11343,14944,16963.7,48610,54490,60730,68950,75900,83080,93400,99710,444880,476063],"cpk-hex":"8f40d4","image":{"title":"Potassium Pieces","url":"https://upload.wikimedia.org/wikipedia/commons/b/b3/Potassium.JPG","attribution":"Dnn87, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons"},"block":"s"},{"name":"Calcium","appearance":null,"atomic_mass":40.0784,"boil":1757,"category":"alkaline earth metal","density":1.55,"discovered_by":"Humphry Davy","melt":1115,"molar_heat":25.929,"named_by":null,"number":20,"period":4,"group":2,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Calcium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_020_calcium/element_020_calcium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_020_calcium/element_020_calcium.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Calcium_Spectrum.png","summary":"Calcium is a chemical element with symbol Ca and atomic number 20. Calcium is a soft gray alkaline earth metal, fifth-most-abundant element by mass in the Earth\'s crust. The ion Ca2+ is also the fifth-most-abundant dissolved ion in seawater by both molarity and mass, after sodium, chloride, magnesium, and sulfate.","symbol":"Ca","xpos":2,"ypos":4,"wxpos":2,"wypos":4,"shells":[2,8,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2","electron_configuration_semantic":"[Ar] 4s2","electron_affinity":2.37,"electronegativity_pauling":1,"ionization_energies":[589.8,1145.4,4912.4,6491,8153,10496,12270,14206,18191,20385,57110,63410,70110,78890,86310,94000,104900,111711,494850,527762],"cpk-hex":"3dff00","image":{"title":"Calcium Grains, grain size about 1 mm","url":"https://upload.wikimedia.org/wikipedia/commons/7/72/Calcium.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/calcium.php"},"block":"s"},{"name":"Scandium","appearance":"silvery white","atomic_mass":44.9559085,"boil":3109,"category":"transition metal","density":2.985,"discovered_by":"Lars Fredrik Nilson","melt":1814,"molar_heat":25.52,"named_by":null,"number":21,"period":4,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Scandium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_021_scandium/element_021_scandium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_021_scandium/element_021_scandium.glb","spectral_img":null,"summary":"Scandium is a chemical element with symbol Sc and atomic number 21. A silvery-white metallic d-block element, it has historically been sometimes classified as a rare earth element, together with yttrium and the lanthanoids. It was discovered in 1879 by spectral analysis of the minerals euxenite and gadolinite from Scandinavia.","symbol":"Sc","xpos":3,"ypos":4,"wxpos":17,"wypos":4,"shells":[2,8,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d1","electron_configuration_semantic":"[Ar] 3d1 4s2","electron_affinity":18,"electronegativity_pauling":1.36,"ionization_energies":[633.1,1235,2388.6,7090.6,8843,10679,13310,15250,17370,21726,24102,66320,73010,80160,89490,97400,105600,117000,124270,547530,582163],"cpk-hex":"e6e6e6","image":{"title":"Crystal of Scandium. About 1g","url":"https://upload.wikimedia.org/wikipedia/commons/f/f5/Scandium%2C_Sc.jpg","attribution":"JanDerChemiker, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons"},"block":"d"},{"name":"Titanium","appearance":"silvery grey-white metallic","atomic_mass":47.8671,"boil":3560,"category":"transition metal","density":4.506,"discovered_by":"William Gregor","melt":1941,"molar_heat":25.06,"named_by":"Martin Heinrich Klaproth","number":22,"period":4,"group":4,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Titanium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_022_titanium/element_022_titanium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_022_titanium/element_022_titanium.glb","spectral_img":null,"summary":"Titanium is a chemical element with symbol Ti and atomic number 22. It is a lustrous transition metal with a silver color, low density and high strength. It is highly resistant to corrosion in sea water, aqua regia and chlorine.","symbol":"Ti","xpos":4,"ypos":4,"wxpos":18,"wypos":4,"shells":[2,8,10,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d2","electron_configuration_semantic":"[Ar] 3d2 4s2","electron_affinity":7.289,"electronegativity_pauling":1.54,"ionization_energies":[658.8,1309.8,2652.5,4174.6,9581,11533,13590,16440,18530,20833,25575,28125,76015,83280,90880,100700,109100,117800,129900,137530,602930,639294],"cpk-hex":"bfc2c7","image":{"title":"Titanium Crystal made with the van Arkel-de Booer Process. 87 grams, Orginial size in cm: 2.5 x 4","url":"https://upload.wikimedia.org/wikipedia/commons/e/ec/Titanium.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/titanium.php"},"block":"d"},{"name":"Vanadium","appearance":"blue-silver-grey metal","atomic_mass":50.94151,"boil":3680,"category":"transition metal","density":6,"discovered_by":"Andrés Manuel del Río","melt":2183,"molar_heat":24.89,"named_by":"Isotopes of vanadium","number":23,"period":4,"group":5,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Vanadium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_023_vanadium/element_023_vanadium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_023_vanadium/element_023_vanadium.glb","spectral_img":null,"summary":"Vanadium is a chemical element with symbol V and atomic number 23. It is a hard, silvery grey, ductile and malleable transition metal. The element is found only in chemically combined form in nature, but once isolated artificially, the formation of an oxide layer stabilizes the free metal somewhat against further oxidation.","symbol":"V","xpos":5,"ypos":4,"wxpos":19,"wypos":4,"shells":[2,8,11,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d3","electron_configuration_semantic":"[Ar] 3d3 4s2","electron_affinity":50.911,"electronegativity_pauling":1.63,"ionization_energies":[650.9,1414,2830,4507,6298.7,12363,14530,16730,19860,22240,24670,29730,32446,86450,94170,102300,112700,121600,130700,143400,151440,661050,699144],"cpk-hex":"a6a6ab","image":{"title":"Pieces of Pure Vanadium with Oxide Layer","url":"https://upload.wikimedia.org/wikipedia/commons/0/0a/Vanadium-pieces.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/vanadium.php"},"block":"d"},{"name":"Chromium","appearance":"silvery metallic","atomic_mass":51.99616,"boil":2944,"category":"transition metal","density":7.19,"discovered_by":"Louis Nicolas Vauquelin","melt":2180,"molar_heat":23.35,"named_by":null,"number":24,"period":4,"group":6,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Chromium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_024_chromium/element_024_chromium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_024_chromium/element_024_chromium.glb","spectral_img":null,"summary":"Chromium is a chemical element with symbol Cr and atomic number 24. It is the first element in Group 6. It is a steely-gray, lustrous, hard and brittle metal which takes a high polish, resists tarnishing, and has a high melting point.","symbol":"Cr","xpos":6,"ypos":4,"wxpos":20,"wypos":4,"shells":[2,8,13,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s1 3d5","electron_configuration_semantic":"[Ar] 3d5 4s1","electron_affinity":65.21,"electronegativity_pauling":1.66,"ionization_energies":[652.9,1590.6,2987,4743,6702,8744.9,15455,17820,20190,23580,26130,28750,34230,37066,97510,105800,114300,125300,134700,144300,157700,166090,721870,761733],"cpk-hex":"8a99c7","image":{"title":"Piece of Chromium Metal","url":"https://upload.wikimedia.org/wikipedia/commons/a/a1/Chromium.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/chromium.php"},"block":"d"},{"name":"Manganese","appearance":"silvery metallic","atomic_mass":54.9380443,"boil":2334,"category":"transition metal","density":7.21,"discovered_by":"Torbern Olof Bergman","melt":1519,"molar_heat":26.32,"named_by":null,"number":25,"period":4,"group":7,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Manganese","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_025_manganese/element_025_manganese_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_025_manganese/element_025_manganese.glb","spectral_img":null,"summary":"Manganese is a chemical element with symbol Mn and atomic number 25. It is not found as a free element in nature; it is often found in combination with iron, and in many minerals. Manganese is a metal with important industrial metal alloy uses, particularly in stainless steels.","symbol":"Mn","xpos":7,"ypos":4,"wxpos":21,"wypos":4,"shells":[2,8,13,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d5","electron_configuration_semantic":"[Ar] 3d5 4s2","electron_affinity":-50,"electronegativity_pauling":1.55,"ionization_energies":[717.3,1509,3248,4940,6990,9220,11500,18770,21400,23960,27590,30330,33150,38880,41987,109480,118100,127100,138600,148500,158600,172500,181380,785450,827067],"cpk-hex":"9c7ac7","image":{"title":"Two Oieces of Manganese Metal","url":"https://upload.wikimedia.org/wikipedia/commons/6/64/Manganese_element.jpg","attribution":"W. Oelen, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons"},"block":"d"},{"name":"Iron","appearance":"lustrous metallic with a grayish tinge","atomic_mass":55.8452,"boil":3134,"category":"transition metal","density":7.874,"discovered_by":"5000 BC","melt":1811,"molar_heat":25.1,"named_by":null,"number":26,"period":4,"group":8,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Iron","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_026_iron/element_026_iron_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_026_iron/element_026_iron.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Iron_Spectrum.jpg","summary":"Iron is a chemical element with symbol Fe (from Latin:ferrum) and atomic number 26. It is a metal in the first transition series. It is by mass the most common element on Earth, forming much of Earth\'s outer and inner core.","symbol":"Fe","xpos":8,"ypos":4,"wxpos":22,"wypos":4,"shells":[2,8,14,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d6","electron_configuration_semantic":"[Ar] 3d6 4s2","electron_affinity":14.785,"electronegativity_pauling":1.83,"ionization_energies":[762.5,1561.9,2957,5290,7240,9560,12060,14580,22540,25290,28000,31920,34830,37840,44100,47206,122200,131000,140500,152600,163000,173600,188100,195200,851800,895161],"cpk-hex":"e06633","image":{"title":"Fragments of an iron meteorite, about 92% iron. Original size of the single pieces in cm: 0.4 - 0.8","url":"https://images-of-elements.com/iron-2.jpg","attribution":"Chemical ELements A Virtual Museum, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0> source: https://images-of-elements.com/iron.php"},"block":"d"},{"name":"Cobalt","appearance":"hard lustrous gray metal","atomic_mass":58.9331944,"boil":3200,"category":"transition metal","density":8.9,"discovered_by":"Georg Brandt","melt":1768,"molar_heat":24.81,"named_by":null,"number":27,"period":4,"group":9,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Cobalt","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_027_cobalt/element_027_cobalt_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_027_cobalt/element_027_cobalt.glb","spectral_img":null,"summary":"Cobalt is a chemical element with symbol Co and atomic number 27. Like nickel, cobalt in the Earth\'s crust is found only in chemically combined form, save for small deposits found in alloys of natural meteoric iron. The free element, produced by reductive smelting, is a hard, lustrous, silver-gray metal.","symbol":"Co","xpos":9,"ypos":4,"wxpos":23,"wypos":4,"shells":[2,8,15,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d7","electron_configuration_semantic":"[Ar] 3d7 4s2","electron_affinity":63.898,"electronegativity_pauling":1.88,"ionization_energies":[760.4,1648,3232,4950,7670,9840,12440,15230,17959,26570,29400,32400,36600,39700,42800,49396,52737,134810,145170,154700,167400,178100,189300,204500,214100,920870,966023],"cpk-hex":"f090a0","image":{"title":"Fractions from a cobalt, 7 and 4 grams. Original size in cm: 2 x 2","url":"https://upload.wikimedia.org/wikipedia/commons/6/62/Cobalt_ore_2.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/cobalt.php"},"block":"d"},{"name":"Nickel","appearance":"lustrous, metallic, and silver with a gold tinge","atomic_mass":58.69344,"boil":3003,"category":"transition metal","density":8.908,"discovered_by":"Axel Fredrik Cronstedt","melt":1728,"molar_heat":26.07,"named_by":null,"number":28,"period":4,"group":10,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Nickel","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_028_nickel/element_028_nickel_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_028_nickel/element_028_nickel.glb","spectral_img":null,"summary":"Nickel is a chemical element with symbol Ni and atomic number 28. It is a silvery-white lustrous metal with a slight golden tinge. Nickel belongs to the transition metals and is hard and ductile.","symbol":"Ni","xpos":10,"ypos":4,"wxpos":24,"wypos":4,"shells":[2,8,16,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d8","electron_configuration_semantic":"[Ar] 3d8 4s2","electron_affinity":111.65,"electronegativity_pauling":1.91,"ionization_energies":[737.1,1753,3395,5300,7339,10400,12800,15600,18600,21670,30970,34000,37100,41500,44800,48100,55101,58570,148700,159000,169400,182700,194000,205600,221400,231490,992718,1039668],"cpk-hex":"50d050","image":{"title":"Nickel Chunk","url":"https://upload.wikimedia.org/wikipedia/commons/5/57/Nickel_chunk.jpg","attribution":"Materialscientist at English Wikipedia, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons"},"block":"d"},{"name":"Copper","appearance":"red-orange metallic luster","atomic_mass":63.5463,"boil":2835,"category":"transition metal","density":8.96,"discovered_by":"Middle East","melt":1357.77,"molar_heat":24.44,"named_by":null,"number":29,"period":4,"group":11,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Copper","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_029_copper/element_029_copper_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_029_copper/element_029_copper.glb","spectral_img":null,"summary":"Copper is a chemical element with symbol Cu (from Latin:cuprum) and atomic number 29. It is a soft, malleable and ductile metal with very high thermal and electrical conductivity. A freshly exposed surface of pure copper has a reddish-orange color.","symbol":"Cu","xpos":11,"ypos":4,"wxpos":25,"wypos":4,"shells":[2,8,18,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s1 3d10","electron_configuration_semantic":"[Ar] 3d10 4s1","electron_affinity":119.235,"electronegativity_pauling":1.9,"ionization_energies":[745.5,1957.9,3555,5536,7700,9900,13400,16000,19200,22400,25600,35600,38700,42000,46700,50200,53700,61100,64702,163700,174100,184900,198800,210500,222700,239100,249660,1067358,1116105],"cpk-hex":"c88033","image":{"title":"Macro of Native Copper about 1 ½ inches (4 cm) in size","url":"https://upload.wikimedia.org/wikipedia/commons/f/f0/NatCopper.jpg","attribution":"Native_Copper_Macro_Digon3.jpg: \'Jonathan Zander (Digon3)\' derivative work: Materialscientist, CC BY-SA 2.5 <https://creativecommons.org/licenses/by-sa/2.5>, via Wikimedia Commons"},"block":"d"},{"name":"Zinc","appearance":"silver-gray","atomic_mass":65.382,"boil":1180,"category":"transition metal","density":7.14,"discovered_by":"India","melt":692.68,"molar_heat":25.47,"named_by":null,"number":30,"period":4,"group":12,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Zinc","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_030_zinc/element_030_zinc_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_030_zinc/element_030_zinc.glb","spectral_img":null,"summary":"Zinc, in commerce also spelter, is a chemical element with symbol Zn and atomic number 30. It is the first element of group 12 of the periodic table. In some respects zinc is chemically similar to magnesium:its ion is of similar size and its only common oxidation state is +2.","symbol":"Zn","xpos":12,"ypos":4,"wxpos":26,"wypos":4,"shells":[2,8,18,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10","electron_configuration_semantic":"[Ar] 3d10 4s2","electron_affinity":-58,"electronegativity_pauling":1.65,"ionization_energies":[906.4,1733.3,3833,5731,7970,10400,12900,16800,19600,23000,26400,29990,40490,43800,47300,52300,55900,59700,67300,71200,179100],"cpk-hex":"7d80b0","image":{"title":"30 grams Zinc, front and back side. Original size in cm: 3","url":"https://upload.wikimedia.org/wikipedia/commons/b/ba/Zinc_%2830_Zn%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/zinc.php"},"block":"d"},{"name":"Gallium","appearance":"silver-white","atomic_mass":69.7231,"boil":2673,"category":"post-transition metal","density":5.91,"discovered_by":"Lecoq de Boisbaudran","melt":302.9146,"molar_heat":25.86,"named_by":null,"number":31,"period":4,"group":13,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Gallium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_031_gallium/element_031_gallium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_031_gallium/element_031_gallium.glb","spectral_img":null,"summary":"Gallium is a chemical element with symbol Ga and atomic number 31. Elemental gallium does not occur in free form in nature, but as the gallium(III) compounds that are in trace amounts in zinc ores and in bauxite. Gallium is a soft, silvery metal, and elemental gallium is a brittle solid at low temperatures, and melts at 29.76 °C (85.57 °F) (slightly above room temperature).","symbol":"Ga","xpos":13,"ypos":4,"wxpos":27,"wypos":4,"shells":[2,8,18,3],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p1","electron_configuration_semantic":"[Ar] 3d10 4s2 4p1","electron_affinity":41,"electronegativity_pauling":1.81,"ionization_energies":[578.8,1979.3,2963,6180],"cpk-hex":"c28f8f","image":{"title":"Solid gallium, fresh and after some time (2 months) at room temperature","url":"https://upload.wikimedia.org/wikipedia/commons/b/b1/Solid_gallium_%28Ga%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/gallium.php"},"block":"p"},{"name":"Germanium","appearance":"grayish-white","atomic_mass":72.6308,"boil":3106,"category":"metalloid","density":5.323,"discovered_by":"Clemens Winkler","melt":1211.4,"molar_heat":23.222,"named_by":null,"number":32,"period":4,"group":14,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Germanium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_032_germanium/element_032_germanium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_032_germanium/element_032_germanium.glb","spectral_img":null,"summary":"Germanium is a chemical element with symbol Ge and atomic number 32. It is a lustrous, hard, grayish-white metalloid in the carbon group, chemically similar to its group neighbors tin and silicon. Purified germanium is a semiconductor, with an appearance most similar to elemental silicon.","symbol":"Ge","xpos":14,"ypos":4,"wxpos":28,"wypos":4,"shells":[2,8,18,4],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p2","electron_configuration_semantic":"[Ar] 3d10 4s2 4p2","electron_affinity":118.9352,"electronegativity_pauling":2.01,"ionization_energies":[762,1537.5,3302.1,4411,9020],"cpk-hex":"668f8f","image":{"title":"12 Grams Polycrystalline Germanium, 2*3 cm","url":"https://upload.wikimedia.org/wikipedia/commons/0/08/Polycrystalline-germanium.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/germanium.php"},"block":"p"},{"name":"Arsenic","appearance":"metallic grey","atomic_mass":74.9215956,"boil":null,"category":"metalloid","density":5.727,"discovered_by":"Bronze Age","melt":null,"molar_heat":24.64,"named_by":null,"number":33,"period":4,"group":15,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Arsenic","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_033_arsenic/element_033_arsenic_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_033_arsenic/element_033_arsenic.glb","spectral_img":null,"summary":"Arsenic is a chemical element with symbol As and atomic number 33. Arsenic occurs in many minerals, usually in conjunction with sulfur and metals, and also as a pure elemental crystal. Arsenic is a metalloid.","symbol":"As","xpos":15,"ypos":4,"wxpos":29,"wypos":4,"shells":[2,8,18,5],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p3","electron_configuration_semantic":"[Ar] 3d10 4s2 4p3","electron_affinity":77.65,"electronegativity_pauling":2.18,"ionization_energies":[947,1798,2735,4837,6043,12310],"cpk-hex":"bd80e3","image":{"title":"Ultrapure Metallic Arsenic under Argon, 1 - 2 grams. Original size of each piece in cm: 0.5 x 1","url":"https://upload.wikimedia.org/wikipedia/commons/3/3b/Arsenic_%2833_As%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/arsenic.php"},"block":"p"},{"name":"Selenium","appearance":"black, red, and gray (not pictured) allotropes","atomic_mass":78.9718,"boil":958,"category":"polyatomic nonmetal","density":4.81,"discovered_by":"Jöns Jakob Berzelius","melt":494,"molar_heat":25.363,"named_by":null,"number":34,"period":4,"group":16,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Selenium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_034_selenium/element_034_selenium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_034_selenium/element_034_selenium.glb","spectral_img":null,"summary":"Selenium is a chemical element with symbol Se and atomic number 34. It is a nonmetal with properties that are intermediate between those of its periodic table column-adjacent chalcogen elements sulfur and tellurium. It rarely occurs in its elemental state in nature, or as pure ore compounds.","symbol":"Se","xpos":16,"ypos":4,"wxpos":30,"wypos":4,"shells":[2,8,18,6],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p4","electron_configuration_semantic":"[Ar] 3d10 4s2 4p4","electron_affinity":194.9587,"electronegativity_pauling":2.55,"ionization_energies":[941,2045,2973.7,4144,6590,7880,14990],"cpk-hex":"ffa100","image":{"title":"Ultrapure Black, Amorphous Selenium, 3 - 4 grams. Original size in cm: 2","url":"https://upload.wikimedia.org/wikipedia/commons/7/7f/Selenium.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/selenium.php"},"block":"p"},{"name":"Bromine","appearance":null,"atomic_mass":79.904,"boil":332,"category":"diatomic nonmetal","density":3.1028,"discovered_by":"Antoine Jérôme Balard","melt":265.8,"molar_heat":null,"named_by":null,"number":35,"period":4,"group":17,"phase":"Liquid","source":"https://en.wikipedia.org/wiki/Bromine","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_035_bromine/element_035_bromine_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_035_bromine/element_035_bromine.glb","spectral_img":null,"summary":"Bromine (from Ancient Greek:βρῶμος, brómos, meaning \\"stench\\") is a chemical element with symbol Br, and atomic number 35. It is a halogen. The element was isolated independently by two chemists, Carl Jacob Löwig and Antoine Jerome Balard, in 1825–1826.","symbol":"Br","xpos":17,"ypos":4,"wxpos":31,"wypos":4,"shells":[2,8,18,7],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p5","electron_configuration_semantic":"[Ar] 3d10 4s2 4p5","electron_affinity":324.537,"electronegativity_pauling":2.96,"ionization_energies":[1139.9,2103,3470,4560,5760,8550,9940,18600],"cpk-hex":"a62929","image":{"title":"99.5 % pure liquid Bromine in a 4 x 1 cm big glass ampoule, cast in acrylic","url":"https://upload.wikimedia.org/wikipedia/commons/8/87/Bromine-ampoule.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/bromine.php"},"block":"p"},{"name":"Krypton","appearance":"colorless gas, exhibiting a whitish glow in a high electric field","atomic_mass":83.7982,"boil":119.93,"category":"noble gas","density":3.749,"discovered_by":"William Ramsay","melt":115.78,"molar_heat":null,"named_by":null,"number":36,"period":4,"group":18,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Krypton","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_036_krypton/element_036_krypton_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_036_krypton/element_036_krypton.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Krypton_Spectrum.jpg","summary":"Krypton (from Greek:κρυπτός kryptos \\"the hidden one\\") is a chemical element with symbol Kr and atomic number 36. It is a member of group 18 (noble gases) elements. A colorless, odorless, tasteless noble gas, krypton occurs in trace amounts in the atmosphere, is isolated by fractionally distilling liquefied air, and is often used with other rare gases in fluorescent lamps.","symbol":"Kr","xpos":18,"ypos":4,"wxpos":32,"wypos":4,"shells":[2,8,18,8],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6","electron_configuration_semantic":"[Ar] 3d10 4s2 4p6","electron_affinity":-96,"electronegativity_pauling":3,"ionization_energies":[1350.8,2350.4,3565,5070,6240,7570,10710,12138,22274,25880,29700,33800,37700,43100,47500,52200,57100,61800,75800,80400,85300,90400,96300,101400,111100,116290,282500,296200,311400,326200],"cpk-hex":"5cb8d1","image":{"title":"Vial of Glowing Ultrapure Krypton. Original size in cm: 1 x 5.","url":"https://upload.wikimedia.org/wikipedia/commons/9/9c/Krypton-glow.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/krypton.php"},"block":"p"},{"name":"Rubidium","appearance":"grey white","atomic_mass":85.46783,"boil":961,"category":"alkali metal","density":1.532,"discovered_by":"Robert Bunsen","melt":312.45,"molar_heat":31.06,"named_by":null,"number":37,"period":5,"group":1,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Rubidium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_037_rubidium/element_037_rubidium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_037_rubidium/element_037_rubidium.glb","spectral_img":null,"summary":"Rubidium is a chemical element with symbol Rb and atomic number 37. Rubidium is a soft, silvery-white metallic element of the alkali metal group, with an atomic mass of 85.4678. Elemental rubidium is highly reactive, with properties similar to those of other alkali metals, such as very rapid oxidation in air.","symbol":"Rb","xpos":1,"ypos":5,"wxpos":1,"wypos":5,"shells":[2,8,18,8,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s1","electron_configuration_semantic":"[Kr] 5s1","electron_affinity":46.884,"electronegativity_pauling":0.82,"ionization_energies":[403,2633,3860,5080,6850,8140,9570,13120,14500,26740],"cpk-hex":"702eb0","image":{"title":"Rubidium Metal Sample","url":"https://upload.wikimedia.org/wikipedia/commons/c/c9/Rb5.JPG","attribution":"Dnn87, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons"},"block":"s"},{"name":"Strontium","appearance":null,"atomic_mass":87.621,"boil":1650,"category":"alkaline earth metal","density":2.64,"discovered_by":"William Cruickshank (chemist)","melt":1050,"molar_heat":26.4,"named_by":null,"number":38,"period":5,"group":2,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Strontium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_038_strontium/element_038_strontium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_038_strontium/element_038_strontium.glb","spectral_img":null,"summary":"Strontium is a chemical element with symbol Sr and atomic number 38. An alkaline earth metal, strontium is a soft silver-white or yellowish metallic element that is highly reactive chemically. The metal turns yellow when it is exposed to air.","symbol":"Sr","xpos":2,"ypos":5,"wxpos":2,"wypos":5,"shells":[2,8,18,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2","electron_configuration_semantic":"[Kr] 5s2","electron_affinity":5.023,"electronegativity_pauling":0.95,"ionization_energies":[549.5,1064.2,4138,5500,6910,8760,10230,11800,15600,17100,31270],"cpk-hex":"00ff00","image":{"title":"Strontium Pieces under Paraffin Oil.","url":"https://upload.wikimedia.org/wikipedia/commons/8/84/Strontium-1.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/strontium.php"},"block":"s"},{"name":"Yttrium","appearance":"silvery white","atomic_mass":88.905842,"boil":3203,"category":"transition metal","density":4.472,"discovered_by":"Johan Gadolin","melt":1799,"molar_heat":26.53,"named_by":null,"number":39,"period":5,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Yttrium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_039_yttrium/element_039_yttrium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_039_yttrium/element_039_yttrium.glb","spectral_img":null,"summary":"Yttrium is a chemical element with symbol Y and atomic number 39. It is a silvery-metallic transition metal chemically similar to the lanthanides and it has often been classified as a \\"rare earth element\\". Yttrium is almost always found combined with the lanthanides in rare earth minerals and is never found in nature as a free element.","symbol":"Y","xpos":3,"ypos":5,"wxpos":17,"wypos":5,"shells":[2,8,18,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d1","electron_configuration_semantic":"[Kr] 4d1 5s2","electron_affinity":29.6,"electronegativity_pauling":1.22,"ionization_energies":[600,1180,1980,5847,7430,8970,11190,12450,14110,18400,19900,36090],"cpk-hex":"94ffff","image":{"title":"6,21g Yttrium, Reinheit mindestens 99%.","url":"https://upload.wikimedia.org/wikipedia/commons/9/90/Piece_of_Yttrium.jpg","attribution":"Jan Anskeit, CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0>, via Wikimedia Commons"},"block":"d"},{"name":"Zirconium","appearance":"silvery white","atomic_mass":91.2242,"boil":4650,"category":"transition metal","density":6.52,"discovered_by":"Martin Heinrich Klaproth","melt":2128,"molar_heat":25.36,"named_by":null,"number":40,"period":5,"group":4,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Zirconium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_040_zirconium/element_040_zirconium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_040_zirconium/element_040_zirconium.glb","spectral_img":null,"summary":"Zirconium is a chemical element with symbol Zr and atomic number 40. The name of zirconium is taken from the name of the mineral zircon, the most important source of zirconium. The word zircon comes from the Persian word zargun زرگون, meaning \\"gold-colored\\".","symbol":"Zr","xpos":4,"ypos":5,"wxpos":18,"wypos":5,"shells":[2,8,18,10,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d2","electron_configuration_semantic":"[Kr] 4d2 5s2","electron_affinity":41.806,"electronegativity_pauling":1.33,"ionization_energies":[640.1,1270,2218,3313,7752,9500],"cpk-hex":"94e0e0","image":{"title":"Two pieces of Zirconium, 1 cm each.","url":"https://upload.wikimedia.org/wikipedia/commons/1/1d/Zirconium-pieces.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/zirconium.php"},"block":"d"},{"name":"Niobium","appearance":"gray metallic, bluish when oxidized","atomic_mass":92.906372,"boil":5017,"category":"transition metal","density":8.57,"discovered_by":"Charles Hatchett","melt":2750,"molar_heat":24.6,"named_by":null,"number":41,"period":5,"group":5,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Niobium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_041_niobium/element_041_niobium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_041_niobium/element_041_niobium.glb","spectral_img":null,"summary":"Niobium, formerly columbium, is a chemical element with symbol Nb (formerly Cb) and atomic number 41. It is a soft, grey, ductile transition metal, which is often found in the pyrochlore mineral, the main commercial source for niobium, and columbite. The name comes from Greek mythology:Niobe, daughter of Tantalus since it is so similar to tantalum.","symbol":"Nb","xpos":5,"ypos":5,"wxpos":19,"wypos":5,"shells":[2,8,18,12,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s1 4d4","electron_configuration_semantic":"[Kr] 4d4 5s1","electron_affinity":88.516,"electronegativity_pauling":1.6,"ionization_energies":[652.1,1380,2416,3700,4877,9847,12100],"cpk-hex":"73c2c9","image":{"title":"Niobium strips","url":"https://upload.wikimedia.org/wikipedia/commons/c/c2/Niobium_strips.JPG","attribution":"Mauro Cateb, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons"},"block":"d"},{"name":"Molybdenum","appearance":"gray metallic","atomic_mass":95.951,"boil":4912,"category":"transition metal","density":10.28,"discovered_by":"Carl Wilhelm Scheele","melt":2896,"molar_heat":24.06,"named_by":null,"number":42,"period":5,"group":6,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Molybdenum","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_042_molybdenum/element_042_molybdenum_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_042_molybdenum/element_042_molybdenum.glb","spectral_img":null,"summary":"Molybdenum is a chemical element with symbol Mo and atomic number 42. The name is from Neo-Latin molybdaenum, from Ancient Greek Μόλυβδος molybdos, meaning lead, since its ores were confused with lead ores. Molybdenum minerals have been known throughout history, but the element was discovered (in the sense of differentiating it as a new entity from the mineral salts of other metals) in 1778 by Carl Wilhelm Scheele.","symbol":"Mo","xpos":6,"ypos":5,"wxpos":20,"wypos":5,"shells":[2,8,18,13,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s1 4d5","electron_configuration_semantic":"[Kr] 4d5 5s1","electron_affinity":72.1,"electronegativity_pauling":2.16,"ionization_energies":[684.3,1560,2618,4480,5257,6640.8,12125,13860,15835,17980,20190,22219,26930,29196,52490,55000,61400,67700,74000,80400,87000,93400,98420,104400,121900,127700,133800,139800,148100,154500],"cpk-hex":"54b5b5","image":{"title":"99.9 Pure Molybdenum Crystal, about 2 x 3 cm, with anodisation color","url":"https://upload.wikimedia.org/wikipedia/commons/f/f0/Molybdenum.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/molybdenum.php"},"block":"d"},{"name":"Technetium","appearance":"shiny gray metal","atomic_mass":98,"boil":4538,"category":"transition metal","density":11,"discovered_by":"Emilio Segrè","melt":2430,"molar_heat":24.27,"named_by":null,"number":43,"period":5,"group":7,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Technetium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_043_technetium/element_043_technetium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_043_technetium/element_043_technetium.glb","spectral_img":null,"summary":"Technetium (/tɛkˈniːʃiəm/) is a chemical element with symbol Tc and atomic number 43. It is the element with the lowest atomic number in the periodic table that has no stable isotopes:every form of it is radioactive. Nearly all technetium is produced synthetically, and only minute amounts are found in nature.","symbol":"Tc","xpos":7,"ypos":5,"wxpos":21,"wypos":5,"shells":[2,8,18,13,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d5","electron_configuration_semantic":"[Kr] 4d5 5s2","electron_affinity":53,"electronegativity_pauling":1.9,"ionization_energies":[702,1470,2850],"cpk-hex":"3b9e9e","image":{"title":"Technetium Sample inside a sealed glass ampoule, filled with argon gas. 6x1 mm goldfoil covered with 99Tc powder (electroplated).","url":"https://upload.wikimedia.org/wikipedia/commons/a/ab/Technetium-sample-cropped.jpg","attribution":"GFDL, CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0>, via Wikimedia Commons"},"block":"d"},{"name":"Ruthenium","appearance":"silvery white metallic","atomic_mass":101.072,"boil":4423,"category":"transition metal","density":12.45,"discovered_by":"Karl Ernst Claus","melt":2607,"molar_heat":24.06,"named_by":null,"number":44,"period":5,"group":8,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Ruthenium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_044_ruthenium/element_044_ruthenium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_044_ruthenium/element_044_ruthenium.glb","spectral_img":null,"summary":"Ruthenium is a chemical element with symbol Ru and atomic number 44. It is a rare transition metal belonging to the platinum group of the periodic table. Like the other metals of the platinum group, ruthenium is inert to most other chemicals.","symbol":"Ru","xpos":8,"ypos":5,"wxpos":22,"wypos":5,"shells":[2,8,18,15,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s1 4d7","electron_configuration_semantic":"[Kr] 4d7 5s1","electron_affinity":100.96,"electronegativity_pauling":2.2,"ionization_energies":[710.2,1620,2747],"cpk-hex":"248f8f","image":{"title":"Ruthenium Crystal, 0.6 grams, 0.6 x 1.3 cm size","url":"https://upload.wikimedia.org/wikipedia/commons/a/a8/Ruthenium_crystal.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/ruthenium.php"},"block":"d"},{"name":"Rhodium","appearance":"silvery white metallic","atomic_mass":102.905502,"boil":3968,"category":"transition metal","density":12.41,"discovered_by":"William Hyde Wollaston","melt":2237,"molar_heat":24.98,"named_by":null,"number":45,"period":5,"group":9,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Rhodium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_045_rhodium/element_045_rhodium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_045_rhodium/element_045_rhodium.glb","spectral_img":null,"summary":"Rhodium is a chemical element with symbol Rh and atomic number 45. It is a rare, silvery-white, hard, and chemically inert transition metal. It is a member of the platinum group.","symbol":"Rh","xpos":9,"ypos":5,"wxpos":23,"wypos":5,"shells":[2,8,18,16,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s1 4d8","electron_configuration_semantic":"[Kr] 4d8 5s1","electron_affinity":110.27,"electronegativity_pauling":2.28,"ionization_energies":[719.7,1740,2997],"cpk-hex":"0a7d8c","image":{"title":"Pure Rhodium Bead, 1 gram. Original size in cm: 0.5","url":"https://upload.wikimedia.org/wikipedia/commons/5/54/Rhodium_%28Rh%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/rhodium.php"},"block":"d"},{"name":"Palladium","appearance":"silvery white","atomic_mass":106.421,"boil":3236,"category":"transition metal","density":12.023,"discovered_by":"William Hyde Wollaston","melt":1828.05,"molar_heat":25.98,"named_by":null,"number":46,"period":5,"group":10,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Palladium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_046_palladium/element_046_palladium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_046_palladium/element_046_palladium.glb","spectral_img":null,"summary":"Palladium is a chemical element with symbol Pd and atomic number 46. It is a rare and lustrous silvery-white metal discovered in 1803 by William Hyde Wollaston. He named it after the asteroid Pallas, which was itself named after the epithet of the Greek goddess Athena, acquired by her when she slew Pallas.","symbol":"Pd","xpos":10,"ypos":5,"wxpos":24,"wypos":5,"shells":[2,8,18,18],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 4d10","electron_configuration_semantic":"[Kr] 4d10","electron_affinity":54.24,"electronegativity_pauling":2.2,"ionization_energies":[804.4,1870,3177],"cpk-hex":"006985","image":{"title":"Palladium Crystal, about 1 gram. Original size in cm: 0.5 x 1","url":"https://upload.wikimedia.org/wikipedia/commons/d/d7/Palladium_%2846_Pd%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/palladium.php"},"block":"d"},{"name":"Silver","appearance":"lustrous white metal","atomic_mass":107.86822,"boil":2435,"category":"transition metal","density":10.49,"discovered_by":"unknown, before 5000 BC","melt":1234.93,"molar_heat":25.35,"named_by":null,"number":47,"period":5,"group":11,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Silver","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_047_silver/element_047_silver_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_047_silver/element_047_silver.glb","spectral_img":null,"summary":"Silver is a chemical element with symbol Ag (Greek:άργυρος árguros, Latin:argentum, both from the Indo-European root *h₂erǵ- for \\"grey\\" or \\"shining\\") and atomic number 47. A soft, white, lustrous transition metal, it possesses the highest electrical conductivity, thermal conductivity and reflectivity of any metal. The metal occurs naturally in its pure, free form (native silver), as an alloy with gold and other metals, and in minerals such as argentite and chlorargyrite.","symbol":"Ag","xpos":11,"ypos":5,"wxpos":25,"wypos":5,"shells":[2,8,18,18,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s1 4d10","electron_configuration_semantic":"[Kr] 4d10 5s1","electron_affinity":125.862,"electronegativity_pauling":1.93,"ionization_energies":[731,2070,3361],"cpk-hex":"c0c0c0","image":{"title":"Natural silver nugget, 1 cm long.","url":"https://upload.wikimedia.org/wikipedia/commons/e/e4/Silver-nugget.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: http://images-of-elements.com/silver.php"},"block":"d"},{"name":"Cadmium","appearance":"silvery bluish-gray metallic","atomic_mass":112.4144,"boil":1040,"category":"transition metal","density":8.65,"discovered_by":"Karl Samuel Leberecht Hermann","melt":594.22,"molar_heat":26.02,"named_by":"Isotopes of cadmium","number":48,"period":5,"group":12,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Cadmium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_048_cadmium/element_048_cadmium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_048_cadmium/element_048_cadmium.glb","spectral_img":null,"summary":"Cadmium is a chemical element with symbol Cd and atomic number 48. This soft, bluish-white metal is chemically similar to the two other stable metals in group 12, zinc and mercury. Like zinc, it prefers oxidation state +2 in most of its compounds and like mercury it shows a low melting point compared to transition metals.","symbol":"Cd","xpos":12,"ypos":5,"wxpos":26,"wypos":5,"shells":[2,8,18,18,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10","electron_configuration_semantic":"[Kr] 4d10 5s2","electron_affinity":-68,"electronegativity_pauling":1.69,"ionization_energies":[867.8,1631.4,3616],"cpk-hex":"ffd98f","image":{"title":"48 Cd Cadmium","url":"https://images-of-elements.com/cadmium-4.jpg","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/cadmium.php"},"block":"d"},{"name":"Indium","appearance":"silvery lustrous gray","atomic_mass":114.8181,"boil":2345,"category":"post-transition metal","density":7.31,"discovered_by":"Ferdinand Reich","melt":429.7485,"molar_heat":26.74,"named_by":null,"number":49,"period":5,"group":13,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Indium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_049_indium/element_049_indium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_049_indium/element_049_indium.glb","spectral_img":null,"summary":"Indium is a chemical element with symbol In and atomic number 49. It is a post-transition metallic element that is rare in Earth\'s crust. The metal is very soft, malleable and easily fusible, with a melting point higher than sodium, but lower than lithium or tin.","symbol":"In","xpos":13,"ypos":5,"wxpos":27,"wypos":5,"shells":[2,8,18,18,3],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p1","electron_configuration_semantic":"[Kr] 4d10 5s2 5p1","electron_affinity":37.043,"electronegativity_pauling":1.78,"ionization_energies":[558.3,1820.7,2704,5210],"cpk-hex":"a67573","image":{"title":"1.5 x 1.5 cm liquid indium","url":"https://images-of-elements.com/indium-2.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: http://images-of-elements.com/indium.php"},"block":"p"},{"name":"Tin","appearance":"silvery-white (beta, β) or gray (alpha, α)","atomic_mass":118.7107,"boil":2875,"category":"post-transition metal","density":7.365,"discovered_by":"unknown, before 3500 BC","melt":505.08,"molar_heat":27.112,"named_by":null,"number":50,"period":5,"group":14,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Tin","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_050_tin/element_050_tin_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_050_tin/element_050_tin.glb","spectral_img":null,"summary":"Tin is a chemical element with the symbol Sn (for Latin:stannum) and atomic number 50. It is a main group metal in group 14 of the periodic table. Tin shows a chemical similarity to both neighboring group-14 elements, germanium and lead, and has two possible oxidation states, +2 and the slightly more stable +4.","symbol":"Sn","xpos":14,"ypos":5,"wxpos":28,"wypos":5,"shells":[2,8,18,18,4],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p2","electron_configuration_semantic":"[Kr] 4d10 5s2 5p2","electron_affinity":107.2984,"electronegativity_pauling":1.96,"ionization_energies":[708.6,1411.8,2943,3930.3,7456],"cpk-hex":"668080","image":{"title":"Tin blob","url":"https://upload.wikimedia.org/wikipedia/commons/6/6a/Tin-2.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: http://images-of-elements.com/tin.php"},"block":"p"},{"name":"Antimony","appearance":"silvery lustrous gray","atomic_mass":121.7601,"boil":1908,"category":"metalloid","density":6.697,"discovered_by":"unknown, before 3000 BC","melt":903.78,"molar_heat":25.23,"named_by":null,"number":51,"period":5,"group":15,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Antimony","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_051_antimony/element_051_antimony_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_051_antimony/element_051_antimony.glb","spectral_img":null,"summary":"Antimony is a chemical element with symbol Sb (from Latin:stibium) and atomic number 51. A lustrous gray metalloid, it is found in nature mainly as the sulfide mineral stibnite (Sb2S3). Antimony compounds have been known since ancient times and were used for cosmetics; metallic antimony was also known, but it was erroneously identified as lead upon its discovery.","symbol":"Sb","xpos":15,"ypos":5,"wxpos":29,"wypos":5,"shells":[2,8,18,18,5],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p3","electron_configuration_semantic":"[Kr] 4d10 5s2 5p3","electron_affinity":101.059,"electronegativity_pauling":2.05,"ionization_energies":[834,1594.9,2440,4260,5400,10400],"cpk-hex":"9e63b5","image":{"title":"Antimony crystal, 2 grams, 1 cm","url":"https://upload.wikimedia.org/wikipedia/commons/5/5c/Antimony-4.jpg","attribution":"Unknown authorUnknown author, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/antimony.php"},"block":"p"},{"name":"Tellurium","appearance":null,"atomic_mass":127.603,"boil":1261,"category":"metalloid","density":6.24,"discovered_by":"Franz-Joseph Müller von Reichenstein","melt":722.66,"molar_heat":25.73,"named_by":null,"number":52,"period":5,"group":16,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Tellurium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_052_tellurium/element_052_tellurium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_052_tellurium/element_052_tellurium.glb","spectral_img":null,"summary":"Tellurium is a chemical element with symbol Te and atomic number 52. It is a brittle, mildly toxic, rare, silver-white metalloid. Tellurium is chemically related to selenium and sulfur.","symbol":"Te","xpos":16,"ypos":5,"wxpos":30,"wypos":5,"shells":[2,8,18,18,6],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p4","electron_configuration_semantic":"[Kr] 4d10 5s2 5p4","electron_affinity":190.161,"electronegativity_pauling":2.1,"ionization_energies":[869.3,1790,2698,3610,5668,6820,13200],"cpk-hex":"d47a00","image":{"title":"Metallic tellurium, diameter 3.5 cm","url":"https://upload.wikimedia.org/wikipedia/commons/c/c1/Tellurium2.jpg","attribution":"Unknown authorUnknown author, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/tellurium.php"},"block":"p"},{"name":"Iodine","appearance":"lustrous metallic gray, violet as a gas","atomic_mass":126.904473,"boil":457.4,"category":"diatomic nonmetal","density":4.933,"discovered_by":"Bernard Courtois","melt":386.85,"molar_heat":null,"named_by":null,"number":53,"period":5,"group":17,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Iodine","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_053_iodine/element_053_iodine_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_053_iodine/element_053_iodine.glb","spectral_img":null,"summary":"Iodine is a chemical element with symbol I and atomic number 53. The name is from Greek ἰοειδής ioeidēs, meaning violet or purple, due to the color of iodine vapor. Iodine and its compounds are primarily used in nutrition, and industrially in the production of acetic acid and certain polymers.","symbol":"I","xpos":17,"ypos":5,"wxpos":31,"wypos":5,"shells":[2,8,18,18,7],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p5","electron_configuration_semantic":"[Kr] 4d10 5s2 5p5","electron_affinity":295.1531,"electronegativity_pauling":2.66,"ionization_energies":[1008.4,1845.9,3180],"cpk-hex":"940094","image":{"title":"Iodine Sample","url":"https://upload.wikimedia.org/wikipedia/commons/c/c2/Iodine-sample.jpg","attribution":"Benjah-bmm27, Public domain, via Wikimedia Commons"},"block":"p"},{"name":"Xenon","appearance":"colorless gas, exhibiting a blue glow when placed in a high voltage electric field","atomic_mass":131.2936,"boil":165.051,"category":"noble gas","density":5.894,"discovered_by":"William Ramsay","melt":161.4,"molar_heat":null,"named_by":null,"number":54,"period":5,"group":18,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Xenon","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_054_xenon/element_054_xenon_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_054_xenon/element_054_xenon.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Xenon_Spectrum.jpg","summary":"Xenon is a chemical element with symbol Xe and atomic number 54. It is a colorless, dense, odorless noble gas, that occurs in the Earth\'s atmosphere in trace amounts. Although generally unreactive, xenon can undergo a few chemical reactions such as the formation of xenon hexafluoroplatinate, the first noble gas compound to be synthesized.","symbol":"Xe","xpos":18,"ypos":5,"wxpos":32,"wypos":5,"shells":[2,8,18,18,8],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6","electron_configuration_semantic":"[Kr] 4d10 5s2 5p6","electron_affinity":-77,"electronegativity_pauling":2.6,"ionization_energies":[1170.4,2046.4,3099.4],"cpk-hex":"429eb0","image":{"title":"Vial of glowing ultrapure xenon. Original size in cm: 1 x 5","url":"https://upload.wikimedia.org/wikipedia/commons/5/5d/Xenon-glow.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/xenon.php"},"block":"p"},{"name":"Cesium","appearance":"silvery gold","atomic_mass":132.905451966,"boil":944,"category":"alkali metal","density":1.93,"discovered_by":"Robert Bunsen","melt":301.7,"molar_heat":32.21,"named_by":null,"number":55,"period":6,"group":1,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Cesium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_055_cesium/element_055_cesium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_055_cesium/element_055_cesium.glb","spectral_img":null,"summary":"Caesium or cesium is a chemical element with symbol Cs and atomic number 55. It is a soft, silvery-gold alkali metal with a melting point of 28 °C (82 °F), which makes it one of only five elemental metals that are liquid at or near room temperature. Caesium is an alkali metal and has physical and chemical properties similar to those of rubidium and potassium.","symbol":"Cs","xpos":1,"ypos":6,"wxpos":1,"wypos":6,"shells":[2,8,18,18,8,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s1","electron_configuration_semantic":"[Xe] 6s1","electron_affinity":45.505,"electronegativity_pauling":0.79,"ionization_energies":[375.7,2234.3,3400],"cpk-hex":"57178f","image":{"title":"Cesium/Caesium metal","url":"https://upload.wikimedia.org/wikipedia/commons/3/3d/Cesium.jpg","attribution":"Dnn87 Contact email: Dnn87yahoo.dk, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons"},"block":"s"},{"name":"Barium","appearance":null,"atomic_mass":137.3277,"boil":2118,"category":"alkaline earth metal","density":3.51,"discovered_by":"Carl Wilhelm Scheele","melt":1000,"molar_heat":28.07,"named_by":null,"number":56,"period":6,"group":2,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Barium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_056_barium/element_056_barium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_056_barium/element_056_barium.glb","spectral_img":null,"summary":"Barium is a chemical element with symbol Ba and atomic number 56. It is the fifth element in Group 2, a soft silvery metallic alkaline earth metal. Because of its high chemical reactivity barium is never found in nature as a free element.","symbol":"Ba","xpos":2,"ypos":6,"wxpos":2,"wypos":6,"shells":[2,8,18,18,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2","electron_configuration_semantic":"[Xe] 6s2","electron_affinity":13.954,"electronegativity_pauling":0.89,"ionization_energies":[502.9,965.2,3600],"cpk-hex":"00c900","image":{"title":"1.5 Grams Barium with a Grey Oxide Layer under Argon. Original size in cm: 0.7 x 1","url":"https://upload.wikimedia.org/wikipedia/commons/f/f5/Barium_%2856_Ba%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/barium.php"},"block":"s"},{"name":"Lanthanum","appearance":"silvery white","atomic_mass":138.905477,"boil":3737,"category":"lanthanide","density":6.162,"discovered_by":"Carl Gustaf Mosander","melt":1193,"molar_heat":27.11,"named_by":null,"number":57,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Lanthanum","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_057_lanthanum/element_057_lanthanum_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_057_lanthanum/element_057_lanthanum.glb","spectral_img":null,"summary":"Lanthanum is a soft, ductile, silvery-white metallic chemical element with symbol La and atomic number 57. It tarnishes rapidly when exposed to air and is soft enough to be cut with a knife. It gave its name to the lanthanide series, a group of 15 similar elements between lanthanum and lutetium in the periodic table:it is also sometimes considered the first element of the 6th-period transition metals.","symbol":"La","xpos":3,"ypos":9,"wxpos":3,"wypos":6,"shells":[2,8,18,18,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 5d1","electron_configuration_semantic":"[Xe] 5d16s2","electron_affinity":53,"electronegativity_pauling":1.1,"ionization_energies":[538.1,1067,1850.3,4819,5940],"cpk-hex":"70d4ff","image":{"title":"1 cm Big Piece of Pure Lanthanum","url":"https://upload.wikimedia.org/wikipedia/commons/f/f7/Lanthanum.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/lanthanum.php"},"block":"f"},{"name":"Cerium","appearance":"silvery white","atomic_mass":140.1161,"boil":3716,"category":"lanthanide","density":6.77,"discovered_by":"Martin Heinrich Klaproth","melt":1068,"molar_heat":26.94,"named_by":null,"number":58,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Cerium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_058_cerium/element_058_cerium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_058_cerium/element_058_cerium.glb","spectral_img":null,"summary":"Cerium is a chemical element with symbol Ce and atomic number 58. It is a soft, silvery, ductile metal which easily oxidizes in air. Cerium was named after the dwarf planet Ceres (itself named after the Roman goddess of agriculture).","symbol":"Ce","xpos":4,"ypos":9,"wxpos":4,"wypos":6,"shells":[2,8,18,19,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 5d1 4f1","electron_configuration_semantic":"[Xe] 4f1 5d1 6s2","electron_affinity":55,"electronegativity_pauling":1.12,"ionization_energies":[534.4,1050,1949,3547,6325,7490],"cpk-hex":"ffffc7","image":{"title":"Ultrapure Cerium under Argon, 1.5 grams. Original size in cm: 1 x 1","url":"https://upload.wikimedia.org/wikipedia/commons/0/0d/Cerium2.jpg","attribution":"Jurii, CC BY 1.0 <https://creativecommons.org/licenses/by/1.0>, via Wikimedia Commons, source: https://images-of-elements.com/cerium.php"},"block":"f"},{"name":"Praseodymium","appearance":"grayish white","atomic_mass":140.907662,"boil":3403,"category":"lanthanide","density":6.77,"discovered_by":"Carl Auer von Welsbach","melt":1208,"molar_heat":27.2,"named_by":null,"number":59,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Praseodymium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_059_praseodymium/element_059_praseodymium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_059_praseodymium/element_059_praseodymium.glb","spectral_img":null,"summary":"Praseodymium is a chemical element with symbol Pr and atomic number 59. Praseodymium is a soft, silvery, malleable and ductile metal in the lanthanide group. It is valued for its magnetic, electrical, chemical, and optical properties.","symbol":"Pr","xpos":5,"ypos":9,"wxpos":5,"wypos":6,"shells":[2,8,18,21,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f3","electron_configuration_semantic":"[Xe] 4f3 6s2","electron_affinity":93,"electronegativity_pauling":1.13,"ionization_energies":[527,1020,2086,3761,5551],"cpk-hex":"d9ffc7","image":{"title":"1.5 Grams Praseodymium under Argon, 0.5 cm big pieces","url":"https://upload.wikimedia.org/wikipedia/commons/c/c7/Praseodymium.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/praseodymium.php"},"block":"f"},{"name":"Neodymium","appearance":"silvery white","atomic_mass":144.2423,"boil":3347,"category":"lanthanide","density":7.01,"discovered_by":"Carl Auer von Welsbach","melt":1297,"molar_heat":27.45,"named_by":null,"number":60,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Neodymium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_060_neodymium/element_060_neodymium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_060_neodymium/element_060_neodymium.glb","spectral_img":null,"summary":"Neodymium is a chemical element with symbol Nd and atomic number 60. It is a soft silvery metal that tarnishes in air. Neodymium was discovered in 1885 by the Austrian chemist Carl Auer von Welsbach.","symbol":"Nd","xpos":6,"ypos":9,"wxpos":6,"wypos":6,"shells":[2,8,18,22,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f4","electron_configuration_semantic":"[Xe] 4f4 6s2","electron_affinity":184.87,"electronegativity_pauling":1.14,"ionization_energies":[533.1,1040,2130,3900],"cpk-hex":"c7ffc7","image":{"title":"Ultrapure Neodymium under Argon, 5 grams. Original length of the large piece in cm: 1","url":"https://upload.wikimedia.org/wikipedia/commons/c/c9/Neodymium_%2860_Nd%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/neodymium.php"},"block":"f"},{"name":"Promethium","appearance":"metallic","atomic_mass":145,"boil":3273,"category":"lanthanide","density":7.26,"discovered_by":"Chien Shiung Wu","melt":1315,"molar_heat":null,"named_by":"Isotopes of promethium","number":61,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Promethium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_061_promethium/element_061_promethium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_061_promethium/element_061_promethium.glb","spectral_img":null,"summary":"Promethium, originally prometheum, is a chemical element with the symbol Pm and atomic number 61. All of its isotopes are radioactive; it is one of only two such elements that are followed in the periodic table by elements with stable forms, a distinction shared with technetium. Chemically, promethium is a lanthanide, which forms salts when combined with other elements.","symbol":"Pm","xpos":7,"ypos":9,"wxpos":7,"wypos":6,"shells":[2,8,18,23,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f5","electron_configuration_semantic":"[Xe] 4f5 6s2","electron_affinity":12.45,"electronegativity_pauling":1.13,"ionization_energies":[540,1050,2150,3970],"cpk-hex":"a3ffc7","image":{"title":"Photomontage of what promethium metal might look like (it is too radioactive and real images are not available)","url":"https://upload.wikimedia.org/wikipedia/commons/5/5b/Promethium.jpg","attribution":"Unknown authorUnknown author, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/promethium.php"},"block":"f"},{"name":"Samarium","appearance":"silvery white","atomic_mass":150.362,"boil":2173,"category":"lanthanide","density":7.52,"discovered_by":"Lecoq de Boisbaudran","melt":1345,"molar_heat":29.54,"named_by":null,"number":62,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Samarium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_062_samarium/element_062_samarium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_062_samarium/element_062_samarium.glb","spectral_img":null,"summary":"Samarium is a chemical element with symbol Sm and atomic number 62. It is a moderately hard silvery metal that readily oxidizes in air. Being a typical member of the lanthanide series, samarium usually assumes the oxidation state +3.","symbol":"Sm","xpos":8,"ypos":9,"wxpos":8,"wypos":6,"shells":[2,8,18,24,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f6","electron_configuration_semantic":"[Xe] 4f6 6s2","electron_affinity":15.63,"electronegativity_pauling":1.17,"ionization_energies":[544.5,1070,2260,3990],"cpk-hex":"8fffc7","image":{"title":"Ultrapure Sublimated Samarium, 2 grams. Original size in cm: 0.8 x 1.5","url":"https://upload.wikimedia.org/wikipedia/commons/8/88/Samarium-2.jpg","attribution":"Unknown authorUnknown author, CC BY 1.0 <https://creativecommons.org/licenses/by/1.0>, via Wikimedia Commons, source: https://images-of-elements.com/samarium.php"},"block":"f"},{"name":"Europium","appearance":null,"atomic_mass":151.9641,"boil":1802,"category":"lanthanide","density":5.264,"discovered_by":"Eugène-Anatole Demarçay","melt":1099,"molar_heat":27.66,"named_by":null,"number":63,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Europium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_063_europium/element_063_europium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_063_europium/element_063_europium.glb","spectral_img":null,"summary":"Europium is a chemical element with symbol Eu and atomic number 63. It was isolated in 1901 and is named after the continent of Europe. It is a moderately hard, silvery metal which readily oxidizes in air and water.","symbol":"Eu","xpos":9,"ypos":9,"wxpos":9,"wypos":6,"shells":[2,8,18,25,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f7","electron_configuration_semantic":"[Xe] 4f7 6s2","electron_affinity":11.2,"electronegativity_pauling":1.2,"ionization_energies":[547.1,1085,2404,4120],"cpk-hex":"61ffc7","image":{"title":"Weakly Oxidized Europium, hence slightly yellowish. 1.5 grams, large piece 0.6 x 1.6 cm.","url":"https://upload.wikimedia.org/wikipedia/commons/6/6a/Europium.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/europium.php"},"block":"f"},{"name":"Gadolinium","appearance":"silvery white","atomic_mass":157.253,"boil":3273,"category":"lanthanide","density":7.9,"discovered_by":"Jean Charles Galissard de Marignac","melt":1585,"molar_heat":37.03,"named_by":null,"number":64,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Gadolinium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_064_gadolinium/element_064_gadolinium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_064_gadolinium/element_064_gadolinium.glb","spectral_img":null,"summary":"Gadolinium is a chemical element with symbol Gd and atomic number 64. It is a silvery-white, malleable and ductile rare-earth metal. It is found in nature only in combined (salt) form.","symbol":"Gd","xpos":10,"ypos":9,"wxpos":10,"wypos":6,"shells":[2,8,18,25,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f7 5d1","electron_configuration_semantic":"[Xe] 4f7 5d1 6s2","electron_affinity":13.22,"electronegativity_pauling":1.2,"ionization_energies":[593.4,1170,1990,4250],"cpk-hex":"45ffc7","image":{"title":"Pure (99.95%) Amorphous Gadolinium, about 12 grams, 2 × 1.5 × 0.5 cm, cast in acrylic glass","url":"https://upload.wikimedia.org/wikipedia/commons/c/c2/Gadolinium-2.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/gadolinium.php"},"block":"f"},{"name":"Terbium","appearance":"silvery white","atomic_mass":158.925352,"boil":3396,"category":"lanthanide","density":8.23,"discovered_by":"Carl Gustaf Mosander","melt":1629,"molar_heat":28.91,"named_by":null,"number":65,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Terbium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_065_terbium/element_065_terbium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_065_terbium/element_065_terbium.glb","spectral_img":null,"summary":"Terbium is a chemical element with symbol Tb and atomic number 65. It is a silvery-white rare earth metal that is malleable, ductile and soft enough to be cut with a knife. Terbium is never found in nature as a free element, but it is contained in many minerals, including cerite, gadolinite, monazite, xenotime and euxenite.","symbol":"Tb","xpos":11,"ypos":9,"wxpos":11,"wypos":6,"shells":[2,8,18,27,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f9","electron_configuration_semantic":"[Xe] 4f9 6s2","electron_affinity":112.4,"electronegativity_pauling":1.1,"ionization_energies":[565.8,1110,2114,3839],"cpk-hex":"30ffc7","image":{"title":"Pure Terbium, 3 grams. Original size: 1 cm","url":"https://upload.wikimedia.org/wikipedia/commons/9/9a/Terbium-2.jpg","attribution":"Unknown authorUnknown author, CC BY 1.0 <https://creativecommons.org/licenses/by/1.0>, via Wikimedia Commons, source: https://images-of-elements.com/terbium.php"},"block":"f"},{"name":"Dysprosium","appearance":"silvery white","atomic_mass":162.5001,"boil":2840,"category":"lanthanide","density":8.54,"discovered_by":"Lecoq de Boisbaudran","melt":1680,"molar_heat":27.7,"named_by":null,"number":66,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Dysprosium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_066_dysprosium/element_066_dysprosium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_066_dysprosium/element_066_dysprosium.glb","spectral_img":null,"summary":"Dysprosium is a chemical element with the symbol Dy and atomic number 66. It is a rare earth element with a metallic silver luster. Dysprosium is never found in nature as a free element, though it is found in various minerals, such as xenotime.","symbol":"Dy","xpos":12,"ypos":9,"wxpos":12,"wypos":6,"shells":[2,8,18,28,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f10","electron_configuration_semantic":"[Xe] 4f10 6s2","electron_affinity":33.96,"electronegativity_pauling":1.22,"ionization_energies":[573,1130,2200,3990],"cpk-hex":"1fffc7","image":{"title":"Pure Dysprosium Dendrites","url":"https://upload.wikimedia.org/wikipedia/commons/5/55/Dysprosium-2.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/dysprosium.php"},"block":"f"},{"name":"Holmium","appearance":"silvery white","atomic_mass":164.930332,"boil":2873,"category":"lanthanide","density":8.79,"discovered_by":"Marc Delafontaine","melt":1734,"molar_heat":27.15,"named_by":null,"number":67,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Holmium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_067_holmium/element_067_holmium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_067_holmium/element_067_holmium.glb","spectral_img":null,"summary":"Holmium is a chemical element with symbol Ho and atomic number 67. Part of the lanthanide series, holmium is a rare earth element. Holmium was discovered by Swedish chemist Per Theodor Cleve.","symbol":"Ho","xpos":13,"ypos":9,"wxpos":13,"wypos":6,"shells":[2,8,18,29,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f11","electron_configuration_semantic":"[Xe] 4f11 6s2","electron_affinity":32.61,"electronegativity_pauling":1.23,"ionization_energies":[581,1140,2204,4100],"cpk-hex":"00ff9c","image":{"title":"Ultrapure Holmium, 17 grams. Original size in cm: 1.5 x 2.5","url":"https://upload.wikimedia.org/wikipedia/commons/0/0a/Holmium2.jpg","attribution":"Unknown authorUnknown author, CC BY 1.0 <https://creativecommons.org/licenses/by/1.0>, via Wikimedia Commons, source: https://images-of-elements.com/holmium.php"},"block":"f"},{"name":"Erbium","appearance":"silvery white","atomic_mass":167.2593,"boil":3141,"category":"lanthanide","density":9.066,"discovered_by":"Carl Gustaf Mosander","melt":1802,"molar_heat":28.12,"named_by":null,"number":68,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Erbium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_068_erbium/element_068_erbium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_068_erbium/element_068_erbium.glb","spectral_img":null,"summary":"Erbium is a chemical element in the lanthanide series, with symbol Er and atomic number 68. A silvery-white solid metal when artificially isolated, natural erbium is always found in chemical combination with other elements on Earth. As such, it is a rare earth element which is associated with several other rare elements in the mineral gadolinite from Ytterby in Sweden, where yttrium, ytterbium, and terbium were discovered.","symbol":"Er","xpos":14,"ypos":9,"wxpos":14,"wypos":6,"shells":[2,8,18,30,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f12","electron_configuration_semantic":"[Xe] 4f12 6s2","electron_affinity":30.1,"electronegativity_pauling":1.24,"ionization_energies":[589.3,1150,2194,4120],"cpk-hex":"00e675","image":{"title":"9.5 Gramms Pure Erbium, 2 x 2 cm","url":"https://upload.wikimedia.org/wikipedia/commons/2/2a/Erbium-2.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/erbium.php"},"block":"f"},{"name":"Thulium","appearance":"silvery gray","atomic_mass":168.934222,"boil":2223,"category":"lanthanide","density":9.32,"discovered_by":"Per Teodor Cleve","melt":1818,"molar_heat":27.03,"named_by":null,"number":69,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Thulium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_069_thulium/element_069_thulium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_069_thulium/element_069_thulium.glb","spectral_img":null,"summary":"Thulium is a chemical element with symbol Tm and atomic number 69. It is the thirteenth and antepenultimate (third-last) element in the lanthanide series. Like the other lanthanides, the most common oxidation state is +3, seen in its oxide, halides and other compounds.","symbol":"Tm","xpos":15,"ypos":9,"wxpos":15,"wypos":6,"shells":[2,8,18,31,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f13","electron_configuration_semantic":"[Xe] 4f13 6s2","electron_affinity":99,"electronegativity_pauling":1.25,"ionization_energies":[596.7,1160,2285,4120],"cpk-hex":"00d452","image":{"title":"Ultrapure (99.997%) Crystalline Thulium, 22.3 grams, 3 × 3 × 2 cm in size","url":"https://upload.wikimedia.org/wikipedia/commons/6/6b/Thulium-2.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/thulium.php"},"block":"f"},{"name":"Ytterbium","appearance":null,"atomic_mass":173.0451,"boil":1469,"category":"lanthanide","density":6.9,"discovered_by":"Jean Charles Galissard de Marignac","melt":1097,"molar_heat":26.74,"named_by":null,"number":70,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Ytterbium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_070_ytterbium/element_070_ytterbium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_070_ytterbium/element_070_ytterbium.glb","spectral_img":null,"summary":"Ytterbium is a chemical element with symbol Yb and atomic number 70. It is the fourteenth and penultimate element in the lanthanide series, which is the basis of the relative stability of its +2 oxidation state. However, like the other lanthanides, its most common oxidation state is +3, seen in its oxide, halides and other compounds.","symbol":"Yb","xpos":16,"ypos":9,"wxpos":16,"wypos":6,"shells":[2,8,18,32,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14","electron_configuration_semantic":"[Xe] 4f14 6s2","electron_affinity":-1.93,"electronegativity_pauling":1.1,"ionization_energies":[603.4,1174.8,2417,4203],"cpk-hex":"00bf38","image":{"title":"Ytterbium, 0.5 x 1 cm","url":"https://upload.wikimedia.org/wikipedia/commons/c/ce/Ytterbium-3.jpg","attribution":"Jurii, CC BY 1.0 <https://creativecommons.org/licenses/by/1.0>, via Wikimedia Commons, source: https://images-of-elements.com/ytterbium.php"},"block":"f"},{"name":"Lutetium","appearance":"silvery white","atomic_mass":174.96681,"boil":3675,"category":"lanthanide","density":9.841,"discovered_by":"Georges Urbain","melt":1925,"molar_heat":26.86,"named_by":null,"number":71,"period":6,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Lutetium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_071_lutetium/element_071_lutetium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_071_lutetium/element_071_lutetium.glb","spectral_img":null,"summary":"Lutetium is a chemical element with symbol Lu and atomic number 71. It is a silvery white metal, which resists corrosion in dry, but not in moist air. It is considered the first element of the 6th-period transition metals and the last element in the lanthanide series, and is traditionally counted among the rare earths.","symbol":"Lu","xpos":17,"ypos":9,"wxpos":17,"wypos":6,"shells":[2,8,18,32,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d1","electron_configuration_semantic":"[Xe] 4f14 5d1 6s2","electron_affinity":33.4,"electronegativity_pauling":1.27,"ionization_energies":[523.5,1340,2022.3,4370,6445],"cpk-hex":"00ab24","image":{"title":"1 cm Big Piece of Pure Lutetium","url":"https://upload.wikimedia.org/wikipedia/commons/e/e8/Lutetium.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/lutetium.php"},"block":"d"},{"name":"Hafnium","appearance":"steel gray","atomic_mass":178.492,"boil":4876,"category":"transition metal","density":13.31,"discovered_by":"Dirk Coster","melt":2506,"molar_heat":25.73,"named_by":null,"number":72,"period":6,"group":4,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Hafnium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_072_hafnium/element_072_hafnium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_072_hafnium/element_072_hafnium.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Hafnium_spectrum_visible.png","summary":"Hafnium is a chemical element with symbol Hf and atomic number 72. A lustrous, silvery gray, tetravalent transition metal, hafnium chemically resembles zirconium and is found in zirconium minerals. Its existence was predicted by Dmitri Mendeleev in 1869, though it was not identified until 1923, making it the penultimate stable element to be discovered (rhenium was identified two years later).","symbol":"Hf","xpos":4,"ypos":6,"wxpos":18,"wypos":6,"shells":[2,8,18,32,10,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d2","electron_configuration_semantic":"[Xe] 4f14 5d2 6s2","electron_affinity":17.18,"electronegativity_pauling":1.3,"ionization_energies":[658.5,1440,2250,3216],"cpk-hex":"4dc2ff","image":{"title":"Electrolytic Hafnium, 22 grams. Original size in cm: 1 x 2 x 3","url":"https://upload.wikimedia.org/wikipedia/commons/1/17/Hafnium_%2872_Hf%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/hafnium.php"},"block":"d"},{"name":"Tantalum","appearance":"gray blue","atomic_mass":180.947882,"boil":5731,"category":"transition metal","density":16.69,"discovered_by":"Anders Gustaf Ekeberg","melt":3290,"molar_heat":25.36,"named_by":null,"number":73,"period":6,"group":5,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Tantalum","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_073_tantalum/element_073_tantalum_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_073_tantalum/element_073_tantalum.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Tantalum_spectrum_visible.png","summary":"Tantalum is a chemical element with symbol Ta and atomic number 73. Previously known as tantalium, its name comes from Tantalus, an antihero from Greek mythology. Tantalum is a rare, hard, blue-gray, lustrous transition metal that is highly corrosion-resistant.","symbol":"Ta","xpos":5,"ypos":6,"wxpos":19,"wypos":6,"shells":[2,8,18,32,11,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d3","electron_configuration_semantic":"[Xe] 4f14 5d3 6s2","electron_affinity":31,"electronegativity_pauling":1.5,"ionization_energies":[761,1500],"cpk-hex":"4da6ff","image":{"title":"Piece of tantalum, 1 cm in size","url":"https://upload.wikimedia.org/wikipedia/commons/6/61/Tantalum.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/tantalum.php"},"block":"d"},{"name":"Tungsten","appearance":"grayish white, lustrous","atomic_mass":183.841,"boil":6203,"category":"transition metal","density":19.25,"discovered_by":"Carl Wilhelm Scheele","melt":3695,"molar_heat":24.27,"named_by":null,"number":74,"period":6,"group":6,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Tungsten","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_074_tungsten/element_074_tungsten_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_074_tungsten/element_074_tungsten.glb","spectral_img":null,"summary":"Tungsten, also known as wolfram, is a chemical element with symbol W and atomic number 74. The word tungsten comes from the Swedish language tung sten, which directly translates to heavy stone. Its name in Swedish is volfram, however, in order to distinguish it from scheelite, which in Swedish is alternatively named tungsten.","symbol":"W","xpos":6,"ypos":6,"wxpos":20,"wypos":6,"shells":[2,8,18,32,12,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d4","electron_configuration_semantic":"[Xe] 4f14 5d4 6s2","electron_affinity":78.76,"electronegativity_pauling":2.36,"ionization_energies":[770,1700],"cpk-hex":"2194d6","image":{"title":"Tungsten rod with oxidised surface, 80 grams. Original size in cm: 1.3 x 3","url":"https://upload.wikimedia.org/wikipedia/commons/c/c8/Tungsten_rod_with_oxidised_surface.jpg","attribution":"Jurii, CC BY 1.0 <https://creativecommons.org/licenses/by/1.0>, via Wikimedia Commons, source: https://images-of-elements.com/tungsten.php"},"block":"d"},{"name":"Rhenium","appearance":"silvery-grayish","atomic_mass":186.2071,"boil":5869,"category":"transition metal","density":21.02,"discovered_by":"Masataka Ogawa","melt":3459,"molar_heat":25.48,"named_by":"Walter Noddack","number":75,"period":6,"group":7,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Rhenium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_075_rhenium/element_075_rhenium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_075_rhenium/element_075_rhenium.glb","spectral_img":null,"summary":"Rhenium is a chemical element with symbol Re and atomic number 75. It is a silvery-white, heavy, third-row transition metal in group 7 of the periodic table. With an estimated average concentration of 1 part per billion (ppb), rhenium is one of the rarest elements in the Earth\'s crust.","symbol":"Re","xpos":7,"ypos":6,"wxpos":21,"wypos":6,"shells":[2,8,18,32,13,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d5","electron_configuration_semantic":"[Xe] 4f14 5d5 6s2","electron_affinity":5.8273,"electronegativity_pauling":1.9,"ionization_energies":[760,1260,2510,3640],"cpk-hex":"267dab","image":{"title":"Pure Rhenium Bead, arc melted, 21 grams. Original size in cm: 1.5 x 1.7. Measured radiation dose <0.05 μS/h.","url":"https://upload.wikimedia.org/wikipedia/commons/d/d9/Pure_rhenium_bead%2C_arc_melted%2C_21_grams._Original_size_in_cm_-_1.5_x_1.7.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/rhenium.php"},"block":"d"},{"name":"Osmium","appearance":"silvery, blue cast","atomic_mass":190.233,"boil":5285,"category":"transition metal","density":22.59,"discovered_by":"Smithson Tennant","melt":3306,"molar_heat":24.7,"named_by":null,"number":76,"period":6,"group":8,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Osmium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_076_osmium/element_076_osmium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_076_osmium/element_076_osmium.glb","spectral_img":null,"summary":"Osmium (from Greek osme (ὀσμή) meaning \\"smell\\") is a chemical element with symbol Os and atomic number 76. It is a hard, brittle, bluish-white transition metal in the platinum group that is found as a trace element in alloys, mostly in platinum ores. Osmium is the densest naturally occurring element, with a density of 22.59 g/cm3.","symbol":"Os","xpos":8,"ypos":6,"wxpos":22,"wypos":6,"shells":[2,8,18,32,14,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d6","electron_configuration_semantic":"[Xe] 4f14 5d6 6s2","electron_affinity":103.99,"electronegativity_pauling":2.2,"ionization_energies":[840,1600],"cpk-hex":"266696","image":{"title":"Pure Osmium Bead","url":"https://upload.wikimedia.org/wikipedia/commons/3/3c/Osmium-bead.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/osmium.php"},"block":"d"},{"name":"Iridium","appearance":"silvery white","atomic_mass":192.2173,"boil":4403,"category":"transition metal","density":22.56,"discovered_by":"Smithson Tennant","melt":2719,"molar_heat":25.1,"named_by":null,"number":77,"period":6,"group":9,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Iridium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_077_iridium/element_077_iridium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_077_iridium/element_077_iridium.glb","spectral_img":null,"summary":"Iridium is a chemical element with symbol Ir and atomic number 77. A very hard, brittle, silvery-white transition metal of the platinum group, iridium is generally credited with being the second densest element (after osmium) based on measured density, although calculations involving the space lattices of the elements show that iridium is denser. It is also the most corrosion-resistant metal, even at temperatures as high as 2000 °C. Although only certain molten salts and halogens are corrosive to solid iridium, finely divided iridium dust is much more reactive and can be flammable.","symbol":"Ir","xpos":9,"ypos":6,"wxpos":23,"wypos":6,"shells":[2,8,18,32,15,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d7","electron_configuration_semantic":"[Xe] 4f14 5d7 6s2","electron_affinity":150.94,"electronegativity_pauling":2.2,"ionization_energies":[880,1600],"cpk-hex":"175487","image":{"title":"Pieces of Pure Iridium, 1 gram. Original size: 0.1 - 0.3 cm each","url":"https://upload.wikimedia.org/wikipedia/commons/a/a8/Iridium-2.jpg","attribution":"Unknown authorUnknown author, CC BY 1.0 <https://creativecommons.org/licenses/by/1.0>, via Wikimedia Commons, source: https://images-of-elements.com/iridium.php"},"block":"d"},{"name":"Platinum","appearance":"silvery white","atomic_mass":195.0849,"boil":4098,"category":"transition metal","density":21.45,"discovered_by":"Antonio de Ulloa","melt":2041.4,"molar_heat":25.86,"named_by":null,"number":78,"period":6,"group":10,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Platinum","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_078_platinum/element_078_platinum_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_078_platinum/element_078_platinum.glb","spectral_img":null,"summary":"Platinum is a chemical element with symbol Pt and atomic number 78. It is a dense, malleable, ductile, highly unreactive, precious, gray-white transition metal. Its name is derived from the Spanish term platina, which is literally translated into \\"little silver\\".","symbol":"Pt","xpos":10,"ypos":6,"wxpos":24,"wypos":6,"shells":[2,8,18,32,17,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s1 4f14 5d9","electron_configuration_semantic":"[Xe] 4f14 5d9 6s1","electron_affinity":205.041,"electronegativity_pauling":2.28,"ionization_energies":[870,1791],"cpk-hex":"d0d0e0","image":{"title":"Crystals of Pure Platinum grown by gas phase transport","url":"https://upload.wikimedia.org/wikipedia/commons/6/68/Platinum_crystals.jpg","attribution":"Periodictableru, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons"},"block":"d"},{"name":"Gold","appearance":"metallic yellow","atomic_mass":196.9665695,"boil":3243,"category":"transition metal","density":19.3,"discovered_by":"Middle East","melt":1337.33,"molar_heat":25.418,"named_by":null,"number":79,"period":6,"group":11,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Gold","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_079_gold/element_079_gold_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_079_gold/element_079_gold.glb","spectral_img":null,"summary":"Gold is a chemical element with symbol Au (from Latin:aurum) and atomic number 79. In its purest form, it is a bright, slightly reddish yellow, dense, soft, malleable and ductile metal. Chemically, gold is a transition metal and a group 11 element.","symbol":"Au","xpos":11,"ypos":6,"wxpos":25,"wypos":6,"shells":[2,8,18,32,18,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s1 4f14 5d10","electron_configuration_semantic":"[Xe] 4f14 5d10 6s1","electron_affinity":222.747,"electronegativity_pauling":2.54,"ionization_energies":[890.1,1980],"cpk-hex":"ffd123","image":{"title":"Ultrapure Gold Leaf","url":"https://upload.wikimedia.org/wikipedia/commons/8/8a/Gold_%2879_Au%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/gold.php"},"block":"d"},{"name":"Mercury","appearance":"silvery","atomic_mass":200.5923,"boil":629.88,"category":"transition metal","density":13.534,"discovered_by":"unknown, before 2000 BCE","melt":234.321,"molar_heat":27.983,"named_by":null,"number":80,"period":6,"group":12,"phase":"Liquid","source":"https://en.wikipedia.org/wiki/Mercury (Element)","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_080_mercury/element_080_mercury_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_080_mercury/element_080_mercury.glb","spectral_img":null,"summary":"Mercury is a chemical element with symbol Hg and atomic number 80. It is commonly known as quicksilver and was formerly named hydrargyrum (/haɪˈdrɑːrdʒərəm/). A heavy, silvery d-block element, mercury is the only metallic element that is liquid at standard conditions for temperature and pressure; the only other element that is liquid under these conditions is bromine, though metals such as caesium, gallium, and rubidium melt just above room temperature.","symbol":"Hg","xpos":12,"ypos":6,"wxpos":26,"wypos":6,"shells":[2,8,18,32,18,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10","electron_configuration_semantic":"[Xe] 4f14 5d10 6s2","electron_affinity":-48,"electronegativity_pauling":2,"ionization_energies":[1007.1,1810,3300],"cpk-hex":"b8b8d0","image":{"title":"6 grams pure mercury. Diameter of the inner disc: 2 cm","url":"https://upload.wikimedia.org/wikipedia/commons/b/be/Hydrargyrum_%2880_Hg%29.jpg","attribution":"Hi-Res Images of Chemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/mercury.php"},"block":"d"},{"name":"Thallium","appearance":"silvery white","atomic_mass":204.38,"boil":1746,"category":"post-transition metal","density":11.85,"discovered_by":"William Crookes","melt":577,"molar_heat":26.32,"named_by":null,"number":81,"period":6,"group":13,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Thallium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_081_thallium/element_081_thallium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_081_thallium/element_081_thallium.glb","spectral_img":null,"summary":"Thallium is a chemical element with symbol Tl and atomic number 81. This soft gray post-transition metal is not found free in nature. When isolated, it resembles tin, but discolors when exposed to air.","symbol":"Tl","xpos":13,"ypos":6,"wxpos":27,"wypos":6,"shells":[2,8,18,32,18,3],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p1","electron_configuration_semantic":"[Xe] 4f14 5d10 6s2 6p1","electron_affinity":36.4,"electronegativity_pauling":1.62,"ionization_energies":[589.4,1971,2878],"cpk-hex":"a6544d","image":{"title":"8 grams pure thallium under argon. Original size in cm: 0.7 x 1.5","url":"https://upload.wikimedia.org/wikipedia/commons/5/55/Thallium_%2881_Tl%29.jpg","attribution":"Hi-Res Images ofChemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/thallium.php"},"block":"p"},{"name":"Lead","appearance":"metallic gray","atomic_mass":207.21,"boil":2022,"category":"post-transition metal","density":11.34,"discovered_by":"Middle East","melt":600.61,"molar_heat":26.65,"named_by":null,"number":82,"period":6,"group":14,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Lead_(element)","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_082_lead/element_082_lead_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_082_lead/element_082_lead.glb","spectral_img":null,"summary":"Lead (/lɛd/) is a chemical element in the carbon group with symbol Pb (from Latin:plumbum) and atomic number 82. Lead is a soft, malleable and heavy post-transition metal. Metallic lead has a bluish-white color after being freshly cut, but it soon tarnishes to a dull grayish color when exposed to air.","symbol":"Pb","xpos":14,"ypos":6,"wxpos":28,"wypos":6,"shells":[2,8,18,32,18,4],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p2","electron_configuration_semantic":"[Xe] 4f14 5d10 6s2 6p2","electron_affinity":34.4204,"electronegativity_pauling":1.87,"ionization_energies":[715.6,1450.5,3081.5,4083,6640],"cpk-hex":"575961","image":{"title":"Ultrapure Lead Bead from two sides. Original size in cm: 1.5 x 2","url":"https://upload.wikimedia.org/wikipedia/commons/6/63/Lead-2.jpg","attribution":"Chemical Elements, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/lead.php"},"block":"p"},{"name":"Bismuth","appearance":"lustrous silver","atomic_mass":208.980401,"boil":1837,"category":"post-transition metal","density":9.78,"discovered_by":"Claude François Geoffroy","melt":544.7,"molar_heat":25.52,"named_by":null,"number":83,"period":6,"group":15,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Bismuth","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_083_bismuth/element_083_bismuth_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_083_bismuth/element_083_bismuth.glb","spectral_img":null,"summary":"Bismuth is a chemical element with symbol Bi and atomic number 83. Bismuth, a pentavalent post-transition metal, chemically resembles arsenic and antimony. Elemental bismuth may occur naturally, although its sulfide and oxide form important commercial ores.","symbol":"Bi","xpos":15,"ypos":6,"wxpos":29,"wypos":6,"shells":[2,8,18,32,18,5],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p3","electron_configuration_semantic":"[Xe] 4f14 5d10 6s2 6p3","electron_affinity":90.924,"electronegativity_pauling":2.02,"ionization_energies":[703,1610,2466,4370,5400,8520],"cpk-hex":"9e4fb5","image":{"title":"Bismuth Crystal","url":"https://upload.wikimedia.org/wikipedia/commons/a/a5/Bismuth-2.jpg","attribution":"Jurii, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons, source: https://images-of-elements.com/bismuth.php"},"block":"p"},{"name":"Polonium","appearance":"silvery","atomic_mass":209,"boil":1235,"category":"post-transition metal","density":9.196,"discovered_by":"Pierre Curie","melt":527,"molar_heat":26.4,"named_by":null,"number":84,"period":6,"group":16,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Polonium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_084_polonium/element_084_polonium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_084_polonium/element_084_polonium.glb","spectral_img":null,"summary":"Polonium is a chemical element with symbol Po and atomic number 84, discovered in 1898 by Marie Curie and Pierre Curie. A rare and highly radioactive element with no stable isotopes, polonium is chemically similar to bismuth and tellurium, and it occurs in uranium ores. Applications of polonium are few.","symbol":"Po","xpos":16,"ypos":6,"wxpos":30,"wypos":6,"shells":[2,8,18,32,18,6],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p4","electron_configuration_semantic":"[Xe] 4f14 5d10 6s2 6p4","electron_affinity":136,"electronegativity_pauling":2,"ionization_energies":[812.1],"cpk-hex":"ab5c00","image":{"title":"This is only an illustration, not polonium itself. A silvery, radioactive metal, producing so much heat that it gets liquid and ionizes the surrounding air","url":"https://images-of-elements.com/polonium.jpg","attribution":"Chemical ELements A Virtual Museum, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0> source: https://images-of-elements.com/polonium.php"},"block":"p"},{"name":"Astatine","appearance":"unknown, probably metallic","atomic_mass":210,"boil":610,"category":"metalloid","density":6.35,"discovered_by":"Dale R. Corson","melt":575,"molar_heat":null,"named_by":null,"number":85,"period":6,"group":17,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Astatine","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_085_astatine/element_085_astatine_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_085_astatine/element_085_astatine.glb","spectral_img":null,"summary":"Astatine is a very rare radioactive chemical element with the chemical symbol At and atomic number 85. It occurs on Earth as the decay product of various heavier elements. All its isotopes are short-lived; the most stable is astatine-210, with a half-life of 8.1 hours.","symbol":"At","xpos":17,"ypos":6,"wxpos":31,"wypos":6,"shells":[2,8,18,32,18,7],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p5","electron_configuration_semantic":"[Xe] 4f14 5d10 6s2 6p5","electron_affinity":233,"electronegativity_pauling":2.2,"ionization_energies":[899.003],"cpk-hex":"754f45","image":{"title":"This is only an illustration, not astatine itself. Crystals similar to iodine, but darker in color than these, which due to the extreme radioactivity glow blue and evaporate to dark purple gas","url":"https://images-of-elements.com/astatine.jpg","attribution":"Chemical ELements A Virtual Museum, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0> source: https://images-of-elements.com/astatine.php"},"block":"p"},{"name":"Radon","appearance":"colorless gas, occasionally glows green or red in discharge tubes","atomic_mass":222,"boil":211.5,"category":"noble gas","density":9.73,"discovered_by":"Friedrich Ernst Dorn","melt":202,"molar_heat":null,"named_by":null,"number":86,"period":6,"group":18,"phase":"Gas","source":"https://en.wikipedia.org/wiki/Radon","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_086_radon/element_086_radon_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_086_radon/element_086_radon.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Radon_spectrum.png","summary":"Radon is a chemical element with symbol Rn and atomic number 86. It is a radioactive, colorless, odorless, tasteless noble gas, occurring naturally as a decay product of radium. Its most stable isotope, 222Rn, has a half-life of 3.8 days.","symbol":"Rn","xpos":18,"ypos":6,"wxpos":32,"wypos":6,"shells":[2,8,18,32,18,8],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6","electron_configuration_semantic":"[Xe] 4f14 5d10 6s2 6p6","electron_affinity":-68,"electronegativity_pauling":2.2,"ionization_energies":[1037],"cpk-hex":"428296","image":{"title":"This is only an illustration, not radon itself. Radon is said to glow red in discharge tubes, although it practically is never used for this, due to its strong radioactivity.","url":"https://images-of-elements.com/radon.jpg","attribution":"Chemical ELements A Virtual Museum, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0> source: https://images-of-elements.com/radon.php"},"block":"p"},{"name":"Francium","appearance":null,"atomic_mass":223,"boil":950,"category":"alkali metal","density":1.87,"discovered_by":"Marguerite Perey","melt":300,"molar_heat":null,"named_by":null,"number":87,"period":7,"group":1,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Francium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_087_francium/element_087_francium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_087_francium/element_087_francium.glb","spectral_img":null,"summary":"Francium is a chemical element with symbol Fr and atomic number 87. It used to be known as eka-caesium and actinium K. It is the second-least electronegative element, behind only caesium. Francium is a highly radioactive metal that decays into astatine, radium, and radon.","symbol":"Fr","xpos":1,"ypos":7,"wxpos":1,"wypos":7,"shells":[2,8,18,32,18,8,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s1","electron_configuration_semantic":"[Rn] 7s1","electron_affinity":46.89,"electronegativity_pauling":0.79,"ionization_energies":[380],"cpk-hex":"420066","image":{"title":"This is only an illustration, not francium itself.","url":"https://images-of-elements.com/francium.jpg","attribution":"Chemical ELements A Virtual Museum, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0> source: https://images-of-elements.com/francium.jpg"},"block":"s"},{"name":"Radium","appearance":"silvery white metallic","atomic_mass":226,"boil":2010,"category":"alkaline earth metal","density":5.5,"discovered_by":"Pierre Curie","melt":1233,"molar_heat":null,"named_by":null,"number":88,"period":7,"group":2,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Radium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_088_radium/element_088_radium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_088_radium/element_088_radium.glb","spectral_img":null,"summary":"Radium is a chemical element with symbol Ra and atomic number 88. It is the sixth element in group 2 of the periodic table, also known as the alkaline earth metals. Pure radium is almost colorless, but it readily combines with nitrogen (rather than oxygen) on exposure to air, forming a black surface layer of radium nitride (Ra3N2).","symbol":"Ra","xpos":2,"ypos":7,"wxpos":2,"wypos":7,"shells":[2,8,18,32,18,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2","electron_configuration_semantic":"[Rn] 7s2","electron_affinity":9.6485,"electronegativity_pauling":0.9,"ionization_energies":[509.3,979],"cpk-hex":"007d00","image":{"title":"Radium electroplated on a very small sample of copper foil and covered with polyurethane to prevent reaction with the air","url":"https://upload.wikimedia.org/wikipedia/commons/b/bb/Radium226.jpg","attribution":"grenadier, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons"},"block":"s"},{"name":"Actinium","appearance":null,"atomic_mass":227,"boil":3500,"category":"actinide","density":10,"discovered_by":"Friedrich Oskar Giesel","melt":1500,"molar_heat":27.2,"named_by":null,"number":89,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Actinium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_089_actinium/element_089_actinium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_089_actinium/element_089_actinium.glb","spectral_img":null,"summary":"Actinium is a radioactive chemical element with symbol Ac (not to be confused with the abbreviation for an acetyl group) and atomic number 89, which was discovered in 1899. It was the first non-primordial radioactive element to be isolated. Polonium, radium and radon were observed before actinium, but they were not isolated until 1902.","symbol":"Ac","xpos":3,"ypos":10,"wxpos":3,"wypos":7,"shells":[2,8,18,32,18,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 6d1","electron_configuration_semantic":"[Rn] 6d1 7s2","electron_affinity":33.77,"electronegativity_pauling":1.1,"ionization_energies":[499,1170],"cpk-hex":"70abfa","image":{"title":"Actinium-225 medical radioisotope held in a v-vial at ORNL. The blue glow comes from the ionization of surrounding air by alpha particles","url":"https://upload.wikimedia.org/wikipedia/commons/2/27/Actinium_sample_%2831481701837%29.png","attribution":"Oak Ridge National Laboratory, CC BY 2.0 <https://creativecommons.org/licenses/by/2.0>, via Wikimedia Commons, source: https://www.flickr.com/photos/oakridgelab/31481701837/"},"block":"f"},{"name":"Thorium","appearance":"silvery, often with black tarnish","atomic_mass":232.03774,"boil":5061,"category":"actinide","density":11.724,"discovered_by":"Jöns Jakob Berzelius","melt":2023,"molar_heat":26.23,"named_by":null,"number":90,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Thorium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_090_thorium/element_090_thorium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_090_thorium/element_090_thorium.glb","spectral_img":null,"summary":"Thorium is a chemical element with symbol Th and atomic number 90. A radioactive actinide metal, thorium is one of only two significantly radioactive elements that still occur naturally in large quantities as a primordial element (the other being uranium). It was discovered in 1828 by the Norwegian Reverend and amateur mineralogist Morten Thrane Esmark and identified by the Swedish chemist Jöns Jakob Berzelius, who named it after Thor, the Norse god of thunder.","symbol":"Th","xpos":4,"ypos":10,"wxpos":4,"wypos":7,"shells":[2,8,18,32,18,10,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 6d2","electron_configuration_semantic":"[Rn] 6d2 7s2","electron_affinity":112.72,"electronegativity_pauling":1.3,"ionization_energies":[587,1110,1930,2780],"cpk-hex":"00baff","image":{"title":"Thorium Metal in Ampoule, corroded","url":"https://upload.wikimedia.org/wikipedia/commons/f/f7/Thorium-1.jpg","attribution":"W. Oelen, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons"},"block":"f"},{"name":"Protactinium","appearance":"bright, silvery metallic luster","atomic_mass":231.035882,"boil":4300,"category":"actinide","density":15.37,"discovered_by":"William Crookes","melt":1841,"molar_heat":null,"named_by":"Otto Hahn","number":91,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Protactinium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_091_protactinium/element_091_protactinium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_091_protactinium/element_091_protactinium.glb","spectral_img":null,"summary":"Protactinium is a chemical element with symbol Pa and atomic number 91. It is a dense, silvery-gray metal which readily reacts with oxygen, water vapor and inorganic acids. It forms various chemical compounds where protactinium is usually present in the oxidation state +5, but can also assume +4 and even +2 or +3 states.","symbol":"Pa","xpos":5,"ypos":10,"wxpos":5,"wypos":7,"shells":[2,8,18,32,20,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f2 6d1","electron_configuration_semantic":"[Rn] 5f2 6d1 7s2","electron_affinity":53.03,"electronegativity_pauling":1.5,"ionization_energies":[568],"cpk-hex":"00a1ff","image":{"title":"This sample of Protactinium-233 (dark circular area in the photo) was photographed in the light from its own radioactive emission (the lighter area) at the National Reactor Testing Station in Idaho.","url":"https://upload.wikimedia.org/wikipedia/commons/a/af/Protactinium-233.jpg","attribution":"ENERGY.GOV, Public domain, via Wikimedia Commons"},"block":"f"},{"name":"Uranium","appearance":null,"atomic_mass":238.028913,"boil":4404,"category":"actinide","density":19.1,"discovered_by":"Martin Heinrich Klaproth","melt":1405.3,"molar_heat":27.665,"named_by":null,"number":92,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Uranium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_092_uranium/element_092_uranium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_092_uranium/element_092_uranium.glb","spectral_img":null,"summary":"Uranium is a chemical element with symbol U and atomic number 92. It is a silvery-white metal in the actinide series of the periodic table. A uranium atom has 92 protons and 92 electrons, of which 6 are valence electrons.","symbol":"U","xpos":6,"ypos":10,"wxpos":6,"wypos":7,"shells":[2,8,18,32,21,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f3 6d1","electron_configuration_semantic":"[Rn] 5f3 6d1 7s2","electron_affinity":50.94,"electronegativity_pauling":1.38,"ionization_energies":[597.6,1420],"cpk-hex":"008fff","image":{"title":"A biscuit of uranium metal after reduction via the Ames Process. c.1943.","url":"https://upload.wikimedia.org/wikipedia/commons/b/b2/Ames_Process_uranium_biscuit.jpg","attribution":"Unknown authorUnknown author, Public domain, via Wikimedia Commons"},"block":"f"},{"name":"Neptunium","appearance":"silvery metallic","atomic_mass":237,"boil":4447,"category":"actinide","density":20.45,"discovered_by":"Edwin McMillan","melt":912,"molar_heat":29.46,"named_by":null,"number":93,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Neptunium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_093_neptunium/element_093_neptunium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_093_neptunium/element_093_neptunium.glb","spectral_img":null,"summary":"Neptunium is a chemical element with symbol Np and atomic number 93. A radioactive actinide metal, neptunium is the first transuranic element. Its position in the periodic table just after uranium, named after the planet Uranus, led to it being named after Neptune, the next planet beyond Uranus.","symbol":"Np","xpos":7,"ypos":10,"wxpos":7,"wypos":7,"shells":[2,8,18,32,22,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f4 6d1","electron_configuration_semantic":"[Rn] 5f4 6d1 7s2","electron_affinity":45.85,"electronegativity_pauling":1.36,"ionization_energies":[604.5],"cpk-hex":"0080ff","image":{"title":"Neptunium 237 sphere (6 kg)","url":"https://upload.wikimedia.org/wikipedia/commons/e/e5/Neptunium2.jpg","attribution":"Los Alamos National Laboratory,, Public domain, via Wikimedia Commons"},"block":"f"},{"name":"Plutonium","appearance":"silvery white, tarnishing to dark gray in air","atomic_mass":244,"boil":3505,"category":"actinide","density":19.816,"discovered_by":"Glenn T. Seaborg","melt":912.5,"molar_heat":35.5,"named_by":null,"number":94,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Plutonium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_094_plutonium/element_094_plutonium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_094_plutonium/element_094_plutonium.glb","spectral_img":null,"summary":"Plutonium is a transuranic radioactive chemical element with symbol Pu and atomic number 94. It is an actinide metal of silvery-gray appearance that tarnishes when exposed to air, and forms a dull coating when oxidized. The element normally exhibits six allotropes and four oxidation states.","symbol":"Pu","xpos":8,"ypos":10,"wxpos":8,"wypos":7,"shells":[2,8,18,32,24,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f6","electron_configuration_semantic":"[Rn] 5f6 7s2","electron_affinity":-48.33,"electronegativity_pauling":1.28,"ionization_energies":[584.7],"cpk-hex":"006bff","image":{"title":"Plutonium Ring","url":"https://upload.wikimedia.org/wikipedia/commons/0/0f/Plutonium_ring.jpg","attribution":"Los Alamos National Laboratory, Attribution, via Wikimedia Commons"},"block":"f"},{"name":"Americium","appearance":"silvery white","atomic_mass":243,"boil":2880,"category":"actinide","density":12,"discovered_by":"Glenn T. Seaborg","melt":1449,"molar_heat":62.7,"named_by":null,"number":95,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Americium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_095_americium/element_095_americium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_095_americium/element_095_americium.glb","spectral_img":"https://en.wikipedia.org/wiki/File:Americium_spectrum_visible.png","summary":"Americium is a radioactive transuranic chemical element with symbol Am and atomic number 95. This member of the actinide series is located in the periodic table under the lanthanide element europium, and thus by analogy was named after the Americas. Americium was first produced in 1944 by the group of Glenn T.Seaborg from Berkeley, California, at the metallurgical laboratory of University of Chicago.","symbol":"Am","xpos":9,"ypos":10,"wxpos":9,"wypos":7,"shells":[2,8,18,32,25,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f7","electron_configuration_semantic":"[Rn] 5f7 7s2","electron_affinity":9.93,"electronegativity_pauling":1.13,"ionization_energies":[578],"cpk-hex":"545cf2","image":{"title":"A small disc of Am-241 under the microscope.","url":"https://upload.wikimedia.org/wikipedia/commons/e/ee/Americium_microscope.jpg","attribution":"Bionerd, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons"},"block":"f"},{"name":"Curium","appearance":"silvery metallic, glows purple in the dark","atomic_mass":247,"boil":3383,"category":"actinide","density":13.51,"discovered_by":"Glenn T. Seaborg","melt":1613,"molar_heat":null,"named_by":null,"number":96,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Curium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_096_curium/element_096_curium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_096_curium/element_096_curium.glb","spectral_img":null,"summary":"Curium is a transuranic radioactive chemical element with symbol Cm and atomic number 96. This element of the actinide series was named after Marie and Pierre Curie – both were known for their research on radioactivity. Curium was first intentionally produced and identified in July 1944 by the group of Glenn T. Seaborg at the University of California, Berkeley.","symbol":"Cm","xpos":10,"ypos":10,"wxpos":10,"wypos":7,"shells":[2,8,18,32,25,9,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f7 6d1","electron_configuration_semantic":"[Rn] 5f7 6d1 7s2","electron_affinity":27.17,"electronegativity_pauling":1.28,"ionization_energies":[581],"cpk-hex":"785ce3","image":{"title":"A piece of curium, which emitts strong radiation that makes it glow","url":"https://images-of-elements.com/s/curium-glow.jpg","attribution":"European Union, The Actinide Group, Institute for Transuranium Elements (JRC-ITU), source: https://images-of-elements.com/curium.php"},"block":"f"},{"name":"Berkelium","appearance":"silvery","atomic_mass":247,"boil":2900,"category":"actinide","density":14.78,"discovered_by":"Lawrence Berkeley National Laboratory","melt":1259,"molar_heat":null,"named_by":null,"number":97,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Berkelium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_097_berkelium/element_097_berkelium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_097_berkelium/element_097_berkelium.glb","spectral_img":null,"summary":"Berkelium is a transuranic radioactive chemical element with symbol Bk and atomic number 97. It is a member of the actinide and transuranium element series. It is named after the city of Berkeley, California, the location of the University of California Radiation Laboratory where it was discovered in December 1949.","symbol":"Bk","xpos":11,"ypos":10,"wxpos":11,"wypos":7,"shells":[2,8,18,32,27,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f9","electron_configuration_semantic":"[Rn] 5f9 7s2","electron_affinity":-165.24,"electronegativity_pauling":1.3,"ionization_energies":[601],"cpk-hex":"8a4fe3","image":{"title":"It took 250 days to make enough berkelium, shown here (in dissolved state), to synthesize element 117","url":"https://upload.wikimedia.org/wikipedia/commons/f/fc/Berkelium.jpg","attribution":"ORNL, Department of Energy, Public domain, via Wikimedia Commons"},"block":"f"},{"name":"Californium","appearance":"silvery","atomic_mass":251,"boil":1743,"category":"actinide","density":15.1,"discovered_by":"Lawrence Berkeley National Laboratory","melt":1173,"molar_heat":null,"named_by":null,"number":98,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Californium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_098_californium/element_098_californium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_098_californium/element_098_californium.glb","spectral_img":null,"summary":"Californium is a radioactive metallic chemical element with symbol Cf and atomic number 98. The element was first made in 1950 at the University of California Radiation Laboratory in Berkeley, by bombarding curium with alpha particles (helium-4 ions). It is an actinide element, the sixth transuranium element to be synthesized, and has the second-highest atomic mass of all the elements that have been produced in amounts large enough to see with the unaided eye (after einsteinium).","symbol":"Cf","xpos":12,"ypos":10,"wxpos":12,"wypos":7,"shells":[2,8,18,32,28,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f10","electron_configuration_semantic":"[Rn] 5f10 7s2","electron_affinity":-97.31,"electronegativity_pauling":1.3,"ionization_energies":[608],"cpk-hex":"a136d4","image":{"title":"A disc of californium metal (249Cf, 10 mg). The source implies that the disc has a diameter about twice the thickness of a typical pin, or on the order of 1 mm","url":"https://upload.wikimedia.org/wikipedia/commons/9/93/Californium.jpg","attribution":"United States Department of Energy (see File:Einsteinium.jpg), Public domain, via Wikimedia Commons"},"block":"f"},{"name":"Einsteinium","appearance":"silver-colored","atomic_mass":252,"boil":1269,"category":"actinide","density":8.84,"discovered_by":"Lawrence Berkeley National Laboratory","melt":1133,"molar_heat":null,"named_by":null,"number":99,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Einsteinium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_099_einsteinium/element_099_einsteinium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_099_einsteinium/element_099_einsteinium.glb","spectral_img":null,"summary":"Einsteinium is a synthetic element with symbol Es and atomic number 99. It is the seventh transuranic element, and an actinide. Einsteinium was discovered as a component of the debris of the first hydrogen bomb explosion in 1952, and named after Albert Einstein.","symbol":"Es","xpos":13,"ypos":10,"wxpos":13,"wypos":7,"shells":[2,8,18,32,29,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f11","electron_configuration_semantic":"[Rn] 5f11 7s2","electron_affinity":-28.6,"electronegativity_pauling":1.3,"ionization_energies":[619],"cpk-hex":"b31fd4","image":{"title":"300 micrograms of Einsteinium 253, which has a half-life of 20 days.","url":"https://upload.wikimedia.org/wikipedia/commons/5/55/Einsteinium.jpg","attribution":"Haire, R. G., US Department of Energy.Touched up by Materialscientist at en.wikipedia., Public domain, via Wikimedia Commons"},"block":"f"},{"name":"Fermium","appearance":null,"atomic_mass":257,"boil":null,"category":"actinide","density":null,"discovered_by":"Lawrence Berkeley National Laboratory","melt":1800,"molar_heat":null,"named_by":null,"number":100,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Fermium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_100_fermium/element_100_fermium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_100_fermium/element_100_fermium.glb","spectral_img":null,"summary":"Fermium is a synthetic element with symbol Fm and atomic number 100. It is a member of the actinide series. It is the heaviest element that can be formed by neutron bombardment of lighter elements, and hence the last element that can be prepared in macroscopic quantities, although pure fermium metal has not yet been prepared.","symbol":"Fm","xpos":14,"ypos":10,"wxpos":14,"wypos":7,"shells":[2,8,18,32,30,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f12","electron_configuration_semantic":"[Rn] 5f12 7s2","electron_affinity":33.96,"electronegativity_pauling":1.3,"ionization_energies":[627],"cpk-hex":"b31fba","image":{"title":"Fermium was first observed in the fallout from the Ivy Mike nuclear test.","url":"https://upload.wikimedia.org/wikipedia/commons/5/58/Ivy_Mike_-_mushroom_cloud.jpg","attribution":"U.S. Department of Energy, Public domain, via Wikimedia Commons"},"block":"f"},{"name":"Mendelevium","appearance":null,"atomic_mass":258,"boil":null,"category":"actinide","density":null,"discovered_by":"Lawrence Berkeley National Laboratory","melt":1100,"molar_heat":null,"named_by":null,"number":101,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Mendelevium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_101_mendelevium/element_101_mendelevium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_101_mendelevium/element_101_mendelevium.glb","spectral_img":null,"summary":"Mendelevium is a synthetic element with chemical symbol Md (formerly Mv) and atomic number 101. A metallic radioactive transuranic element in the actinide series, it is the first element that currently cannot be produced in macroscopic quantities through neutron bombardment of lighter elements. It is the antepenultimate actinide and the ninth transuranic element.","symbol":"Md","xpos":15,"ypos":10,"wxpos":15,"wypos":7,"shells":[2,8,18,32,31,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f13","electron_configuration_semantic":"[Rn] 5f13 7s2","electron_affinity":93.91,"electronegativity_pauling":1.3,"ionization_energies":[635],"cpk-hex":"b30da6","image":{"title":"This is only an illustration, not mendelevium itself. Chemically similar to Thulium, the highly radioactive heavy metal emits very energetic α-radiation.","url":"https://images-of-elements.com/s/mendelevium.jpg","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/mendelevium.php"},"block":"f"},{"name":"Nobelium","appearance":null,"atomic_mass":259,"boil":null,"category":"actinide","density":null,"discovered_by":"Joint Institute for Nuclear Research","melt":1100,"molar_heat":null,"named_by":null,"number":102,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Nobelium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_102_nobelium/element_102_nobelium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_102_nobelium/element_102_nobelium.glb","spectral_img":null,"summary":"Nobelium is a synthetic chemical element with symbol No and atomic number 102. It is named in honor of Alfred Nobel, the inventor of dynamite and benefactor of science. A radioactive metal, it is the tenth transuranic element and is the penultimate member of the actinide series.","symbol":"No","xpos":16,"ypos":10,"wxpos":16,"wypos":7,"shells":[2,8,18,32,32,8,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14","electron_configuration_semantic":"[Rn] 5f14 7s2","electron_affinity":-223.22,"electronegativity_pauling":1.3,"ionization_energies":[642],"cpk-hex":"bd0d87","image":{"title":"This is only an illustration, not nobelium itself. Nobelium can only be made in very small amounts and emits strong radiation of various kinds.","url":"https://images-of-elements.com/nobelium.jpg","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/nobelium.php"},"block":"f"},{"name":"Lawrencium","appearance":null,"atomic_mass":266,"boil":null,"category":"actinide","density":null,"discovered_by":"Lawrence Berkeley National Laboratory","melt":1900,"molar_heat":null,"named_by":null,"number":103,"period":7,"group":3,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Lawrencium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_103_lawrencium/element_103_lawrencium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_103_lawrencium/element_103_lawrencium.glb","spectral_img":null,"summary":"Lawrencium is a synthetic chemical element with chemical symbol Lr (formerly Lw) and atomic number 103. It is named in honor of Ernest Lawrence, inventor of the cyclotron, a device that was used to discover many artificial radioactive elements. A radioactive metal, lawrencium is the eleventh transuranic element and is also the final member of the actinide series.","symbol":"Lr","xpos":17,"ypos":10,"wxpos":17,"wypos":7,"shells":[2,8,18,32,32,8,3],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 7p1","electron_configuration_semantic":"[Rn] 5f14 7s2 7p1","electron_affinity":-30.04,"electronegativity_pauling":1.3,"ionization_energies":[470],"cpk-hex":"c70066","image":{"title":"This is only an illustration, not lawrencium itself. Lawrencium can only be made in very small amounts and emits strong radiation","url":"https://images-of-elements.com/lawrencium.jpg","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/lawrencium.php"},"block":"d"},{"name":"Rutherfordium","appearance":null,"atomic_mass":267,"boil":5800,"category":"transition metal","density":23.2,"discovered_by":"Joint Institute for Nuclear Research","melt":2400,"molar_heat":null,"named_by":null,"number":104,"period":7,"group":4,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Rutherfordium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_104_rutherfordium/element_104_rutherfordium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_104_rutherfordium/element_104_rutherfordium.glb","spectral_img":null,"summary":"Rutherfordium is a chemical element with symbol Rf and atomic number 104, named in honor of physicist Ernest Rutherford. It is a synthetic element (an element that can be created in a laboratory but is not found in nature) and radioactive; the most stable known isotope, 267Rf, has a half-life of approximately 1.3 hours. In the periodic table of the elements, it is a d - block element and the second of the fourth - row transition elements.","symbol":"Rf","xpos":4,"ypos":7,"wxpos":18,"wypos":7,"shells":[2,8,18,32,32,10,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d2","electron_configuration_semantic":"[Rn] 5f14 6d2 7s2","electron_affinity":null,"electronegativity_pauling":null,"ionization_energies":[580],"cpk-hex":"cc0059","image":{"title":"Decay traces in a spark chamber, not of rutherfordium, but of a pion. This is a completely different, unrelated particle, but the decay of rutherfordium would make streaks there, too.","url":"https://images-of-elements.com/s/rutherfordium.jpg","attribution":"Image © CERN, Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/rutherfordium.php"},"block":"d"},{"name":"Dubnium","appearance":null,"atomic_mass":268,"boil":null,"category":"transition metal","density":29.3,"discovered_by":"Joint Institute for Nuclear Research","melt":null,"molar_heat":null,"named_by":null,"number":105,"period":7,"group":5,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Dubnium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_105_dubnium/element_105_dubnium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_105_dubnium/element_105_dubnium.glb","spectral_img":null,"summary":"Dubnium is a chemical element with symbol Db and atomic number 105. It is named after the town of Dubna in Russia (north of Moscow), where it was first produced. It is a synthetic element (an element that can be created in a laboratory but is not found in nature) and radioactive; the most stable known isotope, dubnium-268, has a half-life of approximately 28 hours.","symbol":"Db","xpos":5,"ypos":7,"wxpos":19,"wypos":7,"shells":[2,8,18,32,32,11,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d3","electron_configuration_semantic":"*[Rn] 5f14 6d3 7s2","electron_affinity":null,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":"d1004f","image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/dubnium.php"},"block":"d"},{"name":"Seaborgium","appearance":null,"atomic_mass":269,"boil":null,"category":"transition metal","density":35,"discovered_by":"Lawrence Berkeley National Laboratory","melt":null,"molar_heat":null,"named_by":null,"number":106,"period":7,"group":6,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Seaborgium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_106_seaborgium/element_106_seaborgium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_106_seaborgium/element_106_seaborgium.glb","spectral_img":null,"summary":"Seaborgium is a synthetic element with symbol Sg and atomic number 106. Its most stable isotope 271Sg has a half-life of 1.9 minutes. A more recently discovered isotope 269Sg has a potentially slightly longer half-life (ca.","symbol":"Sg","xpos":6,"ypos":7,"wxpos":20,"wypos":7,"shells":[2,8,18,32,32,12,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d4","electron_configuration_semantic":"*[Rn] 5f14 6d4 7s2","electron_affinity":null,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":"d90045","image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/seaborgium.php"},"block":"d"},{"name":"Bohrium","appearance":null,"atomic_mass":270,"boil":null,"category":"transition metal","density":37.1,"discovered_by":"Gesellschaft für Schwerionenforschung","melt":null,"molar_heat":null,"named_by":null,"number":107,"period":7,"group":7,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Bohrium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_107_bohrium/element_107_bohrium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_107_bohrium/element_107_bohrium.glb","spectral_img":null,"summary":"Bohrium is a chemical element with symbol Bh and atomic number 107. It is named after Danish physicist Niels Bohr. It is a synthetic element (an element that can be created in a laboratory but is not found in nature) and radioactive; the most stable known isotope, 270Bh, has a half-life of approximately 61 seconds.","symbol":"Bh","xpos":7,"ypos":7,"wxpos":21,"wypos":7,"shells":[2,8,18,32,32,13,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d5","electron_configuration_semantic":"*[Rn] 5f14 6d5 7s2","electron_affinity":null,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":"e00038","image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/bohrium.php"},"block":"d"},{"name":"Hassium","appearance":null,"atomic_mass":269,"boil":null,"category":"transition metal","density":40.7,"discovered_by":"Gesellschaft für Schwerionenforschung","melt":126,"molar_heat":null,"named_by":null,"number":108,"period":7,"group":8,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Hassium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_108_hassium/element_108_hassium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_108_hassium/element_108_hassium.glb","spectral_img":null,"summary":"Hassium is a chemical element with symbol Hs and atomic number 108, named after the German state of Hesse. It is a synthetic element (an element that can be created in a laboratory but is not found in nature) and radioactive; the most stable known isotope, 269Hs, has a half-life of approximately 9.7 seconds, although an unconfirmed metastable state, 277mHs, may have a longer half-life of about 130 seconds. More than 100 atoms of hassium have been synthesized to date.","symbol":"Hs","xpos":8,"ypos":7,"wxpos":22,"wypos":7,"shells":[2,8,18,32,32,14,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d6","electron_configuration_semantic":"*[Rn] 5f14 6d6 7s2","electron_affinity":null,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":"e6002e","image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/hassium.php"},"block":"d"},{"name":"Meitnerium","appearance":null,"atomic_mass":278,"boil":null,"category":"unknown, probably transition metal","density":37.4,"discovered_by":"Gesellschaft für Schwerionenforschung","melt":null,"molar_heat":null,"named_by":null,"number":109,"period":7,"group":9,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Meitnerium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_109_meitnerium/element_109_meitnerium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_109_meitnerium/element_109_meitnerium.glb","spectral_img":null,"summary":"Meitnerium is a chemical element with symbol Mt and atomic number 109. It is an extremely radioactive synthetic element (an element not found in nature that can be created in a laboratory). The most stable known isotope, meitnerium-278, has a half-life of 7.6 seconds.","symbol":"Mt","xpos":9,"ypos":7,"wxpos":23,"wypos":7,"shells":[2,8,18,32,32,15,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d7","electron_configuration_semantic":"*[Rn] 5f14 6d7 7s2","electron_affinity":null,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":"eb0026","image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/meitnerium.php"},"block":"d"},{"name":"Darmstadtium","appearance":null,"atomic_mass":281,"boil":null,"category":"unknown, probably transition metal","density":34.8,"discovered_by":"Gesellschaft für Schwerionenforschung","melt":null,"molar_heat":null,"named_by":null,"number":110,"period":7,"group":10,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Darmstadtium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_110_darmstadtium/element_110_darmstadtium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_110_darmstadtium/element_110_darmstadtium.glb","spectral_img":null,"summary":"Darmstadtium is a chemical element with symbol Ds and atomic number 110. It is an extremely radioactive synthetic element. The most stable known isotope, darmstadtium-281, has a half-life of approximately 10 seconds.","symbol":"Ds","xpos":10,"ypos":7,"wxpos":24,"wypos":7,"shells":[2,8,18,32,32,16,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d8","electron_configuration_semantic":"*[Rn] 5f14 6d9 7s1","electron_affinity":null,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":null,"image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/darmstadtium.php"},"block":"d"},{"name":"Roentgenium","appearance":null,"atomic_mass":282,"boil":null,"category":"unknown, probably transition metal","density":28.7,"discovered_by":"Gesellschaft für Schwerionenforschung","melt":null,"molar_heat":null,"named_by":null,"number":111,"period":7,"group":11,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Roentgenium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_111_roentgenium/element_111_roentgenium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_111_roentgenium/element_111_roentgenium.glb","spectral_img":null,"summary":"Roentgenium is a chemical element with symbol Rg and atomic number 111. It is an extremely radioactive synthetic element (an element that can be created in a laboratory but is not found in nature); the most stable known isotope, roentgenium-282, has a half-life of 2.1 minutes. Roentgenium was first created in 1994 by the GSI Helmholtz Centre for Heavy Ion Research near Darmstadt, Germany.","symbol":"Rg","xpos":11,"ypos":7,"wxpos":25,"wypos":7,"shells":[2,8,18,32,32,17,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d9","electron_configuration_semantic":"*[Rn] 5f14 6d10 7s1","electron_affinity":151,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":null,"image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/roentgenium.php"},"block":"d"},{"name":"Copernicium","appearance":null,"atomic_mass":285,"boil":3570,"category":"transition metal","density":14,"discovered_by":"Gesellschaft für Schwerionenforschung","melt":null,"molar_heat":null,"named_by":null,"number":112,"period":7,"group":12,"phase":"Liquid","source":"https://en.wikipedia.org/wiki/Copernicium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_112_copernicium/element_112_copernicium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_112_copernicium/element_112_copernicium.glb","spectral_img":null,"summary":"Copernicium is a chemical element with symbol Cn and atomic number 112. It is an extremely radioactive synthetic element that can only be created in a laboratory. The most stable known isotope, copernicium-285, has a half-life of approximately 29 seconds, but it is possible that this copernicium isotope may have a nuclear isomer with a longer half-life, 8.9 min.","symbol":"Cn","xpos":12,"ypos":7,"wxpos":26,"wypos":7,"shells":[2,8,18,32,32,18,2],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d10","electron_configuration_semantic":"*[Rn] 5f14 6d10 7s2","electron_affinity":null,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":null,"image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/copernicium.php"},"block":"d"},{"name":"Nihonium","appearance":null,"atomic_mass":286,"boil":1430,"category":"unknown, probably transition metal","density":16,"discovered_by":"RIKEN","melt":700,"molar_heat":null,"named_by":null,"number":113,"period":7,"group":13,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Ununtrium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_113_nihonium/element_113_nihonium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_113_nihonium/element_113_nihonium.glb","spectral_img":null,"summary":"Nihonium is a chemical element with atomic number 113. It has a symbol Nh. It is a synthetic element (an element that can be created in a laboratory but is not found in nature) and is extremely radioactive; its most stable known isotope, nihonium-286, has a half-life of 20 seconds.","symbol":"Nh","xpos":13,"ypos":7,"wxpos":27,"wypos":7,"shells":[2,8,18,32,32,18,3],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d10 7p1","electron_configuration_semantic":"*[Rn] 5f14 6d10 7s2 7p1","electron_affinity":66.6,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":null,"image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/nihonium.php"},"block":"p"},{"name":"Flerovium","appearance":null,"atomic_mass":289,"boil":420,"category":"post-transition metal","density":14,"discovered_by":"Joint Institute for Nuclear Research","melt":340,"molar_heat":null,"named_by":null,"number":114,"period":7,"group":14,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Flerovium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_114_flerovium/element_114_flerovium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_114_flerovium/element_114_flerovium.glb","spectral_img":null,"summary":"Flerovium is a superheavy artificial chemical element with symbol Fl and atomic number 114. It is an extremely radioactive synthetic element. The element is named after the Flerov Laboratory of Nuclear Reactions of the Joint Institute for Nuclear Research in Dubna, Russia, where the element was discovered in 1998.","symbol":"Fl","xpos":14,"ypos":7,"wxpos":28,"wypos":7,"shells":[2,8,18,32,32,18,4],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d10 7p2","electron_configuration_semantic":"*[Rn] 5f14 6d10 7s2 7p2","electron_affinity":null,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":null,"image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/flerovium.php"},"block":"p"},{"name":"Moscovium","appearance":null,"atomic_mass":289,"boil":1400,"category":"unknown, probably post-transition metal","density":13.5,"discovered_by":"Joint Institute for Nuclear Research","melt":670,"molar_heat":null,"named_by":null,"number":115,"period":7,"group":15,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Ununpentium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_115_moscovium/element_115_moscovium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_115_moscovium/element_115_moscovium.glb","spectral_img":null,"summary":"Moscovium is the name of a synthetic superheavy element in the periodic table that has the symbol Mc and has the atomic number 115. It is an extremely radioactive element; its most stable known isotope, moscovium-289, has a half-life of only 220 milliseconds. It is also known as eka-bismuth or simply element 115.","symbol":"Mc","xpos":15,"ypos":7,"wxpos":29,"wypos":7,"shells":[2,8,18,32,32,18,5],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d10 7p3","electron_configuration_semantic":"*[Rn] 5f14 6d10 7s2 7p3","electron_affinity":35.3,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":null,"image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/moscovium.php"},"block":"p"},{"name":"Livermorium","appearance":null,"atomic_mass":293,"boil":1085,"category":"unknown, probably post-transition metal","density":12.9,"discovered_by":"Joint Institute for Nuclear Research","melt":709,"molar_heat":null,"named_by":null,"number":116,"period":7,"group":16,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Livermorium","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_116_livermorium/element_116_livermorium_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_116_livermorium/element_116_livermorium.glb","spectral_img":null,"summary":"Livermorium is a synthetic superheavy element with symbol Lv and atomic number 116. It is an extremely radioactive element that has only been created in the laboratory and has not been observed in nature. The element is named after the Lawrence Livermore National Laboratory in the United States, which collaborated with the Joint Institute for Nuclear Research in Dubna, Russia to discover livermorium in 2000.","symbol":"Lv","xpos":16,"ypos":7,"wxpos":30,"wypos":7,"shells":[2,8,18,32,32,18,6],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d10 7p4","electron_configuration_semantic":"*[Rn] 5f14 6d10 7s2 7p4","electron_affinity":74.9,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":null,"image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/livermorium.php"},"block":"p"},{"name":"Tennessine","appearance":null,"atomic_mass":294,"boil":883,"category":"unknown, probably metalloid","density":7.17,"discovered_by":"Joint Institute for Nuclear Research","melt":723,"molar_heat":null,"named_by":null,"number":117,"period":7,"group":17,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Tennessine","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_117_tennessine/element_117_tennessine_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_117_tennessine/element_117_tennessine.glb","spectral_img":null,"summary":"Tennessine is a superheavy artificial chemical element with an atomic number of 117 and a symbol of Ts. Also known as eka-astatine or element 117, it is the second-heaviest known element and penultimate element of the 7th period of the periodic table. As of 2016, fifteen tennessine atoms have been observed: six when it was first synthesized in 2010, seven in 2012, and two in 2014.","symbol":"Ts","xpos":17,"ypos":7,"wxpos":31,"wypos":7,"shells":[2,8,18,32,32,18,7],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d10 7p5","electron_configuration_semantic":"*[Rn] 5f14 6d10 7s2 7p5","electron_affinity":165.9,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":null,"image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/tenessine.php"},"block":"p"},{"name":"Oganesson","appearance":null,"atomic_mass":294,"boil":350,"category":"unknown, predicted to be noble gas","density":4.95,"discovered_by":"Joint Institute for Nuclear Research","melt":null,"molar_heat":null,"named_by":null,"number":118,"period":7,"group":18,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Oganesson","bohr_model_image":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_118_oganesson/element_118_oganesson_srp_th.png","bohr_model_3d":"https://storage.googleapis.com/search-ar-edu/periodic-table/element_118_oganesson/element_118_oganesson.glb","spectral_img":null,"summary":"Oganesson is IUPAC\'s name for the transactinide element with the atomic number 118 and element symbol Og. It is also known as eka-radon or element 118, and on the periodic table of the elements it is a p-block element and the last one of the 7th period. Oganesson is currently the only synthetic member of group 18.","symbol":"Og","xpos":18,"ypos":7,"wxpos":32,"wypos":7,"shells":[2,8,18,32,32,18,8],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d10 7p6","electron_configuration_semantic":"*[Rn] 5f14 6d10 7s2 7p6","electron_affinity":5.40318,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":null,"image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com/oganesson.php"},"block":"p"},{"name":"Ununennium","appearance":null,"atomic_mass":315,"boil":630,"category":"unknown, but predicted to be an alkali metal","density":3,"discovered_by":"GSI Helmholtz Centre for Heavy Ion Research","melt":null,"molar_heat":null,"named_by":null,"number":119,"period":8,"group":1,"phase":"Solid","source":"https://en.wikipedia.org/wiki/Ununennium","bohr_model_image":null,"bohr_model_3d":null,"spectral_img":null,"summary":"Ununennium, also known as eka-francium or simply element 119, is the hypothetical chemical element with symbol Uue and atomic number 119. Ununennium and Uue are the temporary systematic IUPAC name and symbol respectively, until a permanent name is decided upon. In the periodic table of the elements, it is expected to be an s-block element, an alkali metal, and the first element in the eighth period.","symbol":"Uue","xpos":1,"ypos":8,"wxpos":1,"wypos":8,"shells":[2,8,18,32,32,18,8,1],"electron_configuration":"1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p6 7s2 5f14 6d10 7p6 8s1","electron_configuration_semantic":"*[Uuo] 8s1","electron_affinity":63.87,"electronegativity_pauling":null,"ionization_energies":[],"cpk-hex":null,"image":{"title":"No Image Found","url":"https://images-of-elements.com/s/transactinoid.png","attribution":"Chemical Elments A Virtual Museum under a Creative Commons Attribution 3.0 Unported License, source: https://images-of-elements.com"},"block":"s"}]}');function Re(){return Re=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Re.apply(this,arguments)}const Pe={icon:function(e,t){return{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm178 479h-46.9c-10.2 0-19.9-4.9-25.9-13.2L512 460.4 406.8 605.8c-6 8.3-15.6 13.2-25.9 13.2H334c-6.5 0-10.3-7.4-6.5-12.7l178-246c3.2-4.4 9.7-4.4 12.9 0l178 246c3.9 5.3.1 12.7-6.4 12.7z",fill:t}},{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",fill:e}},{tag:"path",attrs:{d:"M518.4 360.3a7.95 7.95 0 00-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7h46.9c10.3 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.7 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.4-12.7l-178-246z",fill:e}}]}},name:"up-circle",theme:"twotone"};function Ne(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ie(e,t){if(e){if("string"==typeof e)return Ne(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ne(e,t):void 0}}function je(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,l=[],s=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){c=!0,i=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw i}}return l}}(e,t)||Ie(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Le(e){return Le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Le(e)}function Me(e){var t=function(e,t){if("object"!==Le(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Le(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Le(t)?t:String(t)}function Fe(e,t,n){return(t=Me(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function De(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}function We(e,t){if(null==e)return{};var n,r,i=De(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var Ue=i(184),He=i.n(Ue);function $e(e,t){(function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var n=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=360===t?e:Math.min(t,Math.max(0,parseFloat(e))),n&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:e=360===t?(e<0?e%t+t:e%t)/parseFloat(String(t)):e%t/parseFloat(String(t))}function Ye(e){return Math.min(1,Math.max(0,e))}function Ge(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function Ve(e){return e<=1?"".concat(100*Number(e),"%"):e}function Qe(e){return 1===e.length?"0"+e:String(e)}function qe(e,t,n){e=$e(e,255),t=$e(t,255),n=$e(n,255);var r=Math.max(e,t,n),i=Math.min(e,t,n),o=0,a=0,l=(r+i)/2;if(r===i)a=0,o=0;else{var s=r-i;switch(a=l>.5?s/(2-r-i):s/(r+i),r){case e:o=(t-n)/s+(t<n?6:0);break;case t:o=(n-e)/s+2;break;case n:o=(e-t)/s+4}o/=6}return{h:o,s:a,l}}function Ke(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*n*(t-e):n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function Xe(e,t,n){e=$e(e,255),t=$e(t,255),n=$e(n,255);var r=Math.max(e,t,n),i=Math.min(e,t,n),o=0,a=r,l=r-i,s=0===r?0:l/r;if(r===i)o=0;else{switch(r){case e:o=(t-n)/l+(t<n?6:0);break;case t:o=(n-e)/l+2;break;case n:o=(e-t)/l+4}o/=6}return{h:o,s,v:a}}function Je(e,t,n,r){var i=[Qe(Math.round(e).toString(16)),Qe(Math.round(t).toString(16)),Qe(Math.round(n).toString(16))];return r&&i[0].startsWith(i[0].charAt(1))&&i[1].startsWith(i[1].charAt(1))&&i[2].startsWith(i[2].charAt(1))?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function Ze(e){return et(e)/255}function et(e){return parseInt(e,16)}var tt={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function nt(e){var t={r:0,g:0,b:0},n=1,r=null,i=null,o=null,a=!1,l=!1;return"string"==typeof e&&(e=function(e){if(0===(e=e.trim().toLowerCase()).length)return!1;var t=!1;if(tt[e])e=tt[e],t=!0;else if("transparent"===e)return{r:0,g:0,b:0,a:0,format:"name"};var n=at.rgb.exec(e);return n?{r:n[1],g:n[2],b:n[3]}:(n=at.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=at.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=at.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=at.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=at.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=at.hex8.exec(e))?{r:et(n[1]),g:et(n[2]),b:et(n[3]),a:Ze(n[4]),format:t?"name":"hex8"}:(n=at.hex6.exec(e))?{r:et(n[1]),g:et(n[2]),b:et(n[3]),format:t?"name":"hex"}:(n=at.hex4.exec(e))?{r:et(n[1]+n[1]),g:et(n[2]+n[2]),b:et(n[3]+n[3]),a:Ze(n[4]+n[4]),format:t?"name":"hex8"}:!!(n=at.hex3.exec(e))&&{r:et(n[1]+n[1]),g:et(n[2]+n[2]),b:et(n[3]+n[3]),format:t?"name":"hex"}}(e)),"object"==typeof e&&(lt(e.r)&&lt(e.g)&&lt(e.b)?(t=function(e,t,n){return{r:255*$e(e,255),g:255*$e(t,255),b:255*$e(n,255)}}(e.r,e.g,e.b),a=!0,l="%"===String(e.r).substr(-1)?"prgb":"rgb"):lt(e.h)&&lt(e.s)&&lt(e.v)?(r=Ve(e.s),i=Ve(e.v),t=function(e,t,n){e=6*$e(e,360),t=$e(t,100),n=$e(n,100);var r=Math.floor(e),i=e-r,o=n*(1-t),a=n*(1-i*t),l=n*(1-(1-i)*t),s=r%6;return{r:255*[n,a,o,o,l,n][s],g:255*[l,n,n,a,o,o][s],b:255*[o,o,l,n,n,a][s]}}(e.h,r,i),a=!0,l="hsv"):lt(e.h)&&lt(e.s)&&lt(e.l)&&(r=Ve(e.s),o=Ve(e.l),t=function(e,t,n){var r,i,o;if(e=$e(e,360),t=$e(t,100),n=$e(n,100),0===t)i=n,o=n,r=n;else{var a=n<.5?n*(1+t):n+t-n*t,l=2*n-a;r=Ke(l,a,e+1/3),i=Ke(l,a,e),o=Ke(l,a,e-1/3)}return{r:255*r,g:255*i,b:255*o}}(e.h,r,o),a=!0,l="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(n=e.a)),n=Ge(n),{ok:a,format:e.format||l,r:Math.min(255,Math.max(t.r,0)),g:Math.min(255,Math.max(t.g,0)),b:Math.min(255,Math.max(t.b,0)),a:n}}var rt="(?:".concat("[-\\+]?\\d*\\.\\d+%?",")|(?:").concat("[-\\+]?\\d+%?",")"),it="[\\s|\\(]+(".concat(rt,")[,|\\s]+(").concat(rt,")[,|\\s]+(").concat(rt,")\\s*\\)?"),ot="[\\s|\\(]+(".concat(rt,")[,|\\s]+(").concat(rt,")[,|\\s]+(").concat(rt,")[,|\\s]+(").concat(rt,")\\s*\\)?"),at={CSS_UNIT:new RegExp(rt),rgb:new RegExp("rgb"+it),rgba:new RegExp("rgba"+ot),hsl:new RegExp("hsl"+it),hsla:new RegExp("hsla"+ot),hsv:new RegExp("hsv"+it),hsva:new RegExp("hsva"+ot),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function lt(e){return Boolean(at.CSS_UNIT.exec(String(e)))}var st=2,ct=.16,ut=.05,mt=.05,pt=.15,dt=5,ht=4,ft=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function gt(e){var t=Xe(e.r,e.g,e.b);return{h:360*t.h,s:t.s,v:t.v}}function bt(e){var t=e.r,n=e.g,r=e.b;return"#".concat(Je(t,n,r,!1))}function yt(e,t,n){var r;return(r=Math.round(e.h)>=60&&Math.round(e.h)<=240?n?Math.round(e.h)-st*t:Math.round(e.h)+st*t:n?Math.round(e.h)+st*t:Math.round(e.h)-st*t)<0?r+=360:r>=360&&(r-=360),r}function _t(e,t,n){return 0===e.h&&0===e.s?e.s:((r=n?e.s-ct*t:t===ht?e.s+ct:e.s+ut*t)>1&&(r=1),n&&t===dt&&r>.1&&(r=.1),r<.06&&(r=.06),Number(r.toFixed(2)));var r}function vt(e,t,n){var r;return(r=n?e.v+mt*t:e.v-pt*t)>1&&(r=1),Number(r.toFixed(2))}function wt(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[],r=nt(e),i=dt;i>0;i-=1){var o=gt(r),a=bt(nt({h:yt(o,i,!0),s:_t(o,i,!0),v:vt(o,i,!0)}));n.push(a)}n.push(bt(r));for(var l=1;l<=ht;l+=1){var s=gt(r),c=bt(nt({h:yt(s,l),s:_t(s,l),v:vt(s,l)}));n.push(c)}return"dark"===t.theme?ft.map((function(e){var r,i,o,a=e.index,l=e.opacity;return bt((r=nt(t.backgroundColor||"#141414"),o=100*l/100,{r:((i=nt(n[a])).r-r.r)*o+r.r,g:(i.g-r.g)*o+r.g,b:(i.b-r.b)*o+r.b}))})):n}var kt={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1677FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},xt={},Ct={};Object.keys(kt).forEach((function(e){xt[e]=wt(kt[e]),xt[e].primary=xt[e][5],Ct[e]=wt(kt[e],{theme:"dark",backgroundColor:"#141414"}),Ct[e].primary=Ct[e][5]})),xt.red,xt.volcano,xt.gold,xt.orange,xt.yellow,xt.lime,xt.green,xt.cyan;var At=xt.blue;xt.geekblue,xt.purple,xt.magenta,xt.grey,xt.grey;const St=(0,t.createContext)({});function Et(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Et(Object(n),!0).forEach((function(t){Fe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Et(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function zt(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}var Ot="data-rc-order",Tt="data-rc-priority",Rt="rc-util-key",Pt=new Map;function Nt(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).mark;return e?e.startsWith("data-")?e:"data-".concat(e):Rt}function It(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function jt(e){return Array.from((Pt.get(e)||e).children).filter((function(e){return"STYLE"===e.tagName}))}function Lt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!zt())return null;var n=t.csp,r=t.prepend,i=t.priority,o=void 0===i?0:i,a=function(e){return"queue"===e?"prependQueue":e?"prepend":"append"}(r),l="prependQueue"===a,s=document.createElement("style");s.setAttribute(Ot,a),l&&o&&s.setAttribute(Tt,"".concat(o)),null!=n&&n.nonce&&(s.nonce=null==n?void 0:n.nonce),s.innerHTML=e;var c=It(t),u=c.firstChild;if(r){if(l){var m=jt(c).filter((function(e){if(!["prepend","prependQueue"].includes(e.getAttribute(Ot)))return!1;var t=Number(e.getAttribute(Tt)||0);return o>=t}));if(m.length)return c.insertBefore(s,m[m.length-1].nextSibling),s}c.insertBefore(s,u)}else c.appendChild(s);return s}function Mt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return jt(It(t)).find((function(n){return n.getAttribute(Nt(t))===e}))}function Ft(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Mt(e,t);n&&It(t).removeChild(n)}function Dt(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){var n=Pt.get(e);if(!n||!function(e,t){if(!e)return!1;if(e.contains)return e.contains(t);for(var n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}(document,n)){var r=Lt("",t),i=r.parentNode;Pt.set(e,i),e.removeChild(r)}}(It(n),n);var r,i,o,a=Mt(t,n);if(a)return null!==(r=n.csp)&&void 0!==r&&r.nonce&&a.nonce!==(null===(i=n.csp)||void 0===i?void 0:i.nonce)&&(a.nonce=null===(o=n.csp)||void 0===o?void 0:o.nonce),a.innerHTML!==e&&(a.innerHTML=e),a;var l=Lt(e,n);return l.setAttribute(Nt(n),t),l}function Wt(e){var t;return null==e||null===(t=e.getRootNode)||void 0===t?void 0:t.call(e)}var Ut={},Ht=[];function $t(e,t){}function Yt(e,t){}function Gt(e,t,n){t||Ut[n]||(e(!1,n),Ut[n]=!0)}function Vt(e,t){Gt($t,e,t)}Vt.preMessage=function(e){Ht.push(e)},Vt.resetWarned=function(){Ut={}},Vt.noteOnce=function(e,t){Gt(Yt,e,t)};const Qt=Vt;function qt(e){return"object"===Le(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===Le(e.icon)||"function"==typeof e.icon)}function Kt(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){var r,i=e[n];return"class"===n?(t.className=i,delete t.class):(delete t[n],t[(r=n,r.replace(/-(.)/g,(function(e,t){return t.toUpperCase()})))]=i),t}),{})}function Xt(e,n,r){return r?t.createElement(e.tag,Bt(Bt({key:n},Kt(e.attrs)),r),(e.children||[]).map((function(t,r){return Xt(t,"".concat(n,"-").concat(e.tag,"-").concat(r))}))):t.createElement(e.tag,Bt({key:n},Kt(e.attrs)),(e.children||[]).map((function(t,r){return Xt(t,"".concat(n,"-").concat(e.tag,"-").concat(r))})))}function Jt(e){return wt(e)[0]}function Zt(e){return e?Array.isArray(e)?e:[e]:[]}var en=["icon","className","onClick","style","primaryColor","secondaryColor"],tn={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1},nn=function(e){var n,r,i,o,a,l,s,c=e.icon,u=e.className,m=e.onClick,p=e.style,d=e.primaryColor,h=e.secondaryColor,f=We(e,en),g=t.useRef(),b=tn;if(d&&(b={primaryColor:d,secondaryColor:h||Jt(d)}),n=g,r=(0,t.useContext)(St),i=r.csp,o=r.prefixCls,a="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",o&&(a=a.replace(/anticon/g,o)),(0,t.useEffect)((function(){var e,t=function(e){return Wt(e)instanceof ShadowRoot}(e=n.current)?Wt(e):null;Dt(a,"@ant-design-icons",{prepend:!0,csp:i,attachTo:t})}),[]),l=qt(c),s="icon should be icon definiton, but got ".concat(c),Qt(l,"[@ant-design/icons] ".concat(s)),!qt(c))return null;var y=c;return y&&"function"==typeof y.icon&&(y=Bt(Bt({},y),{},{icon:y.icon(b.primaryColor,b.secondaryColor)})),Xt(y.icon,"svg-".concat(y.name),Bt(Bt({className:u,onClick:m,style:p,"data-icon":y.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},f),{},{ref:g}))};nn.displayName="IconReact",nn.getTwoToneColors=function(){return Bt({},tn)},nn.setTwoToneColors=function(e){var t=e.primaryColor,n=e.secondaryColor;tn.primaryColor=t,tn.secondaryColor=n||Jt(t),tn.calculated=!!n};const rn=nn;function on(e){var t=je(Zt(e),2),n=t[0],r=t[1];return rn.setTwoToneColors({primaryColor:n,secondaryColor:r})}var an=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];on(At.primary);var ln=t.forwardRef((function(e,n){var r,i=e.className,o=e.icon,a=e.spin,l=e.rotate,s=e.tabIndex,c=e.onClick,u=e.twoToneColor,m=We(e,an),p=t.useContext(St),d=p.prefixCls,h=void 0===d?"anticon":d,f=p.rootClassName,g=He()(f,h,(Fe(r={},"".concat(h,"-").concat(o.name),!!o.name),Fe(r,"".concat(h,"-spin"),!!a||"loading"===o.name),r),i),b=s;void 0===b&&c&&(b=-1);var y=l?{msTransform:"rotate(".concat(l,"deg)"),transform:"rotate(".concat(l,"deg)")}:void 0,_=je(Zt(u),2),v=_[0],w=_[1];return t.createElement("span",Re({role:"img","aria-label":o.name},m,{ref:n,tabIndex:b,onClick:c,className:g}),t.createElement(rn,{icon:o,primaryColor:v,secondaryColor:w,style:y}))}));ln.displayName="AntdIcon",ln.getTwoToneColor=function(){var e=rn.getTwoToneColors();return e.calculated?[e.primaryColor,e.secondaryColor]:e.primaryColor},ln.setTwoToneColor=on;const sn=ln;var cn=function(e,n){return t.createElement(sn,Re({},e,{ref:n,icon:Pe}))};const un=t.forwardRef(cn);var mn=i(864);function pn(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[];return t.Children.forEach(e,(function(e){(null!=e||n.keepEmpty)&&(Array.isArray(e)?r=r.concat(pn(e)):(0,mn.isFragment)(e)&&e.props?r=r.concat(pn(e.props.children,n)):r.push(e))})),r}function dn(e){return["small","middle","large"].includes(e)}function hn(e){return!!e&&"number"==typeof e&&!Number.isNaN(e)}const fn=t.createContext({getPrefixCls:(e,t)=>t||(e?`ant-${e}`:"ant"),iconPrefixCls:"anticon"}),{Consumer:gn}=fn,bn=t.createContext(void 0);function yn(e){return function(e){if(Array.isArray(e))return Ne(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Ie(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}const _n=function(e){for(var t,n=0,r=0,i=e.length;i>=4;++r,i-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(i){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)};function vn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function wn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Me(r.key),r)}}function kn(e,t,n){return t&&wn(e.prototype,t),n&&wn(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}const xn=function(){function e(t){vn(this,e),Fe(this,"instanceId",void 0),Fe(this,"cache",new Map),this.instanceId=t}return kn(e,[{key:"get",value:function(e){return this.cache.get(e.join("%"))||null}},{key:"update",value:function(e,t){var n=e.join("%"),r=t(this.cache.get(n));null===r?this.cache.delete(n):this.cache.set(n,r)}}]),e}();var Cn="data-token-hash",An="data-css-hash",Sn="__cssinjs_instance__";const En=t.createContext({hashPriority:"low",cache:function(){var e=Math.random().toString(12).slice(2);if("undefined"!=typeof document&&document.head&&document.body){var t=document.body.querySelectorAll("style[".concat(An,"]"))||[],n=document.head.firstChild;Array.from(t).forEach((function(t){t[Sn]=t[Sn]||e,t[Sn]===e&&document.head.insertBefore(t,n)}));var r={};Array.from(document.querySelectorAll("style[".concat(An,"]"))).forEach((function(t){var n,i=t.getAttribute(An);r[i]?t[Sn]===e&&(null===(n=t.parentNode)||void 0===n||n.removeChild(t)):r[i]=!0}))}return new xn(e)}(),defaultCache:!0});var Bn=function(){function e(){vn(this,e),Fe(this,"cache",void 0),Fe(this,"keys",void 0),Fe(this,"cacheCallTimes",void 0),this.cache=new Map,this.keys=[],this.cacheCallTimes=0}return kn(e,[{key:"size",value:function(){return this.keys.length}},{key:"internalGet",value:function(e){var t,n,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i={map:this.cache};return e.forEach((function(e){var t,n;i=i?null===(t=i)||void 0===t||null===(n=t.map)||void 0===n?void 0:n.get(e):void 0})),null!==(t=i)&&void 0!==t&&t.value&&r&&(i.value[1]=this.cacheCallTimes++),null===(n=i)||void 0===n?void 0:n.value}},{key:"get",value:function(e){var t;return null===(t=this.internalGet(e,!0))||void 0===t?void 0:t[0]}},{key:"has",value:function(e){return!!this.internalGet(e)}},{key:"set",value:function(t,n){var r=this;if(!this.has(t)){if(this.size()+1>e.MAX_CACHE_SIZE+e.MAX_CACHE_OFFSET){var i=this.keys.reduce((function(e,t){var n=je(e,2)[1];return r.internalGet(t)[1]<n?[t,r.internalGet(t)[1]]:e}),[this.keys[0],this.cacheCallTimes]),o=je(i,1)[0];this.delete(o)}this.keys.push(t)}var a=this.cache;t.forEach((function(e,i){if(i===t.length-1)a.set(e,{value:[n,r.cacheCallTimes++]});else{var o=a.get(e);o?o.map||(o.map=new Map):a.set(e,{map:new Map}),a=a.get(e).map}}))}},{key:"deleteByPath",value:function(e,t){var n,r=e.get(t[0]);if(1===t.length)return r.map?e.set(t[0],{map:r.map}):e.delete(t[0]),null===(n=r.value)||void 0===n?void 0:n[0];var i=this.deleteByPath(r.map,t.slice(1));return r.map&&0!==r.map.size||r.value||e.delete(t[0]),i}},{key:"delete",value:function(e){if(this.has(e))return this.keys=this.keys.filter((function(t){return!function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(t,e)})),this.deleteByPath(this.cache,e)}}]),e}();Fe(Bn,"MAX_CACHE_SIZE",20),Fe(Bn,"MAX_CACHE_OFFSET",5);var zn=0,On=function(){function e(t){vn(this,e),Fe(this,"derivatives",void 0),Fe(this,"id",void 0),this.derivatives=Array.isArray(t)?t:[t],this.id=zn,0===t.length&&t.length,zn+=1}return kn(e,[{key:"getDerivativeToken",value:function(e){return this.derivatives.reduce((function(t,n){return n(e,t)}),void 0)}}]),e}(),Tn=new Bn,Rn=new WeakMap,Pn={},Nn=new WeakMap;function In(e){var t=Nn.get(e)||"";return t||(Object.keys(e).forEach((function(n){var r=e[n];t+=n,r instanceof On?t+=r.id:r&&"object"===Le(r)?t+=In(r):t+=r})),Nn.set(e,t)),t}var jn="random-".concat(Date.now(),"-").concat(Math.random()).replace(/\./g,""),Ln="_bAmBoO_";var Mn=void 0,Fn=zt()?t.useLayoutEffect:t.useEffect;const Dn=function(e,n){var r=t.useRef(!0);Fn((function(){return e(r.current)}),n),Fn((function(){return r.current=!1,function(){r.current=!0}}),[])};var Wn=Bt({},n).useInsertionEffect;const Un=Wn?function(e,t,n){return Wn((function(){return e(),t()}),n)}:function(e,n,r){t.useMemo(e,r),Dn((function(){return n(!0)}),r)},Hn=void 0!==Bt({},n).useInsertionEffect?function(e){var n=[],r=!1;return t.useEffect((function(){return r=!1,function(){r=!0,n.length&&n.forEach((function(e){return e()}))}}),e),function(e){r||n.push(e)}}:function(){return function(e){e()}},$n=function(){return!1};function Yn(e,n,r,i,o){var a=t.useContext(En).cache,l=[e].concat(yn(n)),s=l.join("_"),c=Hn([s]),u=($n(),function(e){a.update(l,(function(t){var n=je(t||[],2),i=n[0],o=[void 0===i?0:i,n[1]||r()];return e?e(o):o}))});t.useMemo((function(){u()}),[s]);var m=a.get(l)[1];return Un((function(){null==o||o(m)}),(function(e){return u((function(t){var n=je(t,2),r=n[0],i=n[1];return e&&0===r&&(null==o||o(m)),[r+1,i]})),function(){a.update(l,(function(e){var t=je(e||[],2),n=t[0],r=void 0===n?0:n,o=t[1];return 0==r-1?(c((function(){return null==i?void 0:i(o,!1)})),null):[r-1,o]}))}}),[s]),m}var Gn={},Vn="css",Qn=new Map,qn=0;var Kn=function(e,t,n,r){var i=Bt(Bt({},n.getDerivativeToken(e)),t);return r&&(i=r(i)),i};function Xn(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=(0,t.useContext)(En).cache.instanceId,o=r.salt,a=void 0===o?"":o,l=r.override,s=void 0===l?Gn:l,c=r.formatToken,u=r.getComputedToken,m=function(e,t){for(var r=Rn,i=0;i<t.length;i+=1){var o=t[i];r.has(o)||r.set(o,new WeakMap),r=r.get(o)}return r.has(Pn)||r.set(Pn,Object.assign.apply(Object,[{}].concat(yn(n)))),r.get(Pn)}(0,n),p=In(m),d=In(s),h=Yn("token",[a,e.id,p,d],(function(){var t=u?u(m,s,e):Kn(m,s,e,c),n=function(e,t){return _n("".concat(t,"_").concat(In(e)))}(t,a);t._tokenKey=n,function(e){Qn.set(e,(Qn.get(e)||0)+1)}(n);var r="".concat(Vn,"-").concat(_n(n));return t._hashId=r,[t,r]}),(function(e){!function(e,t){Qn.set(e,(Qn.get(e)||0)-1);var n=Array.from(Qn.keys()),r=n.filter((function(e){return(Qn.get(e)||0)<=0}));n.length-r.length>qn&&r.forEach((function(e){!function(e,t){"undefined"!=typeof document&&document.querySelectorAll("style[".concat(Cn,'="').concat(e,'"]')).forEach((function(e){var n;e[Sn]===t&&(null===(n=e.parentNode)||void 0===n||n.removeChild(e))}))}(e,t),Qn.delete(e)}))}(e[0]._tokenKey,i)}));return h}const Jn={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Zn="-ms-",er="-moz-",tr="-webkit-",nr="comm",rr="rule",ir="decl",or="@import",ar="@keyframes",lr="@layer",sr=Math.abs,cr=String.fromCharCode,ur=Object.assign;function mr(e){return e.trim()}function pr(e,t,n){return e.replace(t,n)}function dr(e,t){return e.indexOf(t)}function hr(e,t){return 0|e.charCodeAt(t)}function fr(e,t,n){return e.slice(t,n)}function gr(e){return e.length}function br(e){return e.length}function yr(e,t){return t.push(e),e}function _r(e,t){for(var n="",r=br(e),i=0;i<r;i++)n+=t(e[i],i,e,t)||"";return n}function vr(e,t,n,r){switch(e.type){case lr:if(e.children.length)break;case or:case ir:return e.return=e.return||e.value;case nr:return"";case ar:return e.return=e.value+"{"+_r(e.children,r)+"}";case rr:e.value=e.props.join(",")}return gr(n=_r(e.children,r))?e.return=e.value+"{"+n+"}":""}var wr=1,kr=1,xr=0,Cr=0,Ar=0,Sr="";function Er(e,t,n,r,i,o,a){return{value:e,root:t,parent:n,type:r,props:i,children:o,line:wr,column:kr,length:a,return:""}}function Br(e,t){return ur(Er("",null,null,"",null,null,0),e,{length:-e.length},t)}function zr(){return Ar=Cr>0?hr(Sr,--Cr):0,kr--,10===Ar&&(kr=1,wr--),Ar}function Or(){return Ar=Cr<xr?hr(Sr,Cr++):0,kr++,10===Ar&&(kr=1,wr++),Ar}function Tr(){return hr(Sr,Cr)}function Rr(){return Cr}function Pr(e,t){return fr(Sr,e,t)}function Nr(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function Ir(e){return wr=kr=1,xr=gr(Sr=e),Cr=0,[]}function jr(e){return Sr="",e}function Lr(e){return mr(Pr(Cr-1,Dr(91===e?e+2:40===e?e+1:e)))}function Mr(e){for(;(Ar=Tr())&&Ar<33;)Or();return Nr(e)>2||Nr(Ar)>3?"":" "}function Fr(e,t){for(;--t&&Or()&&!(Ar<48||Ar>102||Ar>57&&Ar<65||Ar>70&&Ar<97););return Pr(e,Rr()+(t<6&&32==Tr()&&32==Or()))}function Dr(e){for(;Or();)switch(Ar){case e:return Cr;case 34:case 39:34!==e&&39!==e&&Dr(Ar);break;case 40:41===e&&Dr(e);break;case 92:Or()}return Cr}function Wr(e,t){for(;Or()&&e+Ar!==57&&(e+Ar!==84||47!==Tr()););return"/*"+Pr(t,Cr-1)+"*"+cr(47===e?e:Or())}function Ur(e){for(;!Nr(Tr());)Or();return Pr(e,Cr)}function Hr(e){return jr($r("",null,null,null,[""],e=Ir(e),0,[0],e))}function $r(e,t,n,r,i,o,a,l,s){for(var c=0,u=0,m=a,p=0,d=0,h=0,f=1,g=1,b=1,y=0,_="",v=i,w=o,k=r,x=_;g;)switch(h=y,y=Or()){case 40:if(108!=h&&58==hr(x,m-1)){-1!=dr(x+=pr(Lr(y),"&","&\f"),"&\f")&&(b=-1);break}case 34:case 39:case 91:x+=Lr(y);break;case 9:case 10:case 13:case 32:x+=Mr(h);break;case 92:x+=Fr(Rr()-1,7);continue;case 47:switch(Tr()){case 42:case 47:yr(Gr(Wr(Or(),Rr()),t,n),s);break;default:x+="/"}break;case 123*f:l[c++]=gr(x)*b;case 125*f:case 59:case 0:switch(y){case 0:case 125:g=0;case 59+u:-1==b&&(x=pr(x,/\f/g,"")),d>0&&gr(x)-m&&yr(d>32?Vr(x+";",r,n,m-1):Vr(pr(x," ","")+";",r,n,m-2),s);break;case 59:x+=";";default:if(yr(k=Yr(x,t,n,c,u,i,l,_,v=[],w=[],m),o),123===y)if(0===u)$r(x,t,k,k,v,o,m,l,w);else switch(99===p&&110===hr(x,3)?100:p){case 100:case 108:case 109:case 115:$r(e,k,k,r&&yr(Yr(e,k,k,0,0,i,l,_,i,v=[],m),w),i,w,m,l,r?v:w);break;default:$r(x,k,k,k,[""],w,0,l,w)}}c=u=d=0,f=b=1,_=x="",m=a;break;case 58:m=1+gr(x),d=h;default:if(f<1)if(123==y)--f;else if(125==y&&0==f++&&125==zr())continue;switch(x+=cr(y),y*f){case 38:b=u>0?1:(x+="\f",-1);break;case 44:l[c++]=(gr(x)-1)*b,b=1;break;case 64:45===Tr()&&(x+=Lr(Or())),p=Tr(),u=m=gr(_=x+=Ur(Rr())),y++;break;case 45:45===h&&2==gr(x)&&(f=0)}}return o}function Yr(e,t,n,r,i,o,a,l,s,c,u){for(var m=i-1,p=0===i?o:[""],d=br(p),h=0,f=0,g=0;h<r;++h)for(var b=0,y=fr(e,m+1,m=sr(f=a[h])),_=e;b<d;++b)(_=mr(f>0?p[b]+" "+y:pr(y,/&\f/g,p[b])))&&(s[g++]=_);return Er(e,t,n,0===i?rr:l,s,c,u)}function Gr(e,t,n){return Er(e,t,n,nr,cr(Ar),fr(e,2,-2),0)}function Vr(e,t,n,r){return Er(e,t,n,ir,fr(e,0,r),fr(e,r+1,-1),r)}var Qr,qr="data-ant-cssinjs-cache-path",Kr="_FILE_STYLE__",Xr=!0;var Jr=zt(),Zr="_multi_value_";function ei(e){return _r(Hr(e),vr).replace(/\{%%%\:[^;];}/g,";")}var ti=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{root:!0,parentSelectors:[]},i=r.root,o=r.injectHash,a=r.parentSelectors,l=n.hashId,s=n.layer,c=(n.path,n.hashPriority),u=n.transformers,m=void 0===u?[]:u,p=(n.linters,""),d={};function h(t){var r=t.getName(l);if(!d[r]){var i=je(e(t.style,n,{root:!1,parentSelectors:a}),1)[0];d[r]="@keyframes ".concat(t.getName(l)).concat(i)}}var f=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return t.forEach((function(t){Array.isArray(t)?e(t,n):t&&n.push(t)})),n}(Array.isArray(t)?t:[t]);if(f.forEach((function(t){var r="string"!=typeof t||i?t:{};if("string"==typeof r)p+="".concat(r,"\n");else if(r._keyframe)h(r);else{var s=m.reduce((function(e,t){var n;return(null==t||null===(n=t.visit)||void 0===n?void 0:n.call(t,e))||e}),r);Object.keys(s).forEach((function(t){var r=s[t];if("object"!==Le(r)||!r||"animationName"===t&&r._keyframe||function(e){return"object"===Le(e)&&e&&("_skip_check_"in e||Zr in e)}(r)){var u;function w(e,t){var n=e.replace(/[A-Z]/g,(function(e){return"-".concat(e.toLowerCase())})),r=t;Jn[e]||"number"!=typeof r||0===r||(r="".concat(r,"px")),"animationName"===e&&null!=t&&t._keyframe&&(h(t),r=t.getName(l)),p+="".concat(n,":").concat(r,";")}var m=null!==(u=null==r?void 0:r.value)&&void 0!==u?u:r;"object"===Le(r)&&null!=r&&r[Zr]&&Array.isArray(m)?m.forEach((function(e){w(t,e)})):w(t,m)}else{var f=!1,g=t.trim(),b=!1;(i||o)&&l?g.startsWith("@")?f=!0:g=function(e,t,n){if(!t)return e;var r=".".concat(t),i="low"===n?":where(".concat(r,")"):r;return e.split(",").map((function(e){var t,n=e.trim().split(/\s+/),r=n[0]||"",o=(null===(t=r.match(/^\w+/))||void 0===t?void 0:t[0])||"";return[r="".concat(o).concat(i).concat(r.slice(o.length))].concat(yn(n.slice(1))).join(" ")})).join(",")}(t,l,c):!i||l||"&"!==g&&""!==g||(g="",b=!0);var y=je(e(r,n,{root:b,injectHash:f,parentSelectors:[].concat(yn(a),[g])}),2),_=y[0],v=y[1];d=Bt(Bt({},d),v),p+="".concat(g).concat(_)}}))}})),i){if(s&&(void 0===Mn&&(Mn=function(e,t,n){if(zt()){var r,i;Dt(e,jn);var o=document.createElement("div");o.style.position="fixed",o.style.left="0",o.style.top="0",null==t||t(o),document.body.appendChild(o);var a=n?n(o):null===(r=getComputedStyle(o).content)||void 0===r?void 0:r.includes(Ln);return null===(i=o.parentNode)||void 0===i||i.removeChild(o),Ft(jn),a}return!1}("@layer ".concat(jn," { .").concat(jn,' { content: "').concat(Ln,'"!important; } }'),(function(e){e.className=jn}))),Mn)){var g=s.split(","),b=g[g.length-1].trim();p="@layer ".concat(b," {").concat(p,"}"),g.length>1&&(p="@layer ".concat(s,"{%%%:%}").concat(p))}}else p="{".concat(p,"}");return[p,d]};function ni(){return null}function ri(e,n){var r=e.token,i=e.path,o=e.hashId,a=e.layer,l=e.nonce,s=e.clientOnly,c=e.order,u=void 0===c?0:c,m=t.useContext(En),p=m.autoClear,d=(m.mock,m.defaultCache),h=m.hashPriority,f=m.container,g=m.ssrInline,b=m.transformers,y=m.linters,_=m.cache,v=r._tokenKey,w=[v].concat(yn(i)),k=Jr,x=Yn("style",w,(function(){var e=w.join("|");if(function(e){return function(){if(!Qr&&(Qr={},zt())){var e=document.createElement("div");e.className=qr,e.style.position="fixed",e.style.visibility="hidden",e.style.top="-9999px",document.body.appendChild(e);var t=getComputedStyle(e).content||"";(t=t.replace(/^"/,"").replace(/"$/,"")).split(";").forEach((function(e){var t=je(e.split(":"),2),n=t[0],r=t[1];Qr[n]=r}));var n,r=document.querySelector("style[".concat(qr,"]"));r&&(Xr=!1,null===(n=r.parentNode)||void 0===n||n.removeChild(r)),document.body.removeChild(e)}}(),!!Qr[e]}(e)){var t=function(e){var t=Qr[e],n=null;if(t&&zt())if(Xr)n=Kr;else{var r=document.querySelector("style[".concat(An,'="').concat(Qr[e],'"]'));r?n=r.innerHTML:delete Qr[e]}return[n,t]}(e),r=je(t,2),l=r[0],c=r[1];if(l)return[l,v,c,{},s,u]}var m=n(),p=je(ti(m,{hashId:o,hashPriority:h,layer:a,path:i.join("-"),transformers:b,linters:y}),2),d=p[0],f=p[1],g=ei(d),_=function(e,t){return _n("".concat(e.join("%")).concat(t))}(w,g);return[g,v,_,f,s,u]}),(function(e,t){var n=je(e,3)[2];(t||p)&&Jr&&Ft(n,{mark:An})}),(function(e){var t=je(e,4),n=t[0],r=(t[1],t[2]),i=t[3];if(k&&n!==Kr){var o={mark:An,prepend:"queue",attachTo:f,priority:u},a="function"==typeof l?l():l;a&&(o.csp={nonce:a});var s=Dt(n,r,o);s[Sn]=_.instanceId,s.setAttribute(Cn,v),Object.keys(i).forEach((function(e){Dt(ei(i[e]),"_effect-".concat(e),o)}))}})),C=je(x,3),A=C[0],S=C[1],E=C[2];return function(e){var n,r;return n=g&&!k&&d?t.createElement("style",Re({},(Fe(r={},Cn,S),Fe(r,An,E),r),{dangerouslySetInnerHTML:{__html:A}})):t.createElement(ni,null),t.createElement(t.Fragment,null,n,e)}}function ii(e){return e.notSplit=!0,e}ii(["borderTop","borderBottom"]),ii(["borderTop"]),ii(["borderBottom"]),ii(["borderLeft","borderRight"]),ii(["borderLeft"]),ii(["borderRight"]),"undefined"==typeof Reflect?Object.keys:Reflect.ownKeys;const oi=e=>({a:{color:e.colorLink,textDecoration:e.linkDecoration,backgroundColor:"transparent",outline:"none",cursor:"pointer",transition:`color ${e.motionDurationSlow}`,"-webkit-text-decoration-skip":"objects","&:hover":{color:e.colorLinkHover},"&:active":{color:e.colorLinkActive},"&:active,\n  &:hover":{textDecoration:e.linkHoverDecoration,outline:0},"&:focus":{textDecoration:e.linkFocusDecoration,outline:0},"&[disabled]":{color:e.colorTextDisabled,cursor:"not-allowed"}}}),ai=(e,t)=>{const{fontFamily:n,fontSize:r}=e,i=`[class^="${t}"], [class*=" ${t}"]`;return{[i]:{fontFamily:n,fontSize:r,boxSizing:"border-box","&::before, &::after":{boxSizing:"border-box"},[i]:{boxSizing:"border-box","&::before, &::after":{boxSizing:"border-box"}}}}},li="5.11.0",si={blue:"#1677ff",purple:"#722ED1",cyan:"#13C2C2",green:"#52C41A",magenta:"#EB2F96",pink:"#eb2f96",red:"#F5222D",orange:"#FA8C16",yellow:"#FADB14",volcano:"#FA541C",geekblue:"#2F54EB",gold:"#FAAD14",lime:"#A0D911"},ci=Object.assign(Object.assign({},si),{colorPrimary:"#1677ff",colorSuccess:"#52c41a",colorWarning:"#faad14",colorError:"#ff4d4f",colorInfo:"#1677ff",colorLink:"",colorTextBase:"",colorBgBase:"",fontFamily:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n'Noto Color Emoji'",fontFamilyCode:"'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace",fontSize:14,lineWidth:1,lineType:"solid",motionUnit:.1,motionBase:0,motionEaseOutCirc:"cubic-bezier(0.08, 0.82, 0.17, 1)",motionEaseInOutCirc:"cubic-bezier(0.78, 0.14, 0.15, 0.86)",motionEaseOut:"cubic-bezier(0.215, 0.61, 0.355, 1)",motionEaseInOut:"cubic-bezier(0.645, 0.045, 0.355, 1)",motionEaseOutBack:"cubic-bezier(0.12, 0.4, 0.29, 1.46)",motionEaseInBack:"cubic-bezier(0.71, -0.46, 0.88, 0.6)",motionEaseInQuint:"cubic-bezier(0.755, 0.05, 0.855, 0.06)",motionEaseOutQuint:"cubic-bezier(0.23, 1, 0.32, 1)",borderRadius:6,sizeUnit:4,sizeStep:4,sizePopupArrow:16,controlHeight:32,zIndexBase:0,zIndexPopupBase:1e3,opacityImage:1,wireframe:!1,motion:!0});var ui=function(){function e(t,n){var r;if(void 0===t&&(t=""),void 0===n&&(n={}),t instanceof e)return t;"number"==typeof t&&(t=function(e){return{r:e>>16,g:(65280&e)>>8,b:255&e}}(t)),this.originalInput=t;var i=nt(t);this.originalInput=t,this.r=i.r,this.g=i.g,this.b=i.b,this.a=i.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(r=n.format)&&void 0!==r?r:i.format,this.gradientType=n.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=i.ok}return e.prototype.isDark=function(){return this.getBrightness()<128},e.prototype.isLight=function(){return!this.isDark()},e.prototype.getBrightness=function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},e.prototype.getLuminance=function(){var e=this.toRgb(),t=e.r/255,n=e.g/255,r=e.b/255;return.2126*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))},e.prototype.getAlpha=function(){return this.a},e.prototype.setAlpha=function(e){return this.a=Ge(e),this.roundA=Math.round(100*this.a)/100,this},e.prototype.isMonochrome=function(){return 0===this.toHsl().s},e.prototype.toHsv=function(){var e=Xe(this.r,this.g,this.b);return{h:360*e.h,s:e.s,v:e.v,a:this.a}},e.prototype.toHsvString=function(){var e=Xe(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.v);return 1===this.a?"hsv(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsva(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHsl=function(){var e=qe(this.r,this.g,this.b);return{h:360*e.h,s:e.s,l:e.l,a:this.a}},e.prototype.toHslString=function(){var e=qe(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.l);return 1===this.a?"hsl(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsla(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHex=function(e){return void 0===e&&(e=!1),Je(this.r,this.g,this.b,e)},e.prototype.toHexString=function(e){return void 0===e&&(e=!1),"#"+this.toHex(e)},e.prototype.toHex8=function(e){return void 0===e&&(e=!1),function(e,t,n,r,i){var o,a=[Qe(Math.round(e).toString(16)),Qe(Math.round(t).toString(16)),Qe(Math.round(n).toString(16)),Qe((o=r,Math.round(255*parseFloat(o)).toString(16)))];return i&&a[0].startsWith(a[0].charAt(1))&&a[1].startsWith(a[1].charAt(1))&&a[2].startsWith(a[2].charAt(1))&&a[3].startsWith(a[3].charAt(1))?a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0)+a[3].charAt(0):a.join("")}(this.r,this.g,this.b,this.a,e)},e.prototype.toHex8String=function(e){return void 0===e&&(e=!1),"#"+this.toHex8(e)},e.prototype.toHexShortString=function(e){return void 0===e&&(e=!1),1===this.a?this.toHexString(e):this.toHex8String(e)},e.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},e.prototype.toRgbString=function(){var e=Math.round(this.r),t=Math.round(this.g),n=Math.round(this.b);return 1===this.a?"rgb(".concat(e,", ").concat(t,", ").concat(n,")"):"rgba(".concat(e,", ").concat(t,", ").concat(n,", ").concat(this.roundA,")")},e.prototype.toPercentageRgb=function(){var e=function(e){return"".concat(Math.round(100*$e(e,255)),"%")};return{r:e(this.r),g:e(this.g),b:e(this.b),a:this.a}},e.prototype.toPercentageRgbString=function(){var e=function(e){return Math.round(100*$e(e,255))};return 1===this.a?"rgb(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%)"):"rgba(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%, ").concat(this.roundA,")")},e.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var e="#"+Je(this.r,this.g,this.b,!1),t=0,n=Object.entries(tt);t<n.length;t++){var r=n[t],i=r[0];if(e===r[1])return i}return!1},e.prototype.toString=function(e){var t=Boolean(e);e=null!=e?e:this.format;var n=!1,r=this.a<1&&this.a>=0;return t||!r||!e.startsWith("hex")&&"name"!==e?("rgb"===e&&(n=this.toRgbString()),"prgb"===e&&(n=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(n=this.toHexString()),"hex3"===e&&(n=this.toHexString(!0)),"hex4"===e&&(n=this.toHex8String(!0)),"hex8"===e&&(n=this.toHex8String()),"name"===e&&(n=this.toName()),"hsl"===e&&(n=this.toHslString()),"hsv"===e&&(n=this.toHsvString()),n||this.toHexString()):"name"===e&&0===this.a?this.toName():this.toRgbString()},e.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},e.prototype.clone=function(){return new e(this.toString())},e.prototype.lighten=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l+=t/100,n.l=Ye(n.l),new e(n)},e.prototype.brighten=function(t){void 0===t&&(t=10);var n=this.toRgb();return n.r=Math.max(0,Math.min(255,n.r-Math.round(-t/100*255))),n.g=Math.max(0,Math.min(255,n.g-Math.round(-t/100*255))),n.b=Math.max(0,Math.min(255,n.b-Math.round(-t/100*255))),new e(n)},e.prototype.darken=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l-=t/100,n.l=Ye(n.l),new e(n)},e.prototype.tint=function(e){return void 0===e&&(e=10),this.mix("white",e)},e.prototype.shade=function(e){return void 0===e&&(e=10),this.mix("black",e)},e.prototype.desaturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s-=t/100,n.s=Ye(n.s),new e(n)},e.prototype.saturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s+=t/100,n.s=Ye(n.s),new e(n)},e.prototype.greyscale=function(){return this.desaturate(100)},e.prototype.spin=function(t){var n=this.toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,new e(n)},e.prototype.mix=function(t,n){void 0===n&&(n=50);var r=this.toRgb(),i=new e(t).toRgb(),o=n/100;return new e({r:(i.r-r.r)*o+r.r,g:(i.g-r.g)*o+r.g,b:(i.b-r.b)*o+r.b,a:(i.a-r.a)*o+r.a})},e.prototype.analogous=function(t,n){void 0===t&&(t=6),void 0===n&&(n=30);var r=this.toHsl(),i=360/n,o=[this];for(r.h=(r.h-(i*t>>1)+720)%360;--t;)r.h=(r.h+i)%360,o.push(new e(r));return o},e.prototype.complement=function(){var t=this.toHsl();return t.h=(t.h+180)%360,new e(t)},e.prototype.monochromatic=function(t){void 0===t&&(t=6);for(var n=this.toHsv(),r=n.h,i=n.s,o=n.v,a=[],l=1/t;t--;)a.push(new e({h:r,s:i,v:o})),o=(o+l)%1;return a},e.prototype.splitcomplement=function(){var t=this.toHsl(),n=t.h;return[this,new e({h:(n+72)%360,s:t.s,l:t.l}),new e({h:(n+216)%360,s:t.s,l:t.l})]},e.prototype.onBackground=function(t){var n=this.toRgb(),r=new e(t).toRgb(),i=n.a+r.a*(1-n.a);return new e({r:(n.r*n.a+r.r*r.a*(1-n.a))/i,g:(n.g*n.a+r.g*r.a*(1-n.a))/i,b:(n.b*n.a+r.b*r.a*(1-n.a))/i,a:i})},e.prototype.triad=function(){return this.polyad(3)},e.prototype.tetrad=function(){return this.polyad(4)},e.prototype.polyad=function(t){for(var n=this.toHsl(),r=n.h,i=[this],o=360/t,a=1;a<t;a++)i.push(new e({h:(r+a*o)%360,s:n.s,l:n.l}));return i},e.prototype.equals=function(t){return this.toRgbString()===new e(t).toRgbString()},e}();const mi=(e,t)=>new ui(e).setAlpha(t).toRgbString(),pi=(e,t)=>new ui(e).darken(t).toHexString(),di=e=>{const t=wt(e);return{1:t[0],2:t[1],3:t[2],4:t[3],5:t[4],6:t[5],7:t[6],8:t[4],9:t[5],10:t[6]}},hi=(e,t)=>{const n=e||"#fff",r=t||"#000";return{colorBgBase:n,colorTextBase:r,colorText:mi(r,.88),colorTextSecondary:mi(r,.65),colorTextTertiary:mi(r,.45),colorTextQuaternary:mi(r,.25),colorFill:mi(r,.15),colorFillSecondary:mi(r,.06),colorFillTertiary:mi(r,.04),colorFillQuaternary:mi(r,.02),colorBgLayout:pi(n,4),colorBgContainer:pi(n,0),colorBgElevated:pi(n,0),colorBgSpotlight:mi(r,.85),colorBgBlur:"transparent",colorBorder:pi(n,15),colorBorderSecondary:pi(n,6)}},fi=(gi=function(e){const t=Object.keys(si).map((t=>{const n=wt(e[t]);return new Array(10).fill(1).reduce(((e,r,i)=>(e[`${t}-${i+1}`]=n[i],e[`${t}${i+1}`]=n[i],e)),{})})).reduce(((e,t)=>Object.assign(Object.assign({},e),t)),{});return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},e),t),function(e,t){let{generateColorPalettes:n,generateNeutralColorPalettes:r}=t;const{colorSuccess:i,colorWarning:o,colorError:a,colorInfo:l,colorPrimary:s,colorBgBase:c,colorTextBase:u}=e,m=n(s),p=n(i),d=n(o),h=n(a),f=n(l),g=r(c,u),b=n(e.colorLink||e.colorInfo);return Object.assign(Object.assign({},g),{colorPrimaryBg:m[1],colorPrimaryBgHover:m[2],colorPrimaryBorder:m[3],colorPrimaryBorderHover:m[4],colorPrimaryHover:m[5],colorPrimary:m[6],colorPrimaryActive:m[7],colorPrimaryTextHover:m[8],colorPrimaryText:m[9],colorPrimaryTextActive:m[10],colorSuccessBg:p[1],colorSuccessBgHover:p[2],colorSuccessBorder:p[3],colorSuccessBorderHover:p[4],colorSuccessHover:p[4],colorSuccess:p[6],colorSuccessActive:p[7],colorSuccessTextHover:p[8],colorSuccessText:p[9],colorSuccessTextActive:p[10],colorErrorBg:h[1],colorErrorBgHover:h[2],colorErrorBorder:h[3],colorErrorBorderHover:h[4],colorErrorHover:h[5],colorError:h[6],colorErrorActive:h[7],colorErrorTextHover:h[8],colorErrorText:h[9],colorErrorTextActive:h[10],colorWarningBg:d[1],colorWarningBgHover:d[2],colorWarningBorder:d[3],colorWarningBorderHover:d[4],colorWarningHover:d[4],colorWarning:d[6],colorWarningActive:d[7],colorWarningTextHover:d[8],colorWarningText:d[9],colorWarningTextActive:d[10],colorInfoBg:f[1],colorInfoBgHover:f[2],colorInfoBorder:f[3],colorInfoBorderHover:f[4],colorInfoHover:f[4],colorInfo:f[6],colorInfoActive:f[7],colorInfoTextHover:f[8],colorInfoText:f[9],colorInfoTextActive:f[10],colorLinkHover:b[4],colorLink:b[6],colorLinkActive:b[7],colorBgMask:new ui("#000").setAlpha(.45).toRgbString(),colorWhite:"#fff"})}(e,{generateColorPalettes:di,generateNeutralColorPalettes:hi})),(e=>{const t=function(e){const t=new Array(10).fill(null).map(((t,n)=>{const r=n-1,i=e*Math.pow(2.71828,r/5),o=n>1?Math.floor(i):Math.ceil(i);return 2*Math.floor(o/2)}));return t[1]=e,t.map((e=>({size:e,lineHeight:(e+8)/e})))}(e),n=t.map((e=>e.size)),r=t.map((e=>e.lineHeight));return{fontSizeSM:n[0],fontSize:n[1],fontSizeLG:n[2],fontSizeXL:n[3],fontSizeHeading1:n[6],fontSizeHeading2:n[5],fontSizeHeading3:n[4],fontSizeHeading4:n[3],fontSizeHeading5:n[2],lineHeight:r[1],lineHeightLG:r[2],lineHeightSM:r[0],lineHeightHeading1:r[6],lineHeightHeading2:r[5],lineHeightHeading3:r[4],lineHeightHeading4:r[3],lineHeightHeading5:r[2]}})(e.fontSize)),function(e){const{sizeUnit:t,sizeStep:n}=e;return{sizeXXL:t*(n+8),sizeXL:t*(n+4),sizeLG:t*(n+2),sizeMD:t*(n+1),sizeMS:t*n,size:t*n,sizeSM:t*(n-1),sizeXS:t*(n-2),sizeXXS:t*(n-3)}}(e)),(e=>{const{controlHeight:t}=e;return{controlHeightSM:.75*t,controlHeightXS:.5*t,controlHeightLG:1.25*t}})(e)),function(e){const{motionUnit:t,motionBase:n,borderRadius:r,lineWidth:i}=e;return Object.assign({motionDurationFast:`${(n+t).toFixed(1)}s`,motionDurationMid:`${(n+2*t).toFixed(1)}s`,motionDurationSlow:`${(n+3*t).toFixed(1)}s`,lineWidthBold:i+1},(e=>{let t=e,n=e,r=e,i=e;return e<6&&e>=5?t=e+1:e<16&&e>=6?t=e+2:e>=16&&(t=16),e<7&&e>=5?n=4:e<8&&e>=7?n=5:e<14&&e>=8?n=6:e<16&&e>=14?n=7:e>=16&&(n=8),e<6&&e>=2?r=1:e>=6&&(r=2),e>4&&e<8?i=4:e>=8&&(i=6),{borderRadius:e,borderRadiusXS:r,borderRadiusSM:n,borderRadiusLG:t,borderRadiusOuter:i}})(r))}(e))},bi=Array.isArray(gi)?gi:[gi],Tn.has(bi)||Tn.set(bi,new On(bi)),Tn.get(bi));var gi,bi;const yi={token:ci,override:{override:ci},hashed:!0},_i=t.createContext(yi);function vi(e){return e>=0&&e<=255}const wi=function(e,t){const{r:n,g:r,b:i,a:o}=new ui(e).toRgb();if(o<1)return e;const{r:a,g:l,b:s}=new ui(t).toRgb();for(let e=.01;e<=1;e+=.01){const t=Math.round((n-a*(1-e))/e),o=Math.round((r-l*(1-e))/e),c=Math.round((i-s*(1-e))/e);if(vi(t)&&vi(o)&&vi(c))return new ui({r:t,g:o,b:c,a:Math.round(100*e)/100}).toRgbString()}return new ui({r:n,g:r,b:i,a:1}).toRgbString()};var ki=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n};function xi(e){const{override:t}=e,n=ki(e,["override"]),r=Object.assign({},t);Object.keys(ci).forEach((e=>{delete r[e]}));const i=Object.assign(Object.assign({},n),r);if(!1===i.motion){const e="0s";i.motionDurationFast=e,i.motionDurationMid=e,i.motionDurationSlow=e}return Object.assign(Object.assign(Object.assign({},i),{colorFillContent:i.colorFillSecondary,colorFillContentHover:i.colorFill,colorFillAlter:i.colorFillQuaternary,colorBgContainerDisabled:i.colorFillTertiary,colorBorderBg:i.colorBgContainer,colorSplit:wi(i.colorBorderSecondary,i.colorBgContainer),colorTextPlaceholder:i.colorTextQuaternary,colorTextDisabled:i.colorTextQuaternary,colorTextHeading:i.colorText,colorTextLabel:i.colorTextSecondary,colorTextDescription:i.colorTextTertiary,colorTextLightSolid:i.colorWhite,colorHighlight:i.colorError,colorBgTextHover:i.colorFillSecondary,colorBgTextActive:i.colorFill,colorIcon:i.colorTextTertiary,colorIconHover:i.colorText,colorErrorOutline:wi(i.colorErrorBg,i.colorBgContainer),colorWarningOutline:wi(i.colorWarningBg,i.colorBgContainer),fontSizeIcon:i.fontSizeSM,lineWidthFocus:4*i.lineWidth,lineWidth:i.lineWidth,controlOutlineWidth:2*i.lineWidth,controlInteractiveSize:i.controlHeight/2,controlItemBgHover:i.colorFillTertiary,controlItemBgActive:i.colorPrimaryBg,controlItemBgActiveHover:i.colorPrimaryBgHover,controlItemBgActiveDisabled:i.colorFill,controlTmpOutline:i.colorFillQuaternary,controlOutline:wi(i.colorPrimaryBg,i.colorBgContainer),lineType:i.lineType,borderRadius:i.borderRadius,borderRadiusXS:i.borderRadiusXS,borderRadiusSM:i.borderRadiusSM,borderRadiusLG:i.borderRadiusLG,fontWeightStrong:600,opacityLoading:.65,linkDecoration:"none",linkHoverDecoration:"none",linkFocusDecoration:"none",controlPaddingHorizontal:12,controlPaddingHorizontalSM:8,paddingXXS:i.sizeXXS,paddingXS:i.sizeXS,paddingSM:i.sizeSM,padding:i.size,paddingMD:i.sizeMD,paddingLG:i.sizeLG,paddingXL:i.sizeXL,paddingContentHorizontalLG:i.sizeLG,paddingContentVerticalLG:i.sizeMS,paddingContentHorizontal:i.sizeMS,paddingContentVertical:i.sizeSM,paddingContentHorizontalSM:i.size,paddingContentVerticalSM:i.sizeXS,marginXXS:i.sizeXXS,marginXS:i.sizeXS,marginSM:i.sizeSM,margin:i.size,marginMD:i.sizeMD,marginLG:i.sizeLG,marginXL:i.sizeXL,marginXXL:i.sizeXXL,boxShadow:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowSecondary:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowTertiary:"\n      0 1px 2px 0 rgba(0, 0, 0, 0.03),\n      0 1px 6px -1px rgba(0, 0, 0, 0.02),\n      0 2px 4px 0 rgba(0, 0, 0, 0.02)\n    ",screenXS:480,screenXSMin:480,screenXSMax:575,screenSM:576,screenSMMin:576,screenSMMax:767,screenMD:768,screenMDMin:768,screenMDMax:991,screenLG:992,screenLGMin:992,screenLGMax:1199,screenXL:1200,screenXLMin:1200,screenXLMax:1599,screenXXL:1600,screenXXLMin:1600,boxShadowPopoverArrow:"2px 2px 5px rgba(0, 0, 0, 0.05)",boxShadowCard:`\n      0 1px 2px -2px ${new ui("rgba(0, 0, 0, 0.16)").toRgbString()},\n      0 3px 6px 0 ${new ui("rgba(0, 0, 0, 0.12)").toRgbString()},\n      0 5px 12px 4px ${new ui("rgba(0, 0, 0, 0.09)").toRgbString()}\n    `,boxShadowDrawerRight:"\n      -6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      -3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      -9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerLeft:"\n      6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerUp:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerDown:"\n      0 -6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 -3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 -9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowTabsOverflowLeft:"inset 10px 0 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowRight:"inset -10px 0 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowTop:"inset 0 10px 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowBottom:"inset 0 -10px 8px -8px rgba(0, 0, 0, 0.08)"}),r)}var Ci=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n};const Ai=(e,t,n)=>{const r=n.getDerivativeToken(e),{override:i}=t,o=Ci(t,["override"]);let a=Object.assign(Object.assign({},r),{override:i});return a=xi(a),o&&Object.entries(o).forEach((e=>{let[t,n]=e;const{theme:r}=n,i=Ci(n,["theme"]);let o=i;r&&(o=Ai(Object.assign(Object.assign({},a),i),{override:i},r)),a[t]=o})),a};function Si(){const{token:e,hashed:n,theme:r,override:i}=t.useContext(_i),o=`${li}-${n||""}`,a=r||fi,[l,s]=Xn(a,[ci,e],{salt:o,override:i,getComputedToken:Ai,formatToken:xi});return[a,l,n?s:""]}const Ei="undefined"!=typeof CSSINJS_STATISTIC;let Bi=!0;function zi(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];if(!Ei)return Object.assign.apply(Object,[{}].concat(t));Bi=!1;const r={};return t.forEach((e=>{Object.keys(e).forEach((t=>{Object.defineProperty(r,t,{configurable:!0,enumerable:!0,get:()=>e[t]})}))})),Bi=!0,r}const Oi={};function Ti(){}const Ri=e=>{const{componentCls:t}=e;return{[t]:{"&-block":{display:"flex",width:"100%"},"&-vertical":{flexDirection:"column"}}}},Pi=e=>{const{componentCls:t}=e;return{[t]:{display:"inline-flex","&-rtl":{direction:"rtl"},"&-vertical":{flexDirection:"column"},"&-align":{flexDirection:"column","&-center":{alignItems:"center"},"&-start":{alignItems:"flex-start"},"&-end":{alignItems:"flex-end"},"&-baseline":{alignItems:"baseline"}},[`${t}-item:empty`]:{display:"none"}}}},Ni=e=>{const{componentCls:t}=e;return{[t]:{"&-gap-row-small":{rowGap:e.spaceGapSmallSize},"&-gap-row-middle":{rowGap:e.spaceGapMiddleSize},"&-gap-row-large":{rowGap:e.spaceGapLargeSize},"&-gap-col-small":{columnGap:e.spaceGapSmallSize},"&-gap-col-middle":{columnGap:e.spaceGapMiddleSize},"&-gap-col-large":{columnGap:e.spaceGapLargeSize}}}},Ii=function(e,n,r){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const o=Array.isArray(e)?e:[e,e],[a]=o,l=o.join("-");return e=>{const[o,s,c]=Si(),{getPrefixCls:u,iconPrefixCls:m,csp:p}=(0,t.useContext)(fn),d=u(),h={theme:o,token:s,hashId:c,nonce:()=>null==p?void 0:p.nonce,clientOnly:i.clientOnly,order:i.order||-999};return ri(Object.assign(Object.assign({},h),{clientOnly:!1,path:["Shared",d]}),(()=>[{"&":oi(s)}])),((e,t)=>{const[n,r]=Si();ri({theme:n,token:r,hashId:"",path:["ant-design-icons",e],nonce:()=>null==t?void 0:t.nonce},(()=>[{[`.${e}`]:Object.assign(Object.assign({},{display:"inline-flex",alignItems:"center",color:"inherit",fontStyle:"normal",lineHeight:0,textAlign:"center",textTransform:"none",verticalAlign:"-0.125em",textRendering:"optimizeLegibility","-webkit-font-smoothing":"antialiased","-moz-osx-font-smoothing":"grayscale","> *":{lineHeight:1},svg:{display:"inline-block"}}),{[`.${e} .${e}-icon`]:{display:"block"}})}]))})(m,p),[ri(Object.assign(Object.assign({},h),{path:[l,e,m]}),(()=>{const{token:t,flush:o}=function(e){let t,n=e,r=Ti;return Ei&&"undefined"!=typeof Proxy&&(t=new Set,n=new Proxy(e,{get:(e,n)=>(Bi&&t.add(n),e[n])}),r=(e,n)=>{var r;Oi[e]={global:Array.from(t),component:Object.assign(Object.assign({},null===(r=Oi[e])||void 0===r?void 0:r.component),n)}}),{token:n,keys:t,flush:r}}(s),l=Object.assign({},s[a]);if(i.deprecatedTokens){const{deprecatedTokens:e}=i;e.forEach((e=>{let[t,n]=e;var r;((null==l?void 0:l[t])||(null==l?void 0:l[n]))&&(null!==(r=l[n])&&void 0!==r||(l[n]=null==l?void 0:l[t]))}))}const u="function"==typeof r?r(zi(t,null!=l?l:{})):r,p=Object.assign(Object.assign({},u),l),h=zi(t,{componentCls:`.${e}`,prefixCls:e,iconCls:`.${m}`,antCls:`.${d}`},p),f=n(h,{hashId:c,prefixCls:e,rootPrefixCls:d,iconPrefixCls:m,overrideComponentToken:l});return o(a,p),[!1===i.resetStyle?null:ai(s,e),f]})),c]}}("Space",(e=>{const t=zi(e,{spaceGapSmallSize:e.paddingXS,spaceGapMiddleSize:e.padding,spaceGapLargeSize:e.paddingLG});return[Pi(t),Ni(t),Ri(t)]}),(()=>({})),{resetStyle:!1});var ji=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n};const Li=t.createContext(null),Mi=e=>{var{children:n}=e,r=ji(e,["children"]);return t.createElement(Li.Provider,{value:r},n)},Fi=t.createContext({latestIndex:0}),Di=Fi.Provider,Wi=e=>{let{className:n,index:r,children:i,split:o,style:a}=e;const{latestIndex:l}=t.useContext(Fi);return null==i?null:t.createElement(t.Fragment,null,t.createElement("div",{className:n,style:a},i),r<l&&o&&t.createElement("span",{className:`${n}-split`},o))};const Ui=t.forwardRef(((e,n)=>{var r,i;const{getPrefixCls:o,space:a,direction:l}=t.useContext(fn),{size:s=(null==a?void 0:a.size)||"small",align:c,className:u,rootClassName:m,children:p,direction:d="horizontal",prefixCls:h,split:f,style:g,wrap:b=!1,classNames:y,styles:_}=e,v=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}(e,["size","align","className","rootClassName","children","direction","prefixCls","split","style","wrap","classNames","styles"]),[w,k]=Array.isArray(s)?s:[s,s],x=dn(k),C=dn(w),A=hn(k),S=hn(w),E=pn(p,{keepEmpty:!0}),B=void 0===c&&"horizontal"===d?"center":c,z=o("space",h),[O,T]=Ii(z),R=He()(z,null==a?void 0:a.className,T,`${z}-${d}`,{[`${z}-rtl`]:"rtl"===l,[`${z}-align-${B}`]:B,[`${z}-gap-row-${k}`]:x,[`${z}-gap-col-${w}`]:C},u,m),P=He()(`${z}-item`,null!==(r=null==y?void 0:y.item)&&void 0!==r?r:null===(i=null==a?void 0:a.classNames)||void 0===i?void 0:i.item);let N=0;const I=E.map(((e,n)=>{var r,i;null!=e&&(N=n);const o=e&&e.key||`${P}-${n}`;return t.createElement(Wi,{className:P,key:o,index:n,split:f,style:null!==(r=null==_?void 0:_.item)&&void 0!==r?r:null===(i=null==a?void 0:a.styles)||void 0===i?void 0:i.item},e)})),j=t.useMemo((()=>({latestIndex:N})),[N]);if(0===E.length)return null;const L={};return b&&(L.flexWrap="wrap"),!C&&S&&(L.columnGap=w),!x&&A&&(L.rowGap=k),O(t.createElement("div",Object.assign({ref:n,className:R,style:Object.assign(Object.assign(Object.assign({},L),null==a?void 0:a.style),g)},v),t.createElement(Di,{value:j},I)))})),Hi=Ui;Hi.Compact=e=>{const{getPrefixCls:n,direction:r}=t.useContext(fn),{size:i,direction:o,block:a,prefixCls:l,className:s,rootClassName:c,children:u}=e,m=ji(e,["size","direction","block","prefixCls","className","rootClassName","children"]),p=(e=>{const n=t.useContext(bn);return t.useMemo((()=>e?"string"==typeof e?null!=e?e:n:e instanceof Function?e(n):n:n),[e,n])})((e=>null!=i?i:e)),d=n("space-compact",l),[h,f]=Ii(d),g=He()(d,f,{[`${d}-rtl`]:"rtl"===r,[`${d}-block`]:a,[`${d}-vertical`]:"vertical"===o},s,c),b=t.useContext(Li),y=pn(u),_=t.useMemo((()=>y.map(((e,n)=>{const r=e&&e.key||`${d}-item-${n}`;return t.createElement(Mi,{key:r,compactSize:p,compactDirection:o,isFirstItem:0===n&&(!b||(null==b?void 0:b.isFirstItem)),isLastItem:n===y.length-1&&(!b||(null==b?void 0:b.isLastItem))},e)}))),[i,y,b]);return 0===y.length?null:h(t.createElement("div",Object.assign({className:g},m),_))};const $i=Hi;function Yi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Gi(){var e,n,r=(e=(0,t.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,l=[],s=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){c=!0,i=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw i}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return Yi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Yi(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[0],o=r[1];return(0,t.useEffect)((function(){var e=function(){window.pageYOffset>300?o(!0):o(!1)};return window.addEventListener("scroll",e),function(){window.removeEventListener("scroll",e)}}),[]),t.createElement("div",null,i&&t.createElement("span",null,t.createElement("div",{onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},className:"back-to-top"},t.createElement($i,null,t.createElement(un,{twoToneColor:"#d9d9d9"})))))}function Vi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,l=[],s=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){c=!0,i=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw i}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Qi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qi(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const qi=function(){var e=Vi((0,t.useState)(""),2),n=(e[0],e[1],Vi((0,t.useState)(!0),2)),r=(n[0],n[1],Vi((0,t.useState)(null),2)),i=(r[0],r[1],se()),o=function(e){var t="/".concat(e);i(t)};return t.createElement(t.Fragment,null,t.createElement("table",{className:"fizika"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("td",{rowSpan:3},t.createElement("h1",{className:"head"},"ELEMENTS")))),Te.R.map((function(e){return t.createElement("tbody",{className:"atomDet",key:e.name},t.createElement("tr",null,t.createElement("td",{onClick:function(){return o(e.number)},className:"symbolClick"},t.createElement("span",null,e.symbol),t.createElement("small",{className:"number"},e.number),t.createElement("small",{className:"name"},e.atomic_mass)),t.createElement("td",{onClick:function(){return o(e.number)},className:"nameAtom"},e.name),t.createElement("td",null,t.createElement("img",{src:e.bohr_model_image,alt:" nema slike ",className:"spImg"}))))}))),t.createElement("div",null,t.createElement(Gi,null)))};var Ki={"noble gas":"#c5cae9","alkaline earth metal":"#ff9e80","diatomic nonmetal":"#e0e0e0","alkali metal":"#ffccbc","transition metal":"#c8e6c9","post-transition metal":"#d1c4e9",actinide:"#fff9c4","polyatomic nonmetal":"#ffe0b2","unknown, probably transition metal":"#e8f5e9","unknown, probably post-transition metal":"#ede7f6","unknown, but predicted to be an alkali metal":"#fbe9e7","unknown, probably metalloid":"#e0f7fa","unknown, predicted to be noble gas":"#e8eaf6",lanthanide:"#b2dfdb",metalloid:"#b2ebf2"};const Xi=function(){var e=se();return t.createElement(t.Fragment,null,t.createElement("div",{className:"periodic-table"},Te.R.map((function(n){return t.createElement("div",{onClick:function(){return function(t){console.log("klik na atomi",t);var n="/".concat(t);e(n)}(n.number)},className:"element",key:n.name,style:{gridRow:n.ypos,gridColumn:n.xpos,background:Ki[n.category]}},t.createElement("div",null,n.symbol),t.createElement("small",{className:"number"},n.number),t.createElement("small",{className:"name"},n.name))}))),t.createElement("table",{className:"category"},t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{style:{background:Ki["noble gas"],padding:"6px"}},"Noble gas"),t.createElement("td",{style:{background:Ki["unknown, predicted to be noble gas"],padding:"6px"}},"Predicted to be noble gas"),t.createElement("td",{style:{background:Ki["polyatomic nonmetal"],padding:"6px"}},"Polyatomic nonmetal")),t.createElement("tr",null,t.createElement("td",{style:{background:Ki["transition metal"],padding:"6px"}},"Transition metal"),t.createElement("td",{style:{background:Ki["unknown, probably transition metal"],padding:"6px"}},"Probably transition metal"),t.createElement("td",{style:{background:Ki.actinide,padding:"6px"}},"Actinide")),t.createElement("tr",null,t.createElement("td",{style:{background:Ki["post-transition metal"],padding:"6px"}},"Post-transition metal"),t.createElement("td",{style:{background:Ki["unknown, probably post-transition metal"],padding:"6px"}},"Probably post-transition metal"),t.createElement("td",{style:{background:Ki["alkaline earth metal"],padding:"6px"}},"Alkaline earth metal")),t.createElement("tr",null,t.createElement("td",{style:{background:Ki.metalloid,padding:"6px"}},"Metalloid"),t.createElement("td",{style:{background:Ki["unknown, probably metalloid"],padding:"6px"}},"Probably metalloid"),t.createElement("td",{style:{background:Ki["diatomic nonmetal"],padding:"6px"}},"Diatomic nonmetal")),t.createElement("tr",null,t.createElement("td",{style:{background:Ki["alkali metal"],padding:"6px"}},"Alkali metal"),t.createElement("td",{style:{background:Ki["unknown, but predicted to be an alkali metal"],padding:"6px"}},"Predicted to be an alkali metal"),t.createElement("td",{style:{background:Ki.lanthanide,padding:"6px"}},"Lanthanide")),t.createElement("tr",null,t.createElement("td",{className:"place"})))))};function Ji(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,l=[],s=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){c=!0,i=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw i}}return l}}(e,t)||Zi(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Zi(e,t){if(e){if("string"==typeof e)return eo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?eo(e,t):void 0}}function eo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const to=function(e){var n=Ji((0,t.useState)(null),2),r=(n[0],n[1],Ji((0,t.useState)([]),2)),i=r[0],o=r[1],a=Ji((0,t.useState)([]),2),l=a[0],s=a[1],c=function(){let{matches:e}=t.useContext(re),n=e[e.length-1];return n?n.params:{}}(),u=t.useRef(),m=Ji((0,t.useState)([]),2),p=m[0],d=m[1],h=function(e){return"".concat(e.position.x," ").concat(e.position.y," ").concat(e.position.z)},f=function(e){return"".concat(e.normal.x," ").concat(e.normal.y," ").concat(e.normal.z)};(0,t.useEffect)((function(){g()}),[]);var g=function(){var e=c.atomNum,t=Te.R;o(t[e-1]),s(t[e-1].image)};return t.createElement(t.Fragment,null,t.createElement("div",{className:"fizika"},t.createElement("div",{className:"warp"},t.createElement("h1",null,i.name),t.createElement("div",{className:"symbol"},i.symbol),t.createElement("div",null,"Number:",i.number),t.createElement("div",null,"Atomic mass: ",i.atomic_mass),t.createElement("div",null,"Group: ",i.group),t.createElement("div",null,"Period: ",i.period),t.createElement("div",null,"Category: ",i.category),t.createElement("div",null,"Discovered by: ",i.discovered_by),t.createElement("div",null,"Phase: ",i.phase),t.createElement("div",null,"Appearance: ",i.appearance),t.createElement("div",null,"Density: ",i.density," "),t.createElement("div",null,"Melt: ",i.melt/10.17," C"),t.createElement("div",null,"Electron affinity: ",i.electron_affinity),t.createElement("div",null,"Electron configuration: ",i.electron_configuration),t.createElement("div",null,"Electronegativity pauling: ",i.electronegativity_pauling),t.createElement("div",null,"Source: ",t.createElement("a",{href:i.source,target:"_blanc"},"Wikipedia")),t.createElement("div",{className:"summary"},i.summary),t.createElement("div",null,t.createElement("img",{className:"imgHold",src:l.url,alt:"nema slike"})),t.createElement("p",null,l.attribution),t.createElement("div",null,l.title)),t.createElement("model-viewer",{src:i.bohr_model_3d,"shadow-intensity":"1","camera-controls":!0,ar:!0,"ar-modes":"webxr",onClick:function(e){var t=e.clientX,n=e.clientY;if(u.current){var r=u.current.positionAndNormalFromPoint(t,n);r&&d((function(e){return[].concat(function(e){if(Array.isArray(e))return eo(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||Zi(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[r]);var t}))}},ref:function(e){u.current=e},className:"moduleView"},p.map((function(e,n){return t.createElement("button",{key:"hotspot-".concat(n),className:"view-button",slot:"hotspot-".concat(n),"data-position":h(e),"data-normal":f(e)})}))),t.createElement("div",{className:"span"})),t.createElement("div",null,t.createElement(Gi,null)))};function no(e,t){return function(){return e.apply(t,arguments)}}const{toString:ro}=Object.prototype,{getPrototypeOf:io}=Object,oo=(ao=Object.create(null),e=>{const t=ro.call(e);return ao[t]||(ao[t]=t.slice(8,-1).toLowerCase())});var ao;const lo=e=>(e=e.toLowerCase(),t=>oo(t)===e),so=e=>t=>typeof t===e,{isArray:co}=Array,uo=so("undefined"),mo=lo("ArrayBuffer"),po=so("string"),ho=so("function"),fo=so("number"),go=e=>null!==e&&"object"==typeof e,bo=e=>{if("object"!==oo(e))return!1;const t=io(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},yo=lo("Date"),_o=lo("File"),vo=lo("Blob"),wo=lo("FileList"),ko=lo("URLSearchParams");function xo(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,i;if("object"!=typeof e&&(e=[e]),co(e))for(r=0,i=e.length;r<i;r++)t.call(null,e[r],r,e);else{const i=n?Object.getOwnPropertyNames(e):Object.keys(e),o=i.length;let a;for(r=0;r<o;r++)a=i[r],t.call(null,e[a],a,e)}}function Co(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,i=n.length;for(;i-- >0;)if(r=n[i],t===r.toLowerCase())return r;return null}const Ao="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,So=e=>!uo(e)&&e!==Ao,Eo=(Bo="undefined"!=typeof Uint8Array&&io(Uint8Array),e=>Bo&&e instanceof Bo);var Bo;const zo=lo("HTMLFormElement"),Oo=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),To=lo("RegExp"),Ro=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};xo(n,((n,i)=>{let o;!1!==(o=t(n,i,e))&&(r[i]=o||n)})),Object.defineProperties(e,r)},Po="abcdefghijklmnopqrstuvwxyz",No="0123456789",Io={DIGIT:No,ALPHA:Po,ALPHA_DIGIT:Po+Po.toUpperCase()+No},jo=lo("AsyncFunction"),Lo={isArray:co,isArrayBuffer:mo,isBuffer:function(e){return null!==e&&!uo(e)&&null!==e.constructor&&!uo(e.constructor)&&ho(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||ho(e.append)&&("formdata"===(t=oo(e))||"object"===t&&ho(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&mo(e.buffer),t},isString:po,isNumber:fo,isBoolean:e=>!0===e||!1===e,isObject:go,isPlainObject:bo,isUndefined:uo,isDate:yo,isFile:_o,isBlob:vo,isRegExp:To,isFunction:ho,isStream:e=>go(e)&&ho(e.pipe),isURLSearchParams:ko,isTypedArray:Eo,isFileList:wo,forEach:xo,merge:function e(){const{caseless:t}=So(this)&&this||{},n={},r=(r,i)=>{const o=t&&Co(n,i)||i;bo(n[o])&&bo(r)?n[o]=e(n[o],r):bo(r)?n[o]=e({},r):co(r)?n[o]=r.slice():n[o]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&xo(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(xo(t,((t,r)=>{n&&ho(t)?e[r]=no(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let i,o,a;const l={};if(t=t||{},null==e)return t;do{for(i=Object.getOwnPropertyNames(e),o=i.length;o-- >0;)a=i[o],r&&!r(a,e,t)||l[a]||(t[a]=e[a],l[a]=!0);e=!1!==n&&io(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:oo,kindOfTest:lo,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(co(e))return e;let t=e.length;if(!fo(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:zo,hasOwnProperty:Oo,hasOwnProp:Oo,reduceDescriptors:Ro,freezeMethods:e=>{Ro(e,((t,n)=>{if(ho(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];ho(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return co(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:Co,global:Ao,isContextDefined:So,ALPHABET:Io,generateString:(e=16,t=Io.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&ho(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(go(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const i=co(e)?[]:{};return xo(e,((e,t)=>{const o=n(e,r+1);!uo(o)&&(i[t]=o)})),t[r]=void 0,i}}return e};return n(e,0)},isAsyncFn:jo,isThenable:e=>e&&(go(e)||ho(e))&&ho(e.then)&&ho(e.catch)};function Mo(e,t,n,r,i){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),i&&(this.response=i)}Lo.inherits(Mo,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Lo.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Fo=Mo.prototype,Do={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{Do[e]={value:e}})),Object.defineProperties(Mo,Do),Object.defineProperty(Fo,"isAxiosError",{value:!0}),Mo.from=(e,t,n,r,i,o)=>{const a=Object.create(Fo);return Lo.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),Mo.call(a,e.message,t,n,r,i),a.cause=e,a.name=e.name,o&&Object.assign(a,o),a};const Wo=Mo;function Uo(e){return Lo.isPlainObject(e)||Lo.isArray(e)}function Ho(e){return Lo.endsWith(e,"[]")?e.slice(0,-2):e}function $o(e,t,n){return e?e.concat(t).map((function(e,t){return e=Ho(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const Yo=Lo.toFlatObject(Lo,{},null,(function(e){return/^is[A-Z]/.test(e)})),Go=function(e,t,n){if(!Lo.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=Lo.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!Lo.isUndefined(t[e])}))).metaTokens,i=n.visitor||c,o=n.dots,a=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&Lo.isSpecCompliantForm(t);if(!Lo.isFunction(i))throw new TypeError("visitor must be a function");function s(e){if(null===e)return"";if(Lo.isDate(e))return e.toISOString();if(!l&&Lo.isBlob(e))throw new Wo("Blob is not supported. Use a Buffer instead.");return Lo.isArrayBuffer(e)||Lo.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,n,i){let l=e;if(e&&!i&&"object"==typeof e)if(Lo.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(Lo.isArray(e)&&function(e){return Lo.isArray(e)&&!e.some(Uo)}(e)||(Lo.isFileList(e)||Lo.endsWith(n,"[]"))&&(l=Lo.toArray(e)))return n=Ho(n),l.forEach((function(e,r){!Lo.isUndefined(e)&&null!==e&&t.append(!0===a?$o([n],r,o):null===a?n:n+"[]",s(e))})),!1;return!!Uo(e)||(t.append($o(i,n,o),s(e)),!1)}const u=[],m=Object.assign(Yo,{defaultVisitor:c,convertValue:s,isVisitable:Uo});if(!Lo.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!Lo.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),Lo.forEach(n,(function(n,o){!0===(!(Lo.isUndefined(n)||null===n)&&i.call(t,n,Lo.isString(o)?o.trim():o,r,m))&&e(n,r?r.concat(o):[o])})),u.pop()}}(e),t};function Vo(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Qo(e,t){this._pairs=[],e&&Go(e,this,t)}const qo=Qo.prototype;qo.append=function(e,t){this._pairs.push([e,t])},qo.toString=function(e){const t=e?function(t){return e.call(this,t,Vo)}:Vo;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Ko=Qo;function Xo(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Jo(e,t,n){if(!t)return e;const r=n&&n.encode||Xo,i=n&&n.serialize;let o;if(o=i?i(t,n):Lo.isURLSearchParams(t)?t.toString():new Ko(t,n).toString(r),o){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}const Zo=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Lo.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},ea={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ta={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Ko,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]},na=function(e){function t(e,n,r,i){let o=e[i++];const a=Number.isFinite(+o),l=i>=e.length;return o=!o&&Lo.isArray(r)?r.length:o,l?(Lo.hasOwnProp(r,o)?r[o]=[r[o],n]:r[o]=n,!a):(r[o]&&Lo.isObject(r[o])||(r[o]=[]),t(e,n,r[o],i)&&Lo.isArray(r[o])&&(r[o]=function(e){const t={},n=Object.keys(e);let r;const i=n.length;let o;for(r=0;r<i;r++)o=n[r],t[o]=e[o];return t}(r[o])),!a)}if(Lo.isFormData(e)&&Lo.isFunction(e.entries)){const n={};return Lo.forEachEntry(e,((e,r)=>{t(function(e){return Lo.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},ra={transitional:ea,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,i=Lo.isObject(e);if(i&&Lo.isHTMLForm(e)&&(e=new FormData(e)),Lo.isFormData(e))return r&&r?JSON.stringify(na(e)):e;if(Lo.isArrayBuffer(e)||Lo.isBuffer(e)||Lo.isStream(e)||Lo.isFile(e)||Lo.isBlob(e))return e;if(Lo.isArrayBufferView(e))return e.buffer;if(Lo.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let o;if(i){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Go(e,new ta.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return ta.isNode&&Lo.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((o=Lo.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Go(o?{"files[]":e}:e,t&&new t,this.formSerializer)}}return i||r?(t.setContentType("application/json",!1),function(e,t,n){if(Lo.isString(e))try{return(0,JSON.parse)(e),Lo.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||ra.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&Lo.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw Wo.from(e,Wo.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ta.classes.FormData,Blob:ta.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Lo.forEach(["delete","get","head","post","put","patch"],(e=>{ra.headers[e]={}}));const ia=ra,oa=Lo.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),aa=Symbol("internals");function la(e){return e&&String(e).trim().toLowerCase()}function sa(e){return!1===e||null==e?e:Lo.isArray(e)?e.map(sa):String(e)}function ca(e,t,n,r,i){return Lo.isFunction(r)?r.call(this,t,n):(i&&(t=n),Lo.isString(t)?Lo.isString(r)?-1!==t.indexOf(r):Lo.isRegExp(r)?r.test(t):void 0:void 0)}class ua{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function i(e,t,n){const i=la(t);if(!i)throw new Error("header name must be a non-empty string");const o=Lo.findKey(r,i);(!o||void 0===r[o]||!0===n||void 0===n&&!1!==r[o])&&(r[o||t]=sa(e))}const o=(e,t)=>Lo.forEach(e,((e,n)=>i(e,n,t)));return Lo.isPlainObject(e)||e instanceof this.constructor?o(e,t):Lo.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?o((e=>{const t={};let n,r,i;return e&&e.split("\n").forEach((function(e){i=e.indexOf(":"),n=e.substring(0,i).trim().toLowerCase(),r=e.substring(i+1).trim(),!n||t[n]&&oa[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&i(t,e,n),this}get(e,t){if(e=la(e)){const n=Lo.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(Lo.isFunction(t))return t.call(this,e,n);if(Lo.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=la(e)){const n=Lo.findKey(this,e);return!(!n||void 0===this[n]||t&&!ca(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function i(e){if(e=la(e)){const i=Lo.findKey(n,e);!i||t&&!ca(0,n[i],i,t)||(delete n[i],r=!0)}}return Lo.isArray(e)?e.forEach(i):i(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const i=t[n];e&&!ca(0,this[i],i,e,!0)||(delete this[i],r=!0)}return r}normalize(e){const t=this,n={};return Lo.forEach(this,((r,i)=>{const o=Lo.findKey(n,i);if(o)return t[o]=sa(r),void delete t[i];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(i):String(i).trim();a!==i&&delete t[i],t[a]=sa(r),n[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Lo.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&Lo.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[aa]=this[aa]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=la(e);t[r]||(function(e,t){const n=Lo.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,i){return this[r].call(this,t,e,n,i)},configurable:!0})}))}(n,e),t[r]=!0)}return Lo.isArray(e)?e.forEach(r):r(e),this}}ua.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Lo.reduceDescriptors(ua.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),Lo.freezeMethods(ua);const ma=ua;function pa(e,t){const n=this||ia,r=t||n,i=ma.from(r.headers);let o=r.data;return Lo.forEach(e,(function(e){o=e.call(n,o,i.normalize(),t?t.status:void 0)})),i.normalize(),o}function da(e){return!(!e||!e.__CANCEL__)}function ha(e,t,n){Wo.call(this,null==e?"canceled":e,Wo.ERR_CANCELED,t,n),this.name="CanceledError"}Lo.inherits(ha,Wo,{__CANCEL__:!0});const fa=ha,ga=ta.isStandardBrowserEnv?{write:function(e,t,n,r,i,o){const a=[];a.push(e+"="+encodeURIComponent(t)),Lo.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),Lo.isString(r)&&a.push("path="+r),Lo.isString(i)&&a.push("domain="+i),!0===o&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function ba(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const ya=ta.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=Lo.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function _a(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let i,o=0,a=0;return t=void 0!==t?t:1e3,function(l){const s=Date.now(),c=r[a];i||(i=s),n[o]=l,r[o]=s;let u=a,m=0;for(;u!==o;)m+=n[u++],u%=e;if(o=(o+1)%e,o===a&&(a=(a+1)%e),s-i<t)return;const p=c&&s-c;return p?Math.round(1e3*m/p):void 0}}(50,250);return i=>{const o=i.loaded,a=i.lengthComputable?i.total:void 0,l=o-n,s=r(l);n=o;const c={loaded:o,total:a,progress:a?o/a:void 0,bytes:l,rate:s||void 0,estimated:s&&a&&o<=a?(a-o)/s:void 0,event:i};c[t?"download":"upload"]=!0,e(c)}}const va={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const i=ma.from(e.headers).normalize(),o=e.responseType;let a,l;function s(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}Lo.isFormData(r)&&(ta.isStandardBrowserEnv||ta.isStandardBrowserWebWorkerEnv?i.setContentType(!1):i.getContentType(/^\s*multipart\/form-data/)?Lo.isString(l=i.getContentType())&&i.setContentType(l.replace(/^\s*(multipart\/form-data);+/,"$1")):i.setContentType("multipart/form-data"));let c=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";i.set("Authorization","Basic "+btoa(t+":"+n))}const u=ba(e.baseURL,e.url);function m(){if(!c)return;const r=ma.from("getAllResponseHeaders"in c&&c.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new Wo("Request failed with status code "+n.status,[Wo.ERR_BAD_REQUEST,Wo.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),s()}),(function(e){n(e),s()}),{data:o&&"text"!==o&&"json"!==o?c.response:c.responseText,status:c.status,statusText:c.statusText,headers:r,config:e,request:c}),c=null}if(c.open(e.method.toUpperCase(),Jo(u,e.params,e.paramsSerializer),!0),c.timeout=e.timeout,"onloadend"in c?c.onloadend=m:c.onreadystatechange=function(){c&&4===c.readyState&&(0!==c.status||c.responseURL&&0===c.responseURL.indexOf("file:"))&&setTimeout(m)},c.onabort=function(){c&&(n(new Wo("Request aborted",Wo.ECONNABORTED,e,c)),c=null)},c.onerror=function(){n(new Wo("Network Error",Wo.ERR_NETWORK,e,c)),c=null},c.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||ea;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new Wo(t,r.clarifyTimeoutError?Wo.ETIMEDOUT:Wo.ECONNABORTED,e,c)),c=null},ta.isStandardBrowserEnv){const t=ya(u)&&e.xsrfCookieName&&ga.read(e.xsrfCookieName);t&&i.set(e.xsrfHeaderName,t)}void 0===r&&i.setContentType(null),"setRequestHeader"in c&&Lo.forEach(i.toJSON(),(function(e,t){c.setRequestHeader(t,e)})),Lo.isUndefined(e.withCredentials)||(c.withCredentials=!!e.withCredentials),o&&"json"!==o&&(c.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&c.addEventListener("progress",_a(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&c.upload&&c.upload.addEventListener("progress",_a(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{c&&(n(!t||t.type?new fa(null,e,c):t),c.abort(),c=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const p=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(u);p&&-1===ta.protocols.indexOf(p)?n(new Wo("Unsupported protocol "+p+":",Wo.ERR_BAD_REQUEST,e)):c.send(r||null)}))}};Lo.forEach(va,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const wa=e=>`- ${e}`,ka=e=>Lo.isFunction(e)||null===e||!1===e,xa=e=>{e=Lo.isArray(e)?e:[e];const{length:t}=e;let n,r;const i={};for(let o=0;o<t;o++){let t;if(n=e[o],r=n,!ka(n)&&(r=va[(t=String(n)).toLowerCase()],void 0===r))throw new Wo(`Unknown adapter '${t}'`);if(r)break;i[t||"#"+o]=r}if(!r){const e=Object.entries(i).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(wa).join("\n"):" "+wa(e[0]):"as no adapter specified";throw new Wo("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function Ca(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new fa(null,e)}function Aa(e){return Ca(e),e.headers=ma.from(e.headers),e.data=pa.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),xa(e.adapter||ia.adapter)(e).then((function(t){return Ca(e),t.data=pa.call(e,e.transformResponse,t),t.headers=ma.from(t.headers),t}),(function(t){return da(t)||(Ca(e),t&&t.response&&(t.response.data=pa.call(e,e.transformResponse,t.response),t.response.headers=ma.from(t.response.headers))),Promise.reject(t)}))}const Sa=e=>e instanceof ma?e.toJSON():e;function Ea(e,t){t=t||{};const n={};function r(e,t,n){return Lo.isPlainObject(e)&&Lo.isPlainObject(t)?Lo.merge.call({caseless:n},e,t):Lo.isPlainObject(t)?Lo.merge({},t):Lo.isArray(t)?t.slice():t}function i(e,t,n){return Lo.isUndefined(t)?Lo.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function o(e,t){if(!Lo.isUndefined(t))return r(void 0,t)}function a(e,t){return Lo.isUndefined(t)?Lo.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,i,o){return o in t?r(n,i):o in e?r(void 0,n):void 0}const s={url:o,method:o,data:o,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:l,headers:(e,t)=>i(Sa(e),Sa(t),!0)};return Lo.forEach(Object.keys(Object.assign({},e,t)),(function(r){const o=s[r]||i,a=o(e[r],t[r],r);Lo.isUndefined(a)&&o!==l||(n[r]=a)})),n}const Ba={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Ba[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const za={};Ba.transitional=function(e,t,n){function r(e,t){return"[Axios v1.6.0] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,i,o)=>{if(!1===e)throw new Wo(r(i," has been removed"+(t?" in "+t:"")),Wo.ERR_DEPRECATED);return t&&!za[i]&&(za[i]=!0,console.warn(r(i," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,i,o)}};const Oa={assertOptions:function(e,t,n){if("object"!=typeof e)throw new Wo("options must be an object",Wo.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let i=r.length;for(;i-- >0;){const o=r[i],a=t[o];if(a){const t=e[o],n=void 0===t||a(t,o,e);if(!0!==n)throw new Wo("option "+o+" must be "+n,Wo.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new Wo("Unknown option "+o,Wo.ERR_BAD_OPTION)}},validators:Ba},Ta=Oa.validators;class Ra{constructor(e){this.defaults=e,this.interceptors={request:new Zo,response:new Zo}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Ea(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:i}=t;void 0!==n&&Oa.assertOptions(n,{silentJSONParsing:Ta.transitional(Ta.boolean),forcedJSONParsing:Ta.transitional(Ta.boolean),clarifyTimeoutError:Ta.transitional(Ta.boolean)},!1),null!=r&&(Lo.isFunction(r)?t.paramsSerializer={serialize:r}:Oa.assertOptions(r,{encode:Ta.function,serialize:Ta.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let o=i&&Lo.merge(i.common,i[t.method]);i&&Lo.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete i[e]})),t.headers=ma.concat(o,i);const a=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const s=[];let c;this.interceptors.response.forEach((function(e){s.push(e.fulfilled,e.rejected)}));let u,m=0;if(!l){const e=[Aa.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,s),u=e.length,c=Promise.resolve(t);m<u;)c=c.then(e[m++],e[m++]);return c}u=a.length;let p=t;for(m=0;m<u;){const e=a[m++],t=a[m++];try{p=e(p)}catch(e){t.call(this,e);break}}try{c=Aa.call(this,p)}catch(e){return Promise.reject(e)}for(m=0,u=s.length;m<u;)c=c.then(s[m++],s[m++]);return c}getUri(e){return Jo(ba((e=Ea(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}Lo.forEach(["delete","get","head","options"],(function(e){Ra.prototype[e]=function(t,n){return this.request(Ea(n||{},{method:e,url:t,data:(n||{}).data}))}})),Lo.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,i){return this.request(Ea(i||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Ra.prototype[e]=t(),Ra.prototype[e+"Form"]=t(!0)}));const Pa=Ra;class Na{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,i){n.reason||(n.reason=new fa(e,r,i),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new Na((function(t){e=t})),cancel:e}}}const Ia=Na,ja={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(ja).forEach((([e,t])=>{ja[t]=e}));const La=ja,Ma=function e(t){const n=new Pa(t),r=no(Pa.prototype.request,n);return Lo.extend(r,Pa.prototype,n,{allOwnKeys:!0}),Lo.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(Ea(t,n))},r}(ia);Ma.Axios=Pa,Ma.CanceledError=fa,Ma.CancelToken=Ia,Ma.isCancel=da,Ma.VERSION="1.6.0",Ma.toFormData=Go,Ma.AxiosError=Wo,Ma.Cancel=Ma.CanceledError,Ma.all=function(e){return Promise.all(e)},Ma.spread=function(e){return function(t){return e.apply(null,t)}},Ma.isAxiosError=function(e){return Lo.isObject(e)&&!0===e.isAxiosError},Ma.mergeConfig=Ea,Ma.AxiosHeaders=ma,Ma.formToJSON=e=>na(Lo.isHTMLForm(e)?new FormData(e):e),Ma.getAdapter=xa,Ma.HttpStatusCode=La,Ma.default=Ma;const Fa=Ma,Da=t.createContext({searchStringValue:"",setSearchStringFn:function(){}});var Wa={cm:!0,mm:!0,in:!0,px:!0,pt:!0,pc:!0,em:!0,ex:!0,ch:!0,rem:!0,vw:!0,vh:!0,vmin:!0,vmax:!0,"%":!0};function Ua(e){var t=function(e){if("number"==typeof e)return{value:e,unit:"px"};var t,n=(e.match(/^[0-9.]*/)||"").toString();t=n.includes(".")?parseFloat(n):parseInt(n,10);var r=(e.match(/[^0-9]*$/)||"").toString();return Wa[r]?{value:t,unit:r}:(console.warn("React Spinners: ".concat(e," is not a valid css value. Defaulting to ").concat(t,"px.")),{value:t,unit:"px"})}(e);return"".concat(t.value).concat(t.unit)}var Ha=function(e,t,n){var r="react-spinners-".concat(e,"-").concat(n);if("undefined"==typeof window||!window.document)return r;var i=document.createElement("style");document.head.appendChild(i);var o=i.sheet,a="\n    @keyframes ".concat(r," {\n      ").concat(t,"\n    }\n  ");return o&&o.insertRule(a,0),r},$a=function(){return $a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},$a.apply(this,arguments)},Ya=[Ha("PuffLoader","0% {transform: scale(0)} 100% {transform: scale(1.0)}","puff-1"),Ha("PuffLoader","0% {opacity: 1} 100% {opacity: 0}","puff-2")];const Ga=function(e){var n=e.loading,r=void 0===n||n,i=e.color,o=void 0===i?"#000000":i,a=e.speedMultiplier,l=void 0===a?1:a,s=e.cssOverride,c=void 0===s?{}:s,u=e.size,m=void 0===u?60:u,p=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}(e,["loading","color","speedMultiplier","cssOverride","size"]),d=$a({display:"inherit",position:"relative",width:Ua(m),height:Ua(m)},c),h=function(e){return{position:"absolute",height:Ua(m),width:Ua(m),border:"thick solid ".concat(o),borderRadius:"50%",opacity:"1",top:"0",left:"0",animationFillMode:"both",animation:"".concat(Ya[0],", ").concat(Ya[1]),animationDuration:"".concat(2/l,"s"),animationIterationCount:"infinite",animationTimingFunction:"cubic-bezier(0.165, 0.84, 0.44, 1), cubic-bezier(0.3, 0.61, 0.355, 1)",animationDelay:1===e?"-1s":"0s"}};return r?t.createElement("span",$a({style:d},p),t.createElement("span",{style:h(1)}),t.createElement("span",{style:h(2)})):null},Va=function(){return t.createElement("div",{className:"loader"},t.createElement(Ga,{size:"170px",color:"#79d636",speedMultiplier:"0.2"}))};function Qa(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=Qa(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}const qa=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=Qa(e))&&(r&&(r+=" "),r+=t);return r};function Ka(e,t,n=void 0){const r={};return Object.keys(e).forEach((i=>{r[i]=e[i].reduce(((e,r)=>{if(r){const i=t(r);""!==i&&e.push(i),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}function Xa(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}function Ja(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function Za(e){if(e.type)return e;if("#"===e.charAt(0))return Za(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(Xa(9,e));let r,i=e.substring(t+1,e.length-1);if("color"===n){if(i=i.split(" "),r=i.shift(),4===i.length&&"/"===i[3].charAt(0)&&(i[3]=i[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error(Xa(10,r))}else i=i.split(",");return i=i.map((e=>parseFloat(e))),{type:n,values:i,colorSpace:r}}function el(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function tl(e){let t="hsl"===(e=Za(e)).type||"hsla"===e.type?Za(function(e){e=Za(e);const{values:t}=e,n=t[0],r=t[1]/100,i=t[2]/100,o=r*Math.min(i,1-i),a=(e,t=(e+n/30)%12)=>i-o*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const s=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(l+="a",s.push(t[3])),el({type:l,values:s})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function nl(e,t){return e=Za(e),t=Ja(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,el(e)}function rl(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var il=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,ol=rl((function(e){return il.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),al=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),ll=function(e,t,n){for(var r=0,i=0;r=i,i=Tr(),38===r&&12===i&&(t[n]=1),!Nr(i);)Or();return Pr(e,Cr)},sl=new WeakMap,cl=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||sl.get(n))&&!r){sl.set(e,!0);for(var i=[],o=function(e,t){return jr(function(e,t){var n=-1,r=44;do{switch(Nr(r)){case 0:38===r&&12===Tr()&&(t[n]=1),e[n]+=ll(Cr-1,t,n);break;case 2:e[n]+=Lr(r);break;case 4:if(44===r){e[++n]=58===Tr()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=cr(r)}}while(r=Or());return e}(Ir(e),t))}(t,i),a=n.props,l=0,s=0;l<o.length;l++)for(var c=0;c<a.length;c++,s++)e.props[s]=i[l]?o[l].replace(/&\f/g,a[c]):a[c]+" "+o[l]}}},ul=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function ml(e,t){switch(function(e,t){return 45^hr(e,0)?(((t<<2^hr(e,0))<<2^hr(e,1))<<2^hr(e,2))<<2^hr(e,3):0}(e,t)){case 5103:return tr+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return tr+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return tr+e+er+e+Zn+e+e;case 6828:case 4268:return tr+e+Zn+e+e;case 6165:return tr+e+Zn+"flex-"+e+e;case 5187:return tr+e+pr(e,/(\w+).+(:[^]+)/,tr+"box-$1$2"+Zn+"flex-$1$2")+e;case 5443:return tr+e+Zn+"flex-item-"+pr(e,/flex-|-self/,"")+e;case 4675:return tr+e+Zn+"flex-line-pack"+pr(e,/align-content|flex-|-self/,"")+e;case 5548:return tr+e+Zn+pr(e,"shrink","negative")+e;case 5292:return tr+e+Zn+pr(e,"basis","preferred-size")+e;case 6060:return tr+"box-"+pr(e,"-grow","")+tr+e+Zn+pr(e,"grow","positive")+e;case 4554:return tr+pr(e,/([^-])(transform)/g,"$1"+tr+"$2")+e;case 6187:return pr(pr(pr(e,/(zoom-|grab)/,tr+"$1"),/(image-set)/,tr+"$1"),e,"")+e;case 5495:case 3959:return pr(e,/(image-set\([^]*)/,tr+"$1$`$1");case 4968:return pr(pr(e,/(.+:)(flex-)?(.*)/,tr+"box-pack:$3"+Zn+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+tr+e+e;case 4095:case 3583:case 4068:case 2532:return pr(e,/(.+)-inline(.+)/,tr+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(gr(e)-1-t>6)switch(hr(e,t+1)){case 109:if(45!==hr(e,t+4))break;case 102:return pr(e,/(.+:)(.+)-([^]+)/,"$1"+tr+"$2-$3$1"+er+(108==hr(e,t+3)?"$3":"$2-$3"))+e;case 115:return~dr(e,"stretch")?ml(pr(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==hr(e,t+1))break;case 6444:switch(hr(e,gr(e)-3-(~dr(e,"!important")&&10))){case 107:return pr(e,":",":"+tr)+e;case 101:return pr(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+tr+(45===hr(e,14)?"inline-":"")+"box$3$1"+tr+"$2$3$1"+Zn+"$2box$3")+e}break;case 5936:switch(hr(e,t+11)){case 114:return tr+e+Zn+pr(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return tr+e+Zn+pr(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return tr+e+Zn+pr(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return tr+e+Zn+e+e}return e}var pl=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case ir:e.return=ml(e.value,e.length);break;case ar:return _r([Br(e,{value:pr(e.value,"@","@"+tr)})],r);case rr:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return _r([Br(e,{props:[pr(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return _r([Br(e,{props:[pr(t,/:(plac\w+)/,":"+tr+"input-$1")]}),Br(e,{props:[pr(t,/:(plac\w+)/,":-moz-$1")]}),Br(e,{props:[pr(t,/:(plac\w+)/,Zn+"input-$1")]})],r)}return""}))}}],dl=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,i,o=e.stylisPlugins||pl,a={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)a[t[n]]=!0;l.push(e)}));var s,c,u,m,p=[vr,(m=function(e){s.insert(e)},function(e){e.root||(e=e.return)&&m(e)})],d=(c=[cl,ul].concat(o,p),u=br(c),function(e,t,n,r){for(var i="",o=0;o<u;o++)i+=c[o](e,t,n,r)||"";return i});i=function(e,t,n,r){s=n,_r(Hr(e?e+"{"+t.styles+"}":t.styles),d),r&&(h.inserted[t.name]=!0)};var h={key:t,sheet:new al({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:a,registered:{},insert:i};return h.sheet.hydrate(l),h},hl={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},fl=/[A-Z]|^ms/g,gl=/_EMO_([^_]+?)_([^]*?)_EMO_/g,bl=function(e){return 45===e.charCodeAt(1)},yl=function(e){return null!=e&&"boolean"!=typeof e},_l=rl((function(e){return bl(e)?e:e.replace(fl,"-$&").toLowerCase()})),vl=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(gl,(function(e,t,n){return kl={name:t,styles:n,next:kl},t}))}return 1===hl[e]||bl(e)||"number"!=typeof t||0===t?t:t+"px"};function wl(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return kl={name:n.name,styles:n.styles,next:kl},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)kl={name:r.name,styles:r.styles,next:kl},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var i=0;i<n.length;i++)r+=wl(e,t,n[i])+";";else for(var o in n){var a=n[o];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=o+"{"+t[a]+"}":yl(a)&&(r+=_l(o)+":"+vl(o,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var l=wl(e,t,a);switch(o){case"animation":case"animationName":r+=_l(o)+":"+l+";";break;default:r+=o+"{"+l+"}"}}else for(var s=0;s<a.length;s++)yl(a[s])&&(r+=_l(o)+":"+vl(o,a[s])+";")}return r}(e,t,n);case"function":if(void 0!==e){var i=kl,o=n(e);return kl=i,wl(e,t,o)}}if(null==t)return n;var a=t[n];return void 0!==a?a:n}var kl,xl=/label:\s*([^\s;\n{]+)\s*(;|$)/g,Cl=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,i="";kl=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,i+=wl(n,t,o)):i+=o[0];for(var a=1;a<e.length;a++)i+=wl(n,t,e[a]),r&&(i+=o[a]);xl.lastIndex=0;for(var l,s="";null!==(l=xl.exec(i));)s+="-"+l[1];var c=function(e){for(var t,n=0,r=0,i=e.length;i>=4;++r,i-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(i){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(i)+s;return{name:c,styles:i,next:kl}},Al=!!n.useInsertionEffect&&n.useInsertionEffect,Sl=Al||function(e){return e()},El=Al||t.useLayoutEffect,Bl=t.createContext("undefined"!=typeof HTMLElement?dl({key:"css"}):null);Bl.Provider;var zl=function(e){return(0,t.forwardRef)((function(n,r){var i=(0,t.useContext)(Bl);return e(n,i,r)}))},Ol=t.createContext({}),Tl=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},Rl=function(e,t,n){Tl(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var i=t;do{e.insert(t===i?"."+r:"",i,e.sheet,!0),i=i.next}while(void 0!==i)}},Pl=ol,Nl=function(e){return"theme"!==e},Il=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?Pl:Nl},jl=function(e,t,n){var r;if(t){var i=t.shouldForwardProp;r=e.__emotion_forwardProp&&i?function(t){return e.__emotion_forwardProp(t)&&i(t)}:i}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},Ll=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return Tl(t,n,r),Sl((function(){return Rl(t,n,r)})),null},Ml=function e(n,r){var i,o,a=n.__emotion_real===n,l=a&&n.__emotion_base||n;void 0!==r&&(i=r.label,o=r.target);var s=jl(n,r,a),c=s||Il(l),u=!c("as");return function(){var m=arguments,p=a&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==i&&p.push("label:"+i+";"),null==m[0]||void 0===m[0].raw)p.push.apply(p,m);else{p.push(m[0][0]);for(var d=m.length,h=1;h<d;h++)p.push(m[h],m[0][h])}var f=zl((function(e,n,r){var i,a,m,d,h=u&&e.as||l,f="",g=[],b=e;if(null==e.theme){for(var y in b={},e)b[y]=e[y];b.theme=t.useContext(Ol)}"string"==typeof e.className?(i=n.registered,a=g,m=e.className,d="",m.split(" ").forEach((function(e){void 0!==i[e]?a.push(i[e]+";"):d+=e+" "})),f=d):null!=e.className&&(f=e.className+" ");var _=Cl(p.concat(g),n.registered,b);f+=n.key+"-"+_.name,void 0!==o&&(f+=" "+o);var v=u&&void 0===s?Il(h):c,w={};for(var k in e)u&&"as"===k||v(k)&&(w[k]=e[k]);return w.className=f,w.ref=r,t.createElement(t.Fragment,null,t.createElement(Ll,{cache:n,serialized:_,isStringTag:"string"==typeof h}),t.createElement(h,w))}));return f.displayName=void 0!==i?i:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",f.defaultProps=n.defaultProps,f.__emotion_real=f,f.__emotion_base=l,f.__emotion_styles=p,f.__emotion_forwardProp=s,Object.defineProperty(f,"toString",{value:function(){return"."+o}}),f.withComponent=function(t,n){return e(t,Re({},r,n,{shouldForwardProp:jl(f,n,!0)})).apply(void 0,p)},f}}.bind();function Fl(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function Dl(e){if(!Fl(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=Dl(e[n])})),t}function Wl(e,t,n={clone:!0}){const r=n.clone?Re({},e):e;return Fl(e)&&Fl(t)&&Object.keys(t).forEach((i=>{"__proto__"!==i&&(Fl(t[i])&&i in e&&Fl(e[i])?r[i]=Wl(e[i],t[i],n):n.clone?r[i]=Fl(t[i])?Dl(t[i]):t[i]:r[i]=t[i])})),r}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){Ml[e]=Ml(e)}));const Ul=["values","unit","step"],Hl={borderRadius:4},$l={xs:0,sm:600,md:900,lg:1200,xl:1536},Yl={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${$l[e]}px)`};function Gl(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||Yl;return t.reduce(((r,i,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=r.breakpoints||Yl;return Object.keys(t).reduce(((r,i)=>{if(-1!==Object.keys(e.values||$l).indexOf(i))r[e.up(i)]=n(t[i],i);else{const e=i;r[e]=t[e]}return r}),{})}return n(t)}function Vl(e){if("string"!=typeof e)throw new Error(Xa(7));return e.charAt(0).toUpperCase()+e.slice(1)}function Ql(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function ql(e,t,n,r=n){let i;return i="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:Ql(e,n)||r,t&&(i=t(i,r,e)),i}const Kl=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:i}=e,o=e=>{if(null==e[t])return null;const o=e[t],a=Ql(e.theme,r)||{};return Gl(e,o,(e=>{let r=ql(a,i,e);return e===r&&"string"==typeof e&&(r=ql(a,i,`${t}${"default"===e?"":Vl(e)}`,e)),!1===n?r:{[n]:r}}))};return o.propTypes={},o.filterProps=[t],o},Xl=function(e,t){return t?Wl(e,t,{clone:!1}):e},Jl={m:"margin",p:"padding"},Zl={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},es={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},ts=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!es[e])return[e];e=es[e]}const[t,n]=e.split(""),r=Jl[t],i=Zl[n]||"";return Array.isArray(i)?i.map((e=>r+e)):[r+i]})(e)),t[e])}(),ns=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],rs=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],is=[...ns,...rs];function os(e,t,n,r){var i;const o=null!=(i=Ql(e,t,!1))?i:n;return"number"==typeof o?e=>"string"==typeof e?e:o*e:Array.isArray(o)?e=>"string"==typeof e?e:o[e]:"function"==typeof o?o:()=>{}}function as(e){return os(e,"spacing",8)}function ls(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function ss(e,t){const n=as(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(-1===t.indexOf(n))return null;const i=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=ls(t,n),e)),{})}(ts(n),r);return Gl(e,e[n],i)}(e,t,r,n))).reduce(Xl,{})}function cs(e){return ss(e,ns)}function us(e){return ss(e,rs)}function ms(e){return ss(e,is)}cs.propTypes={},cs.filterProps=ns,us.propTypes={},us.filterProps=rs,ms.propTypes={},ms.filterProps=is;const ps=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?Xl(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function ds(e){return"number"!=typeof e?e:`${e}px solid`}const hs=Kl({prop:"border",themeKey:"borders",transform:ds}),fs=Kl({prop:"borderTop",themeKey:"borders",transform:ds}),gs=Kl({prop:"borderRight",themeKey:"borders",transform:ds}),bs=Kl({prop:"borderBottom",themeKey:"borders",transform:ds}),ys=Kl({prop:"borderLeft",themeKey:"borders",transform:ds}),_s=Kl({prop:"borderColor",themeKey:"palette"}),vs=Kl({prop:"borderTopColor",themeKey:"palette"}),ws=Kl({prop:"borderRightColor",themeKey:"palette"}),ks=Kl({prop:"borderBottomColor",themeKey:"palette"}),xs=Kl({prop:"borderLeftColor",themeKey:"palette"}),Cs=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=os(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:ls(t,e)});return Gl(e,e.borderRadius,n)}return null};Cs.propTypes={},Cs.filterProps=["borderRadius"],ps(hs,fs,gs,bs,ys,_s,vs,ws,ks,xs,Cs);const As=e=>{if(void 0!==e.gap&&null!==e.gap){const t=os(e.theme,"spacing",8),n=e=>({gap:ls(t,e)});return Gl(e,e.gap,n)}return null};As.propTypes={},As.filterProps=["gap"];const Ss=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=os(e.theme,"spacing",8),n=e=>({columnGap:ls(t,e)});return Gl(e,e.columnGap,n)}return null};Ss.propTypes={},Ss.filterProps=["columnGap"];const Es=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=os(e.theme,"spacing",8),n=e=>({rowGap:ls(t,e)});return Gl(e,e.rowGap,n)}return null};function Bs(e,t){return"grey"===t?t:e}function zs(e){return e<=1&&0!==e?100*e+"%":e}Es.propTypes={},Es.filterProps=["rowGap"],ps(As,Ss,Es,Kl({prop:"gridColumn"}),Kl({prop:"gridRow"}),Kl({prop:"gridAutoFlow"}),Kl({prop:"gridAutoColumns"}),Kl({prop:"gridAutoRows"}),Kl({prop:"gridTemplateColumns"}),Kl({prop:"gridTemplateRows"}),Kl({prop:"gridTemplateAreas"}),Kl({prop:"gridArea"})),ps(Kl({prop:"color",themeKey:"palette",transform:Bs}),Kl({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:Bs}),Kl({prop:"backgroundColor",themeKey:"palette",transform:Bs}));const Os=Kl({prop:"width",transform:zs}),Ts=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r;const i=(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||$l[t];return i?"px"!==(null==(r=e.theme)||null==(r=r.breakpoints)?void 0:r.unit)?{maxWidth:`${i}${e.theme.breakpoints.unit}`}:{maxWidth:i}:{maxWidth:zs(t)}};return Gl(e,e.maxWidth,t)}return null};Ts.filterProps=["maxWidth"];const Rs=Kl({prop:"minWidth",transform:zs}),Ps=Kl({prop:"height",transform:zs}),Ns=Kl({prop:"maxHeight",transform:zs}),Is=Kl({prop:"minHeight",transform:zs}),js=(Kl({prop:"size",cssProperty:"width",transform:zs}),Kl({prop:"size",cssProperty:"height",transform:zs}),ps(Os,Ts,Rs,Ps,Ns,Is,Kl({prop:"boxSizing"})),{border:{themeKey:"borders",transform:ds},borderTop:{themeKey:"borders",transform:ds},borderRight:{themeKey:"borders",transform:ds},borderBottom:{themeKey:"borders",transform:ds},borderLeft:{themeKey:"borders",transform:ds},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:Cs},color:{themeKey:"palette",transform:Bs},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:Bs},backgroundColor:{themeKey:"palette",transform:Bs},p:{style:us},pt:{style:us},pr:{style:us},pb:{style:us},pl:{style:us},px:{style:us},py:{style:us},padding:{style:us},paddingTop:{style:us},paddingRight:{style:us},paddingBottom:{style:us},paddingLeft:{style:us},paddingX:{style:us},paddingY:{style:us},paddingInline:{style:us},paddingInlineStart:{style:us},paddingInlineEnd:{style:us},paddingBlock:{style:us},paddingBlockStart:{style:us},paddingBlockEnd:{style:us},m:{style:cs},mt:{style:cs},mr:{style:cs},mb:{style:cs},ml:{style:cs},mx:{style:cs},my:{style:cs},margin:{style:cs},marginTop:{style:cs},marginRight:{style:cs},marginBottom:{style:cs},marginLeft:{style:cs},marginX:{style:cs},marginY:{style:cs},marginInline:{style:cs},marginInlineStart:{style:cs},marginInlineEnd:{style:cs},marginBlock:{style:cs},marginBlockStart:{style:cs},marginBlockEnd:{style:cs},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:As},rowGap:{style:Es},columnGap:{style:Ss},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:zs},maxWidth:{style:Ts},minWidth:{transform:zs},height:{transform:zs},maxHeight:{transform:zs},minHeight:{transform:zs},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),Ls=function(){function e(e,t,n,r){const i={[e]:t,theme:n},o=r[e];if(!o)return{[e]:t};const{cssProperty:a=e,themeKey:l,transform:s,style:c}=o;if(null==t)return null;if("typography"===l&&"inherit"===t)return{[e]:t};const u=Ql(n,l)||{};return c?c(i):Gl(i,t,(t=>{let n=ql(u,s,t);return t===n&&"string"==typeof t&&(n=ql(u,s,`${e}${"default"===t?"":Vl(t)}`,t)),!1===a?n:{[a]:n}}))}return function t(n){var r;const{sx:i,theme:o={}}=n||{};if(!i)return null;const a=null!=(r=o.unstable_sxConfig)?r:js;function l(n){let r=n;if("function"==typeof n)r=n(o);else if("object"!=typeof n)return n;if(!r)return null;const i=function(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}(o.breakpoints),l=Object.keys(i);let s=i;return Object.keys(r).forEach((n=>{const i="function"==typeof(l=r[n])?l(o):l;var l;if(null!=i)if("object"==typeof i)if(a[n])s=Xl(s,e(n,i,o,a));else{const e=Gl({theme:o},i,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,i)?s=Xl(s,e):s[n]=t({sx:i,theme:o})}else s=Xl(s,e(n,i,o,a))})),c=s,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),c);var c}return Array.isArray(i)?i.map(l):l(i)}}();Ls.filterProps=["sx"];const Ms=Ls,Fs=["breakpoints","palette","spacing","shape"],Ds=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:i,shape:o={}}=e,a=De(e,Fs),l=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5}=e,i=De(e,Ul),o=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>Re({},e,{[t.key]:t.val})),{})})(t),a=Object.keys(o);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function s(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function c(e,i){const o=a.indexOf(i);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[a[o]]?t[a[o]]:i)-r/100}${n})`}return Re({keys:a,values:o,up:l,down:s,between:c,only:function(e){return a.indexOf(e)+1<a.length?c(e,a[a.indexOf(e)+1]):l(e)},not:function(e){const t=a.indexOf(e);return 0===t?l(a[1]):t===a.length-1?s(a[t]):c(e,a[a.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},i)}(n),s=function(e=8){if(e.mui)return e;const t=as({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(i);let c=Wl({breakpoints:l,direction:"ltr",components:{},palette:Re({mode:"light"},r),spacing:s,shape:Re({},Hl,o)},a);return c=t.reduce(((e,t)=>Wl(e,t)),c),c.unstable_sxConfig=Re({},js,null==a?void 0:a.unstable_sxConfig),c.unstable_sx=function(e){return Ms({sx:e,theme:this})},c},Ws=["variant"];function Us(e){return 0===e.length}function Hs(e){const{variant:t}=e,n=De(e,Ws);let r=t||"";return Object.keys(n).sort().forEach((t=>{r+="color"===t?Us(r)?e[t]:Vl(e[t]):`${Us(r)?t:Vl(t)}${Vl(e[t].toString())}`})),r}const $s=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],Ys=e=>{const t={};return e&&e.forEach((e=>{const n=Hs(e.props);t[n]=e.style})),t},Gs=(e,t,n)=>{const{ownerState:r={}}=e,i=[];return n&&n.forEach((n=>{let o=!0;Object.keys(n.props).forEach((t=>{r[t]!==n.props[t]&&e[t]!==n.props[t]&&(o=!1)})),o&&i.push(t[Hs(n.props)])})),i};function Vs(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const Qs=Ds(),qs=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function Ks({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function Xs(e){return e?(t,n)=>n[e]:null}const Js=({styledArg:e,props:t,defaultTheme:n,themeId:r})=>{const i=e(Re({},t,{theme:Ks(Re({},t,{defaultTheme:n,themeId:r}))}));let o;return i&&i.variants&&(o=i.variants,delete i.variants),o?[i,...Gs(t,Ys(o),o)]:i};const Zs={black:"#000",white:"#fff"},ec={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},tc={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},nc={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},rc={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},ic={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},oc={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},ac={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},lc=["mode","contrastThreshold","tonalOffset"],sc={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Zs.white,default:Zs.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},cc={text:{primary:Zs.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Zs.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function uc(e,t,n,r){const i=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=Za(e),t=Ja(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return el(e)}(e.main,i):"dark"===t&&(e.dark=function(e,t){if(e=Za(e),t=Ja(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return el(e)}(e.main,o)))}const mc=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],pc={textTransform:"uppercase"},dc='"Roboto", "Helvetica", "Arial", sans-serif';function hc(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=dc,fontSize:i=14,fontWeightLight:o=300,fontWeightRegular:a=400,fontWeightMedium:l=500,fontWeightBold:s=700,htmlFontSize:c=16,allVariants:u,pxToRem:m}=n,p=De(n,mc),d=i/14,h=m||(e=>e/c*d+"rem"),f=(e,t,n,i,o)=>{return Re({fontFamily:r,fontWeight:e,fontSize:h(t),lineHeight:n},r===dc?{letterSpacing:(a=i/t,Math.round(1e5*a)/1e5+"em")}:{},o,u);var a},g={h1:f(o,96,1.167,-1.5),h2:f(o,60,1.2,-.5),h3:f(a,48,1.167,0),h4:f(a,34,1.235,.25),h5:f(a,24,1.334,0),h6:f(l,20,1.6,.15),subtitle1:f(a,16,1.75,.15),subtitle2:f(l,14,1.57,.1),body1:f(a,16,1.5,.15),body2:f(a,14,1.43,.15),button:f(l,14,1.75,.4,pc),caption:f(a,12,1.66,.4),overline:f(a,12,2.66,1,pc),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return Wl(Re({htmlFontSize:c,pxToRem:h,fontFamily:r,fontSize:i,fontWeightLight:o,fontWeightRegular:a,fontWeightMedium:l,fontWeightBold:s},g),p,{clone:!1})}function fc(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const gc=["none",fc(0,2,1,-1,0,1,1,0,0,1,3,0),fc(0,3,1,-2,0,2,2,0,0,1,5,0),fc(0,3,3,-2,0,3,4,0,0,1,8,0),fc(0,2,4,-1,0,4,5,0,0,1,10,0),fc(0,3,5,-1,0,5,8,0,0,1,14,0),fc(0,3,5,-1,0,6,10,0,0,1,18,0),fc(0,4,5,-2,0,7,10,1,0,2,16,1),fc(0,5,5,-3,0,8,10,1,0,3,14,2),fc(0,5,6,-3,0,9,12,1,0,3,16,2),fc(0,6,6,-3,0,10,14,1,0,4,18,3),fc(0,6,7,-4,0,11,15,1,0,4,20,3),fc(0,7,8,-4,0,12,17,2,0,5,22,4),fc(0,7,8,-4,0,13,19,2,0,5,24,4),fc(0,7,9,-4,0,14,21,2,0,5,26,4),fc(0,8,9,-5,0,15,22,2,0,6,28,5),fc(0,8,10,-5,0,16,24,2,0,6,30,5),fc(0,8,11,-5,0,17,26,2,0,6,32,5),fc(0,9,11,-5,0,18,28,2,0,7,34,6),fc(0,9,12,-6,0,19,29,2,0,7,36,6),fc(0,10,13,-6,0,20,31,3,0,8,38,7),fc(0,10,13,-6,0,21,33,3,0,8,40,7),fc(0,10,14,-6,0,22,35,3,0,8,42,7),fc(0,11,14,-7,0,23,36,3,0,9,44,8),fc(0,11,15,-7,0,24,38,3,0,9,46,8)],bc=["duration","easing","delay"],yc={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},_c={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function vc(e){return`${Math.round(e)}ms`}function wc(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function kc(e){const t=Re({},yc,e.easing),n=Re({},_c,e.duration);return Re({getAutoHeightDuration:wc,create:(e=["all"],r={})=>{const{duration:i=n.standard,easing:o=t.easeInOut,delay:a=0}=r;return De(r,bc),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof i?i:vc(i)} ${o} ${"string"==typeof a?a:vc(a)}`)).join(",")}},e,{easing:t,duration:n})}const xc={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},Cc=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const Ac=function(e={},...t){const{mixins:n={},palette:r={},transitions:i={},typography:o={}}=e,a=De(e,Cc);if(e.vars)throw new Error(Xa(18));const l=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,i=De(e,lc),o=e.primary||function(e="light"){return"dark"===e?{main:ic[200],light:ic[50],dark:ic[400]}:{main:ic[700],light:ic[400],dark:ic[800]}}(t),a=e.secondary||function(e="light"){return"dark"===e?{main:tc[200],light:tc[50],dark:tc[400]}:{main:tc[500],light:tc[300],dark:tc[700]}}(t),l=e.error||function(e="light"){return"dark"===e?{main:nc[500],light:nc[300],dark:nc[700]}:{main:nc[700],light:nc[400],dark:nc[800]}}(t),s=e.info||function(e="light"){return"dark"===e?{main:oc[400],light:oc[300],dark:oc[700]}:{main:oc[700],light:oc[500],dark:oc[900]}}(t),c=e.success||function(e="light"){return"dark"===e?{main:ac[400],light:ac[300],dark:ac[700]}:{main:ac[800],light:ac[500],dark:ac[900]}}(t),u=e.warning||function(e="light"){return"dark"===e?{main:rc[400],light:rc[300],dark:rc[700]}:{main:"#ed6c02",light:rc[500],dark:rc[900]}}(t);function m(e){const t=function(e,t){const n=tl(e),r=tl(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,cc.text.primary)>=n?cc.text.primary:sc.text.primary;return t}const p=({color:e,name:t,mainShade:n=500,lightShade:i=300,darkShade:o=700})=>{if(!(e=Re({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(Xa(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(Xa(12,t?` (${t})`:"",JSON.stringify(e.main)));return uc(e,"light",i,r),uc(e,"dark",o,r),e.contrastText||(e.contrastText=m(e.main)),e},d={dark:cc,light:sc};return Wl(Re({common:Re({},Zs),mode:t,primary:p({color:o,name:"primary"}),secondary:p({color:a,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:p({color:l,name:"error"}),warning:p({color:u,name:"warning"}),info:p({color:s,name:"info"}),success:p({color:c,name:"success"}),grey:ec,contrastThreshold:n,getContrastText:m,augmentColor:p,tonalOffset:r},d[t]),i)}(r),s=Ds(e);let c=Wl(s,{mixins:(u=s.breakpoints,m=n,Re({toolbar:{minHeight:56,[u.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[u.up("sm")]:{minHeight:64}}},m)),palette:l,shadows:gc.slice(),typography:hc(l,o),transitions:kc(i),zIndex:Re({},xc)});var u,m;return c=Wl(c,a),c=t.reduce(((e,t)=>Wl(e,t)),c),c.unstable_sxConfig=Re({},js,null==a?void 0:a.unstable_sxConfig),c.unstable_sx=function(e){return Ms({sx:e,theme:this})},c}(),Sc="$$material",Ec=function(e={}){const{themeId:t,defaultTheme:n=Qs,rootShouldForwardProp:r=Vs,slotShouldForwardProp:i=Vs}=e,o=e=>Ms(Re({},e,{theme:Ks(Re({},e,{defaultTheme:n,themeId:t}))}));return o.__mui_systemSx=!0,(e,a={})=>{((e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=e.__emotion_styles.filter((e=>!(null!=e&&e.__mui_systemSx))))})(e);const{name:l,slot:s,skipVariantsResolver:c,skipSx:u,overridesResolver:m=Xs(qs(s))}=a,p=De(a,$s),d=void 0!==c?c:s&&"Root"!==s&&"root"!==s||!1,h=u||!1;let f=Vs;"Root"===s||"root"===s?f=r:s?f=i:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(f=void 0);const g=function(e,t){return Ml(e,t)}(e,Re({shouldForwardProp:f,label:void 0},p)),b=(r,...i)=>{const a=i?i.map((e=>{if("function"==typeof e&&e.__emotion_real!==e)return r=>Js({styledArg:e,props:r,defaultTheme:n,themeId:t});if(Fl(e)){let t,n=e;return e&&e.variants&&(t=e.variants,delete n.variants,n=n=>{let r=e;return Gs(n,Ys(t),t).forEach((e=>{r=Wl(r,e)})),r}),n}return e})):[];let s=r;if(Fl(r)){let e;r&&r.variants&&(e=r.variants,delete s.variants,s=t=>{let n=r;return Gs(t,Ys(e),e).forEach((e=>{n=Wl(n,e)})),n})}else"function"==typeof r&&r.__emotion_real!==r&&(s=e=>Js({styledArg:r,props:e,defaultTheme:n,themeId:t}));l&&m&&a.push((e=>{const r=Ks(Re({},e,{defaultTheme:n,themeId:t})),i=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(l,r);if(i){const t={};return Object.entries(i).forEach((([n,i])=>{t[n]="function"==typeof i?i(Re({},e,{theme:r})):i})),m(e,t)}return null})),l&&!d&&a.push((e=>{const r=Ks(Re({},e,{defaultTheme:n,themeId:t}));return((e,t,n,r)=>{var i;const o=null==n||null==(i=n.components)||null==(i=i[r])?void 0:i.variants;return Gs(e,t,o)})(e,((e,t)=>{let n=[];return t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants),Ys(n)})(l,r),r,l)})),h||a.push(o);const c=a.length-i.length;if(Array.isArray(r)&&c>0){const e=new Array(c).fill("");s=[...r,...e],s.raw=[...r.raw,...e]}const u=g(s,...a);return e.muiName&&(u.muiName=e.muiName),u};return g.withConfig&&(b.withConfig=g.withConfig),b}}({themeId:Sc,defaultTheme:Ac,rootShouldForwardProp:e=>Vs(e)&&"classes"!==e}),Bc=Ec,zc=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function Oc(e,t){const n=Re({},t);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))n[r]=Re({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const i=e[r]||{},o=t[r];n[r]={},o&&Object.keys(o)?i&&Object.keys(i)?(n[r]=Re({},o),Object.keys(i).forEach((e=>{n[r][e]=Oc(i[e],o[e])}))):n[r]=o:n[r]=i}else void 0===n[r]&&(n[r]=e[r])})),n}function Tc(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?Oc(t.components[n].defaultProps,r):r}const Rc=Ds(),Pc=function(e=Rc){return function(e=null){const n=t.useContext(Ol);return n&&(r=n,0!==Object.keys(r).length)?n:e;var r}(e)};function Nc({props:e,name:t}){return function({props:e,name:t,defaultTheme:n,themeId:r}){let i=Pc(n);return r&&(i=i[r]||i),Tc({theme:i,name:t,props:e})}({props:e,name:t,defaultTheme:Ac,themeId:Sc})}const Ic=e=>e,jc=(()=>{let e=Ic;return{configure(t){e=t},generate:t=>e(t),reset(){e=Ic}}})(),Lc=jc,Mc={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function Fc(e,t,n="Mui"){const r=Mc[t];return r?`${n}-${r}`:`${Lc.generate(e)}-${t}`}function Dc(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=Fc(e,t,n)})),r}function Wc(e){return Fc("MuiPaper",e)}Dc("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);var Uc=i(893);const Hc=["className","component","elevation","square","variant"],$c=Bc("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>{var n;return Re({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&Re({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${nl("#fff",zc(t.elevation))}, ${nl("#fff",zc(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))})),Yc=t.forwardRef((function(e,t){const n=Nc({props:e,name:"MuiPaper"}),{className:r,component:i="div",elevation:o=1,square:a=!1,variant:l="elevation"}=n,s=De(n,Hc),c=Re({},n,{component:i,elevation:o,square:a,variant:l}),u=(e=>{const{square:t,elevation:n,variant:r,classes:i}=e;return Ka({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},Wc,i)})(c);return(0,Uc.jsx)($c,Re({as:i,ownerState:c,className:qa(u.root,r),ref:t},s))}));var Gc=i(935);function Vc(...e){return t.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{!function(e,t){"function"==typeof e?e(t):e&&(e.current=t)}(e,t)}))}),e)}function Qc(e){const t=function(e){return e&&e.ownerDocument||document}(e);return t.defaultView||window}const qc="undefined"!=typeof window?t.useLayoutEffect:t.useEffect,Kc=["onChange","maxRows","minRows","style","value"];function Xc(e){return parseInt(e,10)||0}const Jc={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function Zc(e){return null==e||0===Object.keys(e).length||0===e.outerHeightStyle&&!e.overflow}const eu=t.forwardRef((function(e,n){const{onChange:r,maxRows:i,minRows:o=1,style:a,value:l}=e,s=De(e,Kc),{current:c}=t.useRef(null!=l),u=t.useRef(null),m=Vc(n,u),p=t.useRef(null),d=t.useRef(0),[h,f]=t.useState({outerHeightStyle:0}),g=t.useCallback((()=>{const t=u.current,n=Qc(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0};const r=p.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const a=n.boxSizing,l=Xc(n.paddingBottom)+Xc(n.paddingTop),s=Xc(n.borderBottomWidth)+Xc(n.borderTopWidth),c=r.scrollHeight;r.value="x";const m=r.scrollHeight;let d=c;return o&&(d=Math.max(Number(o)*m,d)),i&&(d=Math.min(Number(i)*m,d)),d=Math.max(d,m),{outerHeightStyle:d+("border-box"===a?l+s:0),overflow:Math.abs(d-c)<=1}}),[i,o,e.placeholder]),b=(e,t)=>{const{outerHeightStyle:n,overflow:r}=t;return d.current<20&&(n>0&&Math.abs((e.outerHeightStyle||0)-n)>1||e.overflow!==r)?(d.current+=1,{overflow:r,outerHeightStyle:n}):e},y=t.useCallback((()=>{const e=g();Zc(e)||f((t=>b(t,e)))}),[g]);return qc((()=>{const e=()=>{d.current=0,(()=>{const e=g();Zc(e)||Gc.flushSync((()=>{f((t=>b(t,e)))}))})()};const t=function(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}(e),n=u.current,r=Qc(n);let i;return r.addEventListener("resize",t),"undefined"!=typeof ResizeObserver&&(i=new ResizeObserver(e),i.observe(n)),()=>{t.clear(),cancelAnimationFrame(undefined),r.removeEventListener("resize",t),i&&i.disconnect()}}),[g]),qc((()=>{y()})),t.useEffect((()=>{d.current=0}),[l]),(0,Uc.jsxs)(t.Fragment,{children:[(0,Uc.jsx)("textarea",Re({value:l,onChange:e=>{d.current=0,c||y(),r&&r(e)},ref:m,rows:o,style:Re({height:h.outerHeightStyle,overflow:h.overflow?"hidden":void 0},a)},s)),(0,Uc.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:p,tabIndex:-1,style:Re({},Jc,a,{paddingTop:0,paddingBottom:0})})]})}));function tu(e){return"string"==typeof e}const nu=t.createContext(void 0),ru=Vl,iu=Vc,ou=qc;i(679);var au=zl((function(e,n){var r=e.styles,i=Cl([r],void 0,t.useContext(Ol)),o=t.useRef();return El((function(){var e=n.key+"-global",t=new n.sheet.constructor({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),r=!1,a=document.querySelector('style[data-emotion="'+e+" "+i.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==a&&(r=!0,a.setAttribute("data-emotion",e),t.hydrate([a])),o.current=[t,r],function(){t.flush()}}),[n]),El((function(){var e=o.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==i.next&&Rl(n,i.next,!0),t.tags.length){var r=t.tags[t.tags.length-1].nextElementSibling;t.before=r,t.flush()}n.insert("",i,t,!1)}}),[n,i.name]),null}));function lu(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Cl(t)}var su=function(){var e=lu.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};function cu(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,Uc.jsx)(au,{styles:r})}const uu=function({styles:e,themeId:t,defaultTheme:n={}}){const r=Pc(n),i="function"==typeof e?e(t&&r[t]||r):e;return(0,Uc.jsx)(cu,{styles:i})},mu=function(e){return(0,Uc.jsx)(uu,Re({},e,{defaultTheme:Ac,themeId:Sc}))};function pu(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function du(e){return Fc("MuiInputBase",e)}const hu=Dc("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),fu=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],gu=Bc("div",{name:"MuiInputBase",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${ru(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]}})((({theme:e,ownerState:t})=>Re({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${hu.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&Re({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),bu=Bc("input",{name:"MuiInputBase",slot:"Input",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=Re({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),i={opacity:"0 !important"},o=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return Re({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${hu.formControl} &`]:{"&::-webkit-input-placeholder":i,"&::-moz-placeholder":i,"&:-ms-input-placeholder":i,"&::-ms-input-placeholder":i,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus:-ms-input-placeholder":o,"&:focus::-ms-input-placeholder":o},[`&.${hu.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),yu=(0,Uc.jsx)(mu,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),_u=t.forwardRef((function(e,n){var r;const i=Nc({props:e,name:"MuiInputBase"}),{"aria-describedby":o,autoComplete:a,autoFocus:l,className:s,components:c={},componentsProps:u={},defaultValue:m,disabled:p,disableInjectingGlobalStyles:d,endAdornment:h,fullWidth:f=!1,id:g,inputComponent:b="input",inputProps:y={},inputRef:_,maxRows:v,minRows:w,multiline:k=!1,name:x,onBlur:C,onChange:A,onClick:S,onFocus:E,onKeyDown:B,onKeyUp:z,placeholder:O,readOnly:T,renderSuffix:R,rows:P,slotProps:N={},slots:I={},startAdornment:j,type:L="text",value:M}=i,F=De(i,fu),D=null!=y.value?y.value:M,{current:W}=t.useRef(null!=D),U=t.useRef(),H=t.useCallback((e=>{}),[]),$=iu(U,_,y.ref,H),[Y,G]=t.useState(!1),V=t.useContext(nu),Q=function({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}({props:i,muiFormControl:V,states:["color","disabled","error","hiddenLabel","size","required","filled"]});Q.focused=V?V.focused:Y,t.useEffect((()=>{!V&&p&&Y&&(G(!1),C&&C())}),[V,p,Y,C]);const q=V&&V.onFilled,K=V&&V.onEmpty,X=t.useCallback((e=>{!function(e,t=!1){return e&&(pu(e.value)&&""!==e.value||t&&pu(e.defaultValue)&&""!==e.defaultValue)}(e)?K&&K():q&&q()}),[q,K]);ou((()=>{W&&X({value:D})}),[D,X,W]),t.useEffect((()=>{X(U.current)}),[]);let J=b,Z=y;k&&"input"===J&&(Z=Re(P?{type:void 0,minRows:P,maxRows:P}:{type:void 0,maxRows:v,minRows:w},Z),J=eu),t.useEffect((()=>{V&&V.setAdornedStart(Boolean(j))}),[V,j]);const ee=Re({},i,{color:Q.color||"primary",disabled:Q.disabled,endAdornment:h,error:Q.error,focused:Q.focused,formControl:V,fullWidth:f,hiddenLabel:Q.hiddenLabel,multiline:k,size:Q.size,startAdornment:j,type:L}),te=(e=>{const{classes:t,color:n,disabled:r,error:i,endAdornment:o,focused:a,formControl:l,fullWidth:s,hiddenLabel:c,multiline:u,readOnly:m,size:p,startAdornment:d,type:h}=e;return Ka({root:["root",`color${ru(n)}`,r&&"disabled",i&&"error",s&&"fullWidth",a&&"focused",l&&"formControl",p&&"medium"!==p&&`size${ru(p)}`,u&&"multiline",d&&"adornedStart",o&&"adornedEnd",c&&"hiddenLabel",m&&"readOnly"],input:["input",r&&"disabled","search"===h&&"inputTypeSearch",u&&"inputMultiline","small"===p&&"inputSizeSmall",c&&"inputHiddenLabel",d&&"inputAdornedStart",o&&"inputAdornedEnd",m&&"readOnly"]},du,t)})(ee),ne=I.root||c.Root||gu,re=N.root||u.root||{},ie=I.input||c.Input||bu;return Z=Re({},Z,null!=(r=N.input)?r:u.input),(0,Uc.jsxs)(t.Fragment,{children:[!d&&yu,(0,Uc.jsxs)(ne,Re({},re,!tu(ne)&&{ownerState:Re({},ee,re.ownerState)},{ref:n,onClick:e=>{U.current&&e.currentTarget===e.target&&U.current.focus(),S&&S(e)}},F,{className:qa(te.root,re.className,s,T&&"MuiInputBase-readOnly"),children:[j,(0,Uc.jsx)(nu.Provider,{value:null,children:(0,Uc.jsx)(ie,Re({ownerState:ee,"aria-invalid":Q.error,"aria-describedby":o,autoComplete:a,autoFocus:l,defaultValue:m,disabled:Q.disabled,id:g,onAnimationStart:e=>{X("mui-auto-fill-cancel"===e.animationName?U.current:{value:"x"})},name:x,placeholder:O,readOnly:T,required:Q.required,rows:P,value:D,onKeyDown:B,onKeyUp:z,type:L},Z,!tu(ie)&&{as:J,ownerState:Re({},ee,Z.ownerState)},{ref:$,className:qa(te.input,Z.className,T&&"MuiInputBase-readOnly"),onBlur:e=>{C&&C(e),y.onBlur&&y.onBlur(e),V&&V.onBlur?V.onBlur(e):G(!1)},onChange:(e,...t)=>{if(!W){const t=e.target||U.current;if(null==t)throw new Error(Xa(1));X({value:t.value})}y.onChange&&y.onChange(e,...t),A&&A(e,...t)},onFocus:e=>{Q.disabled?e.stopPropagation():(E&&E(e),y.onFocus&&y.onFocus(e),V&&V.onFocus?V.onFocus(e):G(!0))}}))}),h,R?R(Re({},Q,{startAdornment:j})):null]}))]})})),vu=function(e){const n=t.useRef(e);return qc((()=>{n.current=e})),t.useRef(((...e)=>(0,n.current)(...e))).current};let wu,ku=!0,xu=!1;const Cu={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Au(e){e.metaKey||e.altKey||e.ctrlKey||(ku=!0)}function Su(){ku=!1}function Eu(){"hidden"===this.visibilityState&&xu&&(ku=!0)}const Bu=function(){const e=t.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",Au,!0),t.addEventListener("mousedown",Su,!0),t.addEventListener("pointerdown",Su,!0),t.addEventListener("touchstart",Su,!0),t.addEventListener("visibilitychange",Eu,!0))}),[]),n=t.useRef(!1);return{isFocusVisibleRef:n,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return ku||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!Cu[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(n.current=!0,!0)},onBlur:function(){return!!n.current&&(xu=!0,window.clearTimeout(wu),wu=window.setTimeout((()=>{xu=!1}),100),n.current=!1,!0)},ref:e}};function zu(e,t){return zu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},zu(e,t)}const Ou=t.createContext(null);function Tu(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function Ru(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Pu(e,n,r){var i=Tu(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,i=Object.create(null),o=[];for(var a in e)a in t?o.length&&(i[a]=o,o=[]):o.push(a);var l={};for(var s in t){if(i[s])for(r=0;r<i[s].length;r++){var c=i[s][r];l[i[s][r]]=n(c)}l[s]=n(s)}for(r=0;r<o.length;r++)l[o[r]]=n(o[r]);return l}(n,i);return Object.keys(o).forEach((function(a){var l=o[a];if((0,t.isValidElement)(l)){var s=a in n,c=a in i,u=n[a],m=(0,t.isValidElement)(u)&&!u.props.in;!c||s&&!m?c||!s||m?c&&s&&(0,t.isValidElement)(u)&&(o[a]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:u.props.in,exit:Ru(l,"exit",e),enter:Ru(l,"enter",e)})):o[a]=(0,t.cloneElement)(l,{in:!1}):o[a]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:Ru(l,"exit",e),enter:Ru(l,"enter",e)})}})),o}var Nu=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Iu=function(e){var n,r;function i(t,n){var r,i=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:i,firstRender:!0},r}r=e,(n=i).prototype=Object.create(r.prototype),n.prototype.constructor=n,zu(n,r);var o=i.prototype;return o.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},o.componentWillUnmount=function(){this.mounted=!1},i.getDerivedStateFromProps=function(e,n){var r,i,o=n.children,a=n.handleExited;return{children:n.firstRender?(r=e,i=a,Tu(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:i.bind(null,e),in:!0,appear:Ru(e,"appear",r),enter:Ru(e,"enter",r),exit:Ru(e,"exit",r)})}))):Pu(e,o,a),firstRender:!1}},o.handleExited=function(e,t){var n=Tu(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Re({},t.children);return delete n[e.key],{children:n}})))},o.render=function(){var e=this.props,n=e.component,r=e.childFactory,i=De(e,["component","childFactory"]),o=this.state.contextValue,a=Nu(this.state.children).map(r);return delete i.appear,delete i.enter,delete i.exit,null===n?t.createElement(Ou.Provider,{value:o},a):t.createElement(Ou.Provider,{value:o},t.createElement(n,i,a))},i}(t.Component);Iu.propTypes={},Iu.defaultProps={component:"div",childFactory:function(e){return e}};const ju=Iu,Lu=Dc("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Mu=["center","classes","className"];let Fu,Du,Wu,Uu,Hu=e=>e;const $u=su(Fu||(Fu=Hu`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),Yu=su(Du||(Du=Hu`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),Gu=su(Wu||(Wu=Hu`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),Vu=Bc("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),Qu=Bc((function(e){const{className:n,classes:r,pulsate:i=!1,rippleX:o,rippleY:a,rippleSize:l,in:s,onExited:c,timeout:u}=e,[m,p]=t.useState(!1),d=qa(n,r.ripple,r.rippleVisible,i&&r.ripplePulsate),h={width:l,height:l,top:-l/2+a,left:-l/2+o},f=qa(r.child,m&&r.childLeaving,i&&r.childPulsate);return s||m||p(!0),t.useEffect((()=>{if(!s&&null!=c){const e=setTimeout(c,u);return()=>{clearTimeout(e)}}}),[c,s,u]),(0,Uc.jsx)("span",{className:d,style:h,children:(0,Uc.jsx)("span",{className:f})})}),{name:"MuiTouchRipple",slot:"Ripple"})(Uu||(Uu=Hu`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Lu.rippleVisible,$u,550,(({theme:e})=>e.transitions.easing.easeInOut),Lu.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),Lu.child,Lu.childLeaving,Yu,550,(({theme:e})=>e.transitions.easing.easeInOut),Lu.childPulsate,Gu,(({theme:e})=>e.transitions.easing.easeInOut)),qu=t.forwardRef((function(e,n){const r=Nc({props:e,name:"MuiTouchRipple"}),{center:i=!1,classes:o={},className:a}=r,l=De(r,Mu),[s,c]=t.useState([]),u=t.useRef(0),m=t.useRef(null);t.useEffect((()=>{m.current&&(m.current(),m.current=null)}),[s]);const p=t.useRef(!1),d=t.useRef(0),h=t.useRef(null),f=t.useRef(null);t.useEffect((()=>()=>{d.current&&clearTimeout(d.current)}),[]);const g=t.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:i,cb:a}=e;c((e=>[...e,(0,Uc.jsx)(Qu,{classes:{ripple:qa(o.ripple,Lu.ripple),rippleVisible:qa(o.rippleVisible,Lu.rippleVisible),ripplePulsate:qa(o.ripplePulsate,Lu.ripplePulsate),child:qa(o.child,Lu.child),childLeaving:qa(o.childLeaving,Lu.childLeaving),childPulsate:qa(o.childPulsate,Lu.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:i},u.current)])),u.current+=1,m.current=a}),[o]),b=t.useCallback(((e={},t={},n=(()=>{}))=>{const{pulsate:r=!1,center:o=i||t.pulsate,fakeElement:a=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&p.current)return void(p.current=!1);"touchstart"===(null==e?void 0:e.type)&&(p.current=!0);const l=a?null:f.current,s=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let c,u,m;if(o||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(s.width/2),u=Math.round(s.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;c=Math.round(t-s.left),u=Math.round(n-s.top)}if(o)m=Math.sqrt((2*s.width**2+s.height**2)/3),m%2==0&&(m+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-c),c)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-u),u)+2;m=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===h.current&&(h.current=()=>{g({pulsate:r,rippleX:c,rippleY:u,rippleSize:m,cb:n})},d.current=setTimeout((()=>{h.current&&(h.current(),h.current=null)}),80)):g({pulsate:r,rippleX:c,rippleY:u,rippleSize:m,cb:n})}),[i,g]),y=t.useCallback((()=>{b({},{pulsate:!0})}),[b]),_=t.useCallback(((e,t)=>{if(clearTimeout(d.current),"touchend"===(null==e?void 0:e.type)&&h.current)return h.current(),h.current=null,void(d.current=setTimeout((()=>{_(e,t)})));h.current=null,c((e=>e.length>0?e.slice(1):e)),m.current=t}),[]);return t.useImperativeHandle(n,(()=>({pulsate:y,start:b,stop:_})),[y,b,_]),(0,Uc.jsx)(Vu,Re({className:qa(Lu.root,o.root,a),ref:f},l,{children:(0,Uc.jsx)(ju,{component:null,exit:!0,children:s})}))})),Ku=qu;function Xu(e){return Fc("MuiButtonBase",e)}const Ju=Dc("MuiButtonBase",["root","disabled","focusVisible"]),Zu=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],em=Bc("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${Ju.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),tm=t.forwardRef((function(e,n){const r=Nc({props:e,name:"MuiButtonBase"}),{action:i,centerRipple:o=!1,children:a,className:l,component:s="button",disabled:c=!1,disableRipple:u=!1,disableTouchRipple:m=!1,focusRipple:p=!1,LinkComponent:d="a",onBlur:h,onClick:f,onContextMenu:g,onDragLeave:b,onFocus:y,onFocusVisible:_,onKeyDown:v,onKeyUp:w,onMouseDown:k,onMouseLeave:x,onMouseUp:C,onTouchEnd:A,onTouchMove:S,onTouchStart:E,tabIndex:B=0,TouchRippleProps:z,touchRippleRef:O,type:T}=r,R=De(r,Zu),P=t.useRef(null),N=t.useRef(null),I=iu(N,O),{isFocusVisibleRef:j,onFocus:L,onBlur:M,ref:F}=Bu(),[D,W]=t.useState(!1);c&&D&&W(!1),t.useImperativeHandle(i,(()=>({focusVisible:()=>{W(!0),P.current.focus()}})),[]);const[U,H]=t.useState(!1);t.useEffect((()=>{H(!0)}),[]);const $=U&&!u&&!c;function Y(e,t,n=m){return vu((r=>(t&&t(r),!n&&N.current&&N.current[e](r),!0)))}t.useEffect((()=>{D&&p&&!u&&U&&N.current.pulsate()}),[u,p,D,U]);const G=Y("start",k),V=Y("stop",g),Q=Y("stop",b),q=Y("stop",C),K=Y("stop",(e=>{D&&e.preventDefault(),x&&x(e)})),X=Y("start",E),J=Y("stop",A),Z=Y("stop",S),ee=Y("stop",(e=>{M(e),!1===j.current&&W(!1),h&&h(e)}),!1),te=vu((e=>{P.current||(P.current=e.currentTarget),L(e),!0===j.current&&(W(!0),_&&_(e)),y&&y(e)})),ne=()=>{const e=P.current;return s&&"button"!==s&&!("A"===e.tagName&&e.href)},re=t.useRef(!1),ie=vu((e=>{p&&!re.current&&D&&N.current&&" "===e.key&&(re.current=!0,N.current.stop(e,(()=>{N.current.start(e)}))),e.target===e.currentTarget&&ne()&&" "===e.key&&e.preventDefault(),v&&v(e),e.target===e.currentTarget&&ne()&&"Enter"===e.key&&!c&&(e.preventDefault(),f&&f(e))})),oe=vu((e=>{p&&" "===e.key&&N.current&&D&&!e.defaultPrevented&&(re.current=!1,N.current.stop(e,(()=>{N.current.pulsate(e)}))),w&&w(e),f&&e.target===e.currentTarget&&ne()&&" "===e.key&&!e.defaultPrevented&&f(e)}));let ae=s;"button"===ae&&(R.href||R.to)&&(ae=d);const le={};"button"===ae?(le.type=void 0===T?"button":T,le.disabled=c):(R.href||R.to||(le.role="button"),c&&(le["aria-disabled"]=c));const se=iu(n,F,P),ce=Re({},r,{centerRipple:o,component:s,disabled:c,disableRipple:u,disableTouchRipple:m,focusRipple:p,tabIndex:B,focusVisible:D}),ue=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:i}=e,o=Ka({root:["root",t&&"disabled",n&&"focusVisible"]},Xu,i);return n&&r&&(o.root+=` ${r}`),o})(ce);return(0,Uc.jsxs)(em,Re({as:ae,className:qa(ue.root,l),ownerState:ce,onBlur:ee,onClick:f,onContextMenu:V,onFocus:te,onKeyDown:ie,onKeyUp:oe,onMouseDown:G,onMouseLeave:K,onMouseUp:q,onDragLeave:Q,onTouchEnd:J,onTouchMove:Z,onTouchStart:X,ref:se,tabIndex:c?-1:B,type:T},le,R,{children:[a,$?(0,Uc.jsx)(Ku,Re({ref:I,center:o},z)):null]}))})),nm=tm;function rm(e){return Fc("MuiIconButton",e)}const im=Dc("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),om=["edge","children","className","color","disabled","disableFocusRipple","size"],am=Bc(nm,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t[`color${ru(n.color)}`],n.edge&&t[`edge${ru(n.edge)}`],t[`size${ru(n.size)}`]]}})((({theme:e,ownerState:t})=>Re({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:nl(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>{var n;const r=null==(n=(e.vars||e).palette)?void 0:n[t.color];return Re({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&Re({color:null==r?void 0:r.main},!t.disableRipple&&{"&:hover":Re({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:nl(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${im.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),lm=t.forwardRef((function(e,t){const n=Nc({props:e,name:"MuiIconButton"}),{edge:r=!1,children:i,className:o,color:a="default",disabled:l=!1,disableFocusRipple:s=!1,size:c="medium"}=n,u=De(n,om),m=Re({},n,{edge:r,color:a,disabled:l,disableFocusRipple:s,size:c}),p=(e=>{const{classes:t,disabled:n,color:r,edge:i,size:o}=e;return Ka({root:["root",n&&"disabled","default"!==r&&`color${ru(r)}`,i&&`edge${ru(i)}`,`size${ru(o)}`]},rm,t)})(m);return(0,Uc.jsx)(am,Re({className:qa(p.root,o),centerRipple:!0,focusRipple:!s,disabled:l,ref:t,ownerState:m},u,{children:i}))})),sm=function(e){var n=(0,t.useContext)(Da),r=se(),i=(0,t.useRef)(),o=function(){if(0===i.current.value.trim().length)return!1;n.setSearchStringFn(i.current.value.trim()),r(e.linkTo)};return t.createElement(Yc,{className:"paper",component:"form",se:{p:"2px 4px",display:"flex",alignItems:"center",width:"10rem",backgroundColor:"red"}},t.createElement(_u,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputProps:{"ariel-label":"search"},inputRef:i,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),o())}}),t.createElement(lm,{type:"button",onClick:o,sx:{p:"10px"},"aria-label":"search"}))},cm=function(){return t.createElement("div",{className:"gradovi"},t.createElement("h2",null,"BOJE"),t.createElement("div",{className:"gradZem"},t.createElement("div",{className:"search"},t.createElement(sm,{placeholder:" Pretraži boje",linkTo:"/searchColor"}))),t.createElement("div",{className:"razmak"}))};function um(e){return um="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},um(e)}function mm(){mm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,i=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof b?t:b,a=Object.create(o.prototype),l=new O(r||[]);return i(a,"_invoke",{value:S(e,n,l)}),a}function m(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",d="suspendedYield",h="executing",f="completed",g={};function b(){}function y(){}function _(){}var v={};c(v,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(T([])));k&&k!==n&&r.call(k,a)&&(v=k);var x=_.prototype=b.prototype=Object.create(v);function C(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function A(e,t){function n(i,o,a,l){var s=m(e[i],e,o);if("throw"!==s.type){var c=s.arg,u=c.value;return u&&"object"==um(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,a,l)}),(function(e){n("throw",e,a,l)})):t.resolve(u).then((function(e){c.value=e,a(c)}),(function(e){return n("throw",e,a,l)}))}l(s.arg)}var o;i(this,"_invoke",{value:function(e,r){function i(){return new t((function(t,i){n(e,r,t,i)}))}return o=o?o.then(i,i):i()}})}function S(t,n,r){var i=p;return function(o,a){if(i===h)throw new Error("Generator is already running");if(i===f){if("throw"===o)throw a;return{value:e,done:!0}}for(r.method=o,r.arg=a;;){var l=r.delegate;if(l){var s=E(l,r);if(s){if(s===g)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(i===p)throw i=f,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);i=h;var c=m(t,n,r);if("normal"===c.type){if(i=r.done?f:d,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(i=f,r.method="throw",r.arg=c.arg)}}}function E(t,n){var r=n.method,i=t.iterator[r];if(i===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,E(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=m(i,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var a=o.arg;return a?a.done?(n[t.resultName]=a.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function z(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function T(t){if(t||""===t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,o=function n(){for(;++i<t.length;)if(r.call(t,i))return n.value=t[i],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(um(t)+" is not iterable")}return y.prototype=_,i(x,"constructor",{value:_,configurable:!0}),i(_,"constructor",{value:y,configurable:!0}),y.displayName=c(_,s,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,c(e,s,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},C(A.prototype),c(A.prototype,l,(function(){return this})),t.AsyncIterator=A,t.async=function(e,n,r,i,o){void 0===o&&(o=Promise);var a=new A(u(e,n,r,i),o);return t.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},C(x),c(x,s,"Generator"),c(x,a,(function(){return this})),c(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(z),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function i(r,i){return l.type="throw",l.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],l=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(s&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),z(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;z(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function pm(e,t,n,r,i,o,a){try{var l=e[o](a),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,i)}function dm(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,l=[],s=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){c=!0,i=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw i}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return hm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?hm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const fm=function(){var e=dm((0,t.useState)(null),2),n=(e[0],e[1]),r=dm((0,t.useState)([]),2),i=r[0],o=r[1],a=dm((0,t.useState)(!0),2),l=a[0],s=a[1],c=dm((0,t.useState)([]),2),u=c[0],m=c[1],p=(0,t.useContext)(Da).searchStringValue;(0,t.useEffect)((function(){d(p)}),[p]);var d=function(){var e,t=(e=mm().mark((function e(t){var r,i,a;return mm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Fa.get("./PeriodicTableJSON.json");case 4:r=e.sent,i=r.data.elements,a=i.filter((function(e){return e.name.toLowerCase().includes(t.toLowerCase())})),console.log("spisak boja",i),console.log("Pretraga boja",a),s(!1),o(a),m(a.length),e.next=18;break;case 14:e.prev=14,e.t0=e.catch(1),n(e.t0),s(!1);case 18:case"end":return e.stop()}}),e,null,[[1,14]])})),function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){pm(o,r,i,a,l,"next",e)}function l(e){pm(o,r,i,a,l,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return l?t.createElement(Va,null):0==u?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(cm,null)),t.createElement("h2",null,"Ništa slično nije pronađeno")):t.createElement(t.Fragment,null,t.createElement("table",{className:"cities"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(cm,null))),t.createElement("tr",null,t.createElement("th",{className:"state"},"Broj boja:"),t.createElement("th",{className:"nameCity"},u)),t.createElement("tr",null,t.createElement("th",{colSpan:2,className:"borderBottom"}))),i.map((function(e){return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"title"},"Ime:"),t.createElement("td",{className:"nameCity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"title"},"Heksadecimalni broj"),t.createElement("td",{className:"state"},e.category)))}))))};function gm(){return t.createElement(Ae,{basename:"/"},t.createElement("div",{className:"navContainer"},t.createElement("p",null,t.createElement(Be,{to:"/",className:"linker"},"ELEMENTS")),t.createElement("p",null,t.createElement(sm,{placeholder:" Pretraži boje",linkTo:"/searchColor"})),t.createElement("p",null,t.createElement(Be,{to:"/table",className:"linker"},"PERIODIC TABLE"))),t.createElement(ve,null,t.createElement(ye,{path:"/",element:t.createElement(qi,null)}),t.createElement(ye,{path:"/table",element:t.createElement(Xi,null)}),t.createElement(ye,{path:"/:atomNum",element:t.createElement(to,null)}),t.createElement(ye,{path:"/searchColor",element:t.createElement(fm,null)})),t.createElement("div",{className:"home"},t.createElement("div",{className:"img"})))}function bm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ym=function(){var e,n,r=(e=(0,t.useState)("Enter search criterium!"),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,l=[],s=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){c=!0,i=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw i}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return bm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?bm(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[0],o=r[1];return t.createElement(Da.Provider,{value:{setSearchStringFn:o,searchStringValue:i}},t.createElement(gm,null))};r.createRoot(document.getElementById("app")).render(t.createElement(ym,{number:10,title:"String from index file",text:"Text from index file"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,